

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Mar 30 04:18:24 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	text40,local,class=CODE,merge=1,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	intentry,global,class=CODE,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	dabs	1,0x7E,2
    64  0000                     
    65                           ; Version 1.44
    66                           ; Generated 14/09/2017 GMT
    67                           ; 
    68                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution.
    82                           ; 
    83                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    84                           ;        software without specific prior written permission.
    85                           ; 
    86                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    87                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    88                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    89                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    90                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    91                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    92                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    93                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    94                           ; 
    95                           ; 
    96                           ; Code-generator required, PIC16F887 Definitions
    97                           ; 
    98                           ; SFR Addresses
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0015                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001B                     	;# 
   130  001C                     	;# 
   131  001D                     	;# 
   132  001E                     	;# 
   133  001F                     	;# 
   134  0081                     	;# 
   135  0085                     	;# 
   136  0086                     	;# 
   137  0087                     	;# 
   138  0088                     	;# 
   139  0089                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  008E                     	;# 
   143  008F                     	;# 
   144  0090                     	;# 
   145  0091                     	;# 
   146  0092                     	;# 
   147  0093                     	;# 
   148  0093                     	;# 
   149  0093                     	;# 
   150  0094                     	;# 
   151  0095                     	;# 
   152  0096                     	;# 
   153  0097                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009A                     	;# 
   157  009B                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  0105                     	;# 
   163  0107                     	;# 
   164  0108                     	;# 
   165  0109                     	;# 
   166  010C                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  0185                     	;# 
   172  0187                     	;# 
   173  0188                     	;# 
   174  0189                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  008F                     	;# 
   222  0090                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0093                     	;# 
   226  0093                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  0095                     	;# 
   230  0096                     	;# 
   231  0097                     	;# 
   232  0098                     	;# 
   233  0099                     	;# 
   234  009A                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  009F                     	;# 
   240  0105                     	;# 
   241  0107                     	;# 
   242  0108                     	;# 
   243  0109                     	;# 
   244  010C                     	;# 
   245  010C                     	;# 
   246  010D                     	;# 
   247  010E                     	;# 
   248  010F                     	;# 
   249  0185                     	;# 
   250  0187                     	;# 
   251  0188                     	;# 
   252  0189                     	;# 
   253  018C                     	;# 
   254  018D                     	;# 
   255  0000                     	;# 
   256  0001                     	;# 
   257  0002                     	;# 
   258  0003                     	;# 
   259  0004                     	;# 
   260  0005                     	;# 
   261  0006                     	;# 
   262  0007                     	;# 
   263  0008                     	;# 
   264  0009                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001D                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  0088                     	;# 
   295  0089                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  008F                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0093                     	;# 
   304  0093                     	;# 
   305  0093                     	;# 
   306  0094                     	;# 
   307  0095                     	;# 
   308  0096                     	;# 
   309  0097                     	;# 
   310  0098                     	;# 
   311  0099                     	;# 
   312  009A                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  009F                     	;# 
   318  0105                     	;# 
   319  0107                     	;# 
   320  0108                     	;# 
   321  0109                     	;# 
   322  010C                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  0185                     	;# 
   328  0187                     	;# 
   329  0188                     	;# 
   330  0189                     	;# 
   331  018C                     	;# 
   332  018D                     	;# 
   333  0000                     	;# 
   334  0001                     	;# 
   335  0002                     	;# 
   336  0003                     	;# 
   337  0004                     	;# 
   338  0005                     	;# 
   339  0006                     	;# 
   340  0007                     	;# 
   341  0008                     	;# 
   342  0009                     	;# 
   343  000A                     	;# 
   344  000B                     	;# 
   345  000C                     	;# 
   346  000D                     	;# 
   347  000E                     	;# 
   348  000E                     	;# 
   349  000F                     	;# 
   350  0010                     	;# 
   351  0011                     	;# 
   352  0012                     	;# 
   353  0013                     	;# 
   354  0014                     	;# 
   355  0015                     	;# 
   356  0015                     	;# 
   357  0016                     	;# 
   358  0017                     	;# 
   359  0018                     	;# 
   360  0019                     	;# 
   361  001A                     	;# 
   362  001B                     	;# 
   363  001B                     	;# 
   364  001C                     	;# 
   365  001D                     	;# 
   366  001E                     	;# 
   367  001F                     	;# 
   368  0081                     	;# 
   369  0085                     	;# 
   370  0086                     	;# 
   371  0087                     	;# 
   372  0088                     	;# 
   373  0089                     	;# 
   374  008C                     	;# 
   375  008D                     	;# 
   376  008E                     	;# 
   377  008F                     	;# 
   378  0090                     	;# 
   379  0091                     	;# 
   380  0092                     	;# 
   381  0093                     	;# 
   382  0093                     	;# 
   383  0093                     	;# 
   384  0094                     	;# 
   385  0095                     	;# 
   386  0096                     	;# 
   387  0097                     	;# 
   388  0098                     	;# 
   389  0099                     	;# 
   390  009A                     	;# 
   391  009B                     	;# 
   392  009C                     	;# 
   393  009D                     	;# 
   394  009E                     	;# 
   395  009F                     	;# 
   396  0105                     	;# 
   397  0107                     	;# 
   398  0108                     	;# 
   399  0109                     	;# 
   400  010C                     	;# 
   401  010C                     	;# 
   402  010D                     	;# 
   403  010E                     	;# 
   404  010F                     	;# 
   405  0185                     	;# 
   406  0187                     	;# 
   407  0188                     	;# 
   408  0189                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  0000                     	;# 
   412  0001                     	;# 
   413  0002                     	;# 
   414  0003                     	;# 
   415  0004                     	;# 
   416  0005                     	;# 
   417  0006                     	;# 
   418  0007                     	;# 
   419  0008                     	;# 
   420  0009                     	;# 
   421  000A                     	;# 
   422  000B                     	;# 
   423  000C                     	;# 
   424  000D                     	;# 
   425  000E                     	;# 
   426  000E                     	;# 
   427  000F                     	;# 
   428  0010                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0013                     	;# 
   432  0014                     	;# 
   433  0015                     	;# 
   434  0015                     	;# 
   435  0016                     	;# 
   436  0017                     	;# 
   437  0018                     	;# 
   438  0019                     	;# 
   439  001A                     	;# 
   440  001B                     	;# 
   441  001B                     	;# 
   442  001C                     	;# 
   443  001D                     	;# 
   444  001E                     	;# 
   445  001F                     	;# 
   446  0081                     	;# 
   447  0085                     	;# 
   448  0086                     	;# 
   449  0087                     	;# 
   450  0088                     	;# 
   451  0089                     	;# 
   452  008C                     	;# 
   453  008D                     	;# 
   454  008E                     	;# 
   455  008F                     	;# 
   456  0090                     	;# 
   457  0091                     	;# 
   458  0092                     	;# 
   459  0093                     	;# 
   460  0093                     	;# 
   461  0093                     	;# 
   462  0094                     	;# 
   463  0095                     	;# 
   464  0096                     	;# 
   465  0097                     	;# 
   466  0098                     	;# 
   467  0099                     	;# 
   468  009A                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  009F                     	;# 
   474  0105                     	;# 
   475  0107                     	;# 
   476  0108                     	;# 
   477  0109                     	;# 
   478  010C                     	;# 
   479  010C                     	;# 
   480  010D                     	;# 
   481  010E                     	;# 
   482  010F                     	;# 
   483  0185                     	;# 
   484  0187                     	;# 
   485  0188                     	;# 
   486  0189                     	;# 
   487  018C                     	;# 
   488  018D                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  000E                     	;# 
   505  000F                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0013                     	;# 
   510  0014                     	;# 
   511  0015                     	;# 
   512  0015                     	;# 
   513  0016                     	;# 
   514  0017                     	;# 
   515  0018                     	;# 
   516  0019                     	;# 
   517  001A                     	;# 
   518  001B                     	;# 
   519  001B                     	;# 
   520  001C                     	;# 
   521  001D                     	;# 
   522  001E                     	;# 
   523  001F                     	;# 
   524  0081                     	;# 
   525  0085                     	;# 
   526  0086                     	;# 
   527  0087                     	;# 
   528  0088                     	;# 
   529  0089                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  008F                     	;# 
   534  0090                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0093                     	;# 
   538  0093                     	;# 
   539  0093                     	;# 
   540  0094                     	;# 
   541  0095                     	;# 
   542  0096                     	;# 
   543  0097                     	;# 
   544  0098                     	;# 
   545  0099                     	;# 
   546  009A                     	;# 
   547  009B                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009E                     	;# 
   551  009F                     	;# 
   552  0105                     	;# 
   553  0107                     	;# 
   554  0108                     	;# 
   555  0109                     	;# 
   556  010C                     	;# 
   557  010C                     	;# 
   558  010D                     	;# 
   559  010E                     	;# 
   560  010F                     	;# 
   561  0185                     	;# 
   562  0187                     	;# 
   563  0188                     	;# 
   564  0189                     	;# 
   565  018C                     	;# 
   566  018D                     	;# 
   567  0000                     	;# 
   568  0001                     	;# 
   569  0002                     	;# 
   570  0003                     	;# 
   571  0004                     	;# 
   572  0005                     	;# 
   573  0006                     	;# 
   574  0007                     	;# 
   575  0008                     	;# 
   576  0009                     	;# 
   577  000A                     	;# 
   578  000B                     	;# 
   579  000C                     	;# 
   580  000D                     	;# 
   581  000E                     	;# 
   582  000E                     	;# 
   583  000F                     	;# 
   584  0010                     	;# 
   585  0011                     	;# 
   586  0012                     	;# 
   587  0013                     	;# 
   588  0014                     	;# 
   589  0015                     	;# 
   590  0015                     	;# 
   591  0016                     	;# 
   592  0017                     	;# 
   593  0018                     	;# 
   594  0019                     	;# 
   595  001A                     	;# 
   596  001B                     	;# 
   597  001B                     	;# 
   598  001C                     	;# 
   599  001D                     	;# 
   600  001E                     	;# 
   601  001F                     	;# 
   602  0081                     	;# 
   603  0085                     	;# 
   604  0086                     	;# 
   605  0087                     	;# 
   606  0088                     	;# 
   607  0089                     	;# 
   608  008C                     	;# 
   609  008D                     	;# 
   610  008E                     	;# 
   611  008F                     	;# 
   612  0090                     	;# 
   613  0091                     	;# 
   614  0092                     	;# 
   615  0093                     	;# 
   616  0093                     	;# 
   617  0093                     	;# 
   618  0094                     	;# 
   619  0095                     	;# 
   620  0096                     	;# 
   621  0097                     	;# 
   622  0098                     	;# 
   623  0099                     	;# 
   624  009A                     	;# 
   625  009B                     	;# 
   626  009C                     	;# 
   627  009D                     	;# 
   628  009E                     	;# 
   629  009F                     	;# 
   630  0105                     	;# 
   631  0107                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010E                     	;# 
   638  010F                     	;# 
   639  0185                     	;# 
   640  0187                     	;# 
   641  0188                     	;# 
   642  0189                     	;# 
   643  018C                     	;# 
   644  018D                     	;# 
   645  0000                     	;# 
   646  0001                     	;# 
   647  0002                     	;# 
   648  0003                     	;# 
   649  0004                     	;# 
   650  0005                     	;# 
   651  0006                     	;# 
   652  0007                     	;# 
   653  0008                     	;# 
   654  0009                     	;# 
   655  000A                     	;# 
   656  000B                     	;# 
   657  000C                     	;# 
   658  000D                     	;# 
   659  000E                     	;# 
   660  000E                     	;# 
   661  000F                     	;# 
   662  0010                     	;# 
   663  0011                     	;# 
   664  0012                     	;# 
   665  0013                     	;# 
   666  0014                     	;# 
   667  0015                     	;# 
   668  0015                     	;# 
   669  0016                     	;# 
   670  0017                     	;# 
   671  0018                     	;# 
   672  0019                     	;# 
   673  001A                     	;# 
   674  001B                     	;# 
   675  001B                     	;# 
   676  001C                     	;# 
   677  001D                     	;# 
   678  001E                     	;# 
   679  001F                     	;# 
   680  0081                     	;# 
   681  0085                     	;# 
   682  0086                     	;# 
   683  0087                     	;# 
   684  0088                     	;# 
   685  0089                     	;# 
   686  008C                     	;# 
   687  008D                     	;# 
   688  008E                     	;# 
   689  008F                     	;# 
   690  0090                     	;# 
   691  0091                     	;# 
   692  0092                     	;# 
   693  0093                     	;# 
   694  0093                     	;# 
   695  0093                     	;# 
   696  0094                     	;# 
   697  0095                     	;# 
   698  0096                     	;# 
   699  0097                     	;# 
   700  0098                     	;# 
   701  0099                     	;# 
   702  009A                     	;# 
   703  009B                     	;# 
   704  009C                     	;# 
   705  009D                     	;# 
   706  009E                     	;# 
   707  009F                     	;# 
   708  0105                     	;# 
   709  0107                     	;# 
   710  0108                     	;# 
   711  0109                     	;# 
   712  010C                     	;# 
   713  010C                     	;# 
   714  010D                     	;# 
   715  010E                     	;# 
   716  010F                     	;# 
   717  0185                     	;# 
   718  0187                     	;# 
   719  0188                     	;# 
   720  0189                     	;# 
   721  018C                     	;# 
   722  018D                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  000E                     	;# 
   739  000F                     	;# 
   740  0010                     	;# 
   741  0011                     	;# 
   742  0012                     	;# 
   743  0013                     	;# 
   744  0014                     	;# 
   745  0015                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0017                     	;# 
   749  0018                     	;# 
   750  0019                     	;# 
   751  001A                     	;# 
   752  001B                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  001D                     	;# 
   756  001E                     	;# 
   757  001F                     	;# 
   758  0081                     	;# 
   759  0085                     	;# 
   760  0086                     	;# 
   761  0087                     	;# 
   762  0088                     	;# 
   763  0089                     	;# 
   764  008C                     	;# 
   765  008D                     	;# 
   766  008E                     	;# 
   767  008F                     	;# 
   768  0090                     	;# 
   769  0091                     	;# 
   770  0092                     	;# 
   771  0093                     	;# 
   772  0093                     	;# 
   773  0093                     	;# 
   774  0094                     	;# 
   775  0095                     	;# 
   776  0096                     	;# 
   777  0097                     	;# 
   778  0098                     	;# 
   779  0099                     	;# 
   780  009A                     	;# 
   781  009B                     	;# 
   782  009C                     	;# 
   783  009D                     	;# 
   784  009E                     	;# 
   785  009F                     	;# 
   786  0105                     	;# 
   787  0107                     	;# 
   788  0108                     	;# 
   789  0109                     	;# 
   790  010C                     	;# 
   791  010C                     	;# 
   792  010D                     	;# 
   793  010E                     	;# 
   794  010F                     	;# 
   795  0185                     	;# 
   796  0187                     	;# 
   797  0188                     	;# 
   798  0189                     	;# 
   799  018C                     	;# 
   800  018D                     	;# 
   801                           
   802                           	psect	nvBANK1
   803  00E7                     __pnvBANK1:	
   804  00E7                     _InitTimer:	
   805  00E7                     	ds	1
   806  00E8                     _LastCntRcv:	
   807  00E8                     	ds	1
   808  00E9                     _PauseMsg:	
   809  00E9                     	ds	1
   810  0019                     _TXREG	set	25
   811  001D                     _CCP2CON	set	29
   812  0017                     _CCP1CON	set	23
   813  001F                     _ADCON0	set	31
   814  0009                     _PORTE	set	9
   815  0008                     _PORTD	set	8
   816  0007                     _PORTC	set	7
   817  0006                     _PORTB	set	6
   818  0005                     _PORTA	set	5
   819  001A                     _RCREG	set	26
   820  000B                     _INTCON	set	11
   821  0031                     _RB1	set	49
   822  0049                     _RE1	set	73
   823  00C1                     _OERR	set	193
   824  00C7                     _SPEN	set	199
   825  00C4                     _CREN	set	196
   826  005F                     _GIE	set	95
   827  005E                     _PEIE	set	94
   828  005C                     _INTE	set	92
   829  0065                     _RCIF	set	101
   830  005D                     _T0IE	set	93
   831  005A                     _T0IF	set	90
   832  006C                     _EEIF	set	108
   833  0099                     _SPBRG	set	153
   834  009A                     _SPBRGH	set	154
   835  0096                     _IOCB	set	150
   836  0095                     _WPUB	set	149
   837  009F                     _ADCON1	set	159
   838  0089                     _TRISE	set	137
   839  0088                     _TRISD	set	136
   840  0087                     _TRISC	set	135
   841  0086                     _TRISB	set	134
   842  0085                     _TRISA	set	133
   843  0081                     _OPTION_REG	set	129
   844  04C1                     _TRMT	set	1217
   845  04C4                     _SYNC	set	1220
   846  04C5                     _TXEN	set	1221
   847  04C2                     _BRGH	set	1218
   848  0465                     _RCIE	set	1125
   849  0109                     _CM2CON1	set	265
   850  0108                     _CM2CON0	set	264
   851  0107                     _CM1CON0	set	263
   852  010C                     _EEDATA	set	268
   853  010D                     _EEADR	set	269
   854  0189                     _ANSELH	set	393
   855  0188                     _ANSEL	set	392
   856  018C                     _EECON1bits	set	396
   857  018D                     _EECON2	set	397
   858  0C3B                     _BRG16	set	3131
   859  0C61                     _WR	set	3169
   860  0C62                     _WREN	set	3170
   861  0C67                     _EEPGD	set	3175
   862                           
   863                           	psect	strings
   864  1800                     __pstrings:	
   865  1800                     stringtab:	
   866  1800                     __stringtab:	
   867                           
   868                           ;	String table - string pointers are 1 byte each
   869  1800  1BFF               	btfsc	btemp+1,7
   870  1801  280A               	ljmp	stringcode
   871  1802  1383               	bcf	3,7
   872  1803  187F               	btfsc	btemp+1,0
   873  1804  1783               	bsf	3,7
   874  1805  0800               	movf	0,w
   875  1806  0A84               	incf	4,f
   876  1807  1903               	skipnz
   877  1808  0AFF               	incf	btemp+1,f
   878  1809  0008               	return
   879  180A                     stringcode:	
   880  180A                     stringdir:	
   881  180A  3018               	movlw	high stringdir
   882  180B  008A               	movwf	10
   883  180C  0804               	movf	4,w
   884  180D  0A84               	incf	4,f
   885  180E  0782               	addwf	2,f
   886  180F                     __stringbase:	
   887  180F  3400               	retlw	0
   888  1810                     __end_of__stringtab:	
   889  1810                     STR_2:	
   890  1810  3449               	retlw	73	;'I'
   891  1811  346E               	retlw	110	;'n'
   892  1812  3474               	retlw	116	;'t'
   893  1813  3465               	retlw	101	;'e'
   894  1814  3472               	retlw	114	;'r'
   895  1815  3466               	retlw	102	;'f'
   896  1816  3461               	retlw	97	;'a'
   897  1817  3463               	retlw	99	;'c'
   898  1818  3465               	retlw	101	;'e'
   899  1819  3420               	retlw	32	;' '
   900  181A  344F               	retlw	79	;'O'
   901  181B  3446               	retlw	70	;'F'
   902  181C  3446               	retlw	70	;'F'
   903  181D  342D               	retlw	45	;'-'
   904  181E  344C               	retlw	76	;'L'
   905  181F  3469               	retlw	105	;'i'
   906  1820  346E               	retlw	110	;'n'
   907  1821  3465               	retlw	101	;'e'
   908  1822  3400               	retlw	0
   909  1823                     STR_1:	
   910  1823  3449               	retlw	73	;'I'
   911  1824  346E               	retlw	110	;'n'
   912  1825  3474               	retlw	116	;'t'
   913  1826  3465               	retlw	101	;'e'
   914  1827  3472               	retlw	114	;'r'
   915  1828  3466               	retlw	102	;'f'
   916  1829  3461               	retlw	97	;'a'
   917  182A  3463               	retlw	99	;'c'
   918  182B  3465               	retlw	101	;'e'
   919  182C  3420               	retlw	32	;' '
   920  182D  344F               	retlw	79	;'O'
   921  182E  344E               	retlw	78	;'N'
   922  182F  342D               	retlw	45	;'-'
   923  1830  344C               	retlw	76	;'L'
   924  1831  3469               	retlw	105	;'i'
   925  1832  346E               	retlw	110	;'n'
   926  1833  3465               	retlw	101	;'e'
   927  1834  3400               	retlw	0
   928                           
   929                           ; #config settings
   930  0000                     
   931                           	psect	cinit
   932  0015                     start_initialization:	
   933  0015                     __initialization:	
   934                           
   935                           ; Clear objects allocated to BITCOMMON
   936  0015  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   937                           
   938                           ; Clear objects allocated to COMMON
   939  0016  01FB               	clrf	__pbssCOMMON& (0+127)
   940  0017  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   941  0018  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   942                           
   943                           ; Clear objects allocated to BANK0
   944  0019  1383               	bcf	3,7	;select IRP bank0
   945  001A  304F               	movlw	low __pbssBANK0
   946  001B  0084               	movwf	4
   947  001C  306C               	movlw	low (__pbssBANK0+29)
   948  001D  160A  158A  2469  120A  118A  	fcall	clear_ram0
   949                           
   950                           ; Clear objects allocated to BANK1
   951  0022  30A0               	movlw	low __pbssBANK1
   952  0023  0084               	movwf	4
   953  0024  30E7               	movlw	low (__pbssBANK1+71)
   954  0025  160A  158A  2469  120A  118A  	fcall	clear_ram0
   955                           
   956                           ; Clear objects allocated to BANK3
   957  002A  1783               	bsf	3,7	;select IRP bank2
   958  002B  3090               	movlw	low __pbssBANK3
   959  002C  0084               	movwf	4
   960  002D  30CC               	movlw	low (__pbssBANK3+60)
   961  002E  160A  158A  2469   	fcall	clear_ram0
   962  0031                     end_of_initialization:	
   963                           ;End of C runtime variable initialization code
   964                           
   965  0031                     __end_of__initialization:	
   966  0031  0183               	clrf	3
   967  0032  120A  118A  2835   	ljmp	_main	;jump to C main() function
   968                           
   969                           	psect	bitbssCOMMON
   970  03D0                     __pbitbssCOMMON:	
   971  03D0                     _LCD_Ok:	
   972  03D0                     	ds	1
   973  03D1                     _OnLineFlag:	
   974  03D1                     	ds	1
   975  03D2                     _TimerFlag2:	
   976  03D2                     	ds	1
   977  03D3                     _TimerFlag1:	
   978  03D3                     	ds	1
   979                           
   980                           	psect	bssCOMMON
   981  007B                     __pbssCOMMON:	
   982  007B                     _SerTimerCount:	
   983  007B                     	ds	1
   984  007C                     _RebootTimer:	
   985  007C                     	ds	1
   986  007D                     _Blink:	
   987  007D                     	ds	1
   988                           
   989                           	psect	bssBANK0
   990  004F                     __pbssBANK0:	
   991  004F                     _gFechaHora:	
   992  004F                     	ds	7
   993  0056                     _SerRxBufferIndex:	
   994  0056                     	ds	1
   995  0057                     _SaveStatusTimer:	
   996  0057                     	ds	1
   997  0058                     _SaveConfigTimer:	
   998  0058                     	ds	1
   999  0059                     _RetryMsg:	
  1000  0059                     	ds	1
  1001  005A                     _TimerDiv2:	
  1002  005A                     	ds	1
  1003  005B                     _TimerDiv1:	
  1004  005B                     	ds	1
  1005  005C                     _SerialMsg:	
  1006  005C                     	ds	16
  1007                           
  1008                           	psect	bssBANK1
  1009  00A0                     __pbssBANK1:	
  1010  00A0                     _IOPORT:	
  1011  00A0                     	ds	60
  1012  00DC                     _gWGND_Data:	
  1013  00DC                     	ds	4
  1014  00E0                     _gWGND_BitCount:	
  1015  00E0                     	ds	1
  1016  00E1                     _gWGND_TimerCount:	
  1017  00E1                     	ds	1
  1018  00E2                     _gWGND_DataReady:	
  1019  00E2                     	ds	1
  1020  00E3                     _PerifBeepOff:	
  1021  00E3                     	ds	1
  1022  00E4                     _PerifBeepOn:	
  1023  00E4                     	ds	1
  1024  00E5                     _PerifBeepCount:	
  1025  00E5                     	ds	1
  1026  00E6                     _SerMsgCount:	
  1027  00E6                     	ds	1
  1028                           
  1029                           	psect	bssBANK3
  1030  0190                     __pbssBANK3:	
  1031  0190                     _IOPORTCONF:	
  1032  0190                     	ds	28
  1033  01AC                     _SerRxBuffer:	
  1034  01AC                     	ds	16
  1035  01BC                     _LastMsgSend:	
  1036  01BC                     	ds	16
  1037                           
  1038                           	psect	clrtext
  1039  1C69                     clear_ram0:	
  1040                           ;	Called with FSR containing the base address, and
  1041                           ;	W with the last address+1
  1042                           
  1043  1C69  0064               	clrwdt	;clear the watchdog before getting into this loop
  1044  1C6A                     clrloop0:	
  1045  1C6A  0180               	clrf	0	;clear RAM location pointed to by FSR
  1046  1C6B  0A84               	incf	4,f	;increment pointer
  1047  1C6C  0604               	xorwf	4,w	;XOR with final address
  1048  1C6D  1903               	btfsc	3,2	;have we reached the end yet?
  1049  1C6E  3400               	retlw	0	;all done for this memory range, return
  1050  1C6F  0604               	xorwf	4,w	;XOR again to restore value
  1051  1C70  2C6A               	goto	clrloop0	;do the next byte
  1052                           
  1053                           	psect	cstackCOMMON
  1054  0070                     __pcstackCOMMON:	
  1055  0070                     ?_SerRecv:	
  1056  0070                     ??_SerRecv:	
  1057                           ; 1 bytes @ 0x0
  1058                           
  1059  0070                     ?_IOInit:	
  1060                           ; 1 bytes @ 0x0
  1061                           
  1062  0070                     ?_PerifInit:	
  1063                           ; 1 bytes @ 0x0
  1064                           
  1065  0070                     ?_SerInit:	
  1066                           ; 1 bytes @ 0x0
  1067                           
  1068  0070                     ?_LCDInit:	
  1069                           ; 1 bytes @ 0x0
  1070                           
  1071  0070                     ?_Beep:	
  1072                           ; 1 bytes @ 0x0
  1073                           
  1074  0070                     ?_IOTask:	
  1075                           ; 1 bytes @ 0x0
  1076                           
  1077  0070                     ?_PerifTask:	
  1078                           ; 1 bytes @ 0x0
  1079                           
  1080  0070                     ?_SerTask:	
  1081                           ; 1 bytes @ 0x0
  1082                           
  1083  0070                     ?_SerTimer:	
  1084                           ; 1 bytes @ 0x0
  1085                           
  1086  0070                     ?_PerifTimer10ms:	
  1087                           ; 1 bytes @ 0x0
  1088                           
  1089  0070                     ?_IOTimer:	
  1090                           ; 1 bytes @ 0x0
  1091                           
  1092  0070                     ?_PerifTimer1s:	
  1093                           ; 1 bytes @ 0x0
  1094                           
  1095  0070                     ?_SerReceive:	
  1096                           ; 1 bytes @ 0x0
  1097                           
  1098  0070                     ?_minipow2:	
  1099                           ; 1 bytes @ 0x0
  1100                           
  1101  0070                     ?_SerSendR:	
  1102                           ; 1 bytes @ 0x0
  1103                           
  1104  0070                     ?_SerAck:	
  1105                           ; 1 bytes @ 0x0
  1106                           
  1107  0070                     ?_SerTimeOut:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?_SerSendQ:	
  1111                           ; 1 bytes @ 0x0
  1112                           
  1113  0070                     ?_IOChanges:	
  1114                           ; 1 bytes @ 0x0
  1115                           
  1116  0070                     ?_LCDBusInput:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ?_LCDBusOutput:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ?_iEEgetc:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ?_LoadConfig:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ?_SaveConfig:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ?_LoadStatus:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_SaveStatus:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ?_PrintInfoScreen:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_Timer0Int:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ??_Timer0Int:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_SerialInt:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_isr:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_main:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_SerPutCh:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?_IOUpdateOut:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_IOUpdateIn:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_IOControlFinPulso:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167                           
  1168                           ; 1 bytes @ 0x0
  1169  0070                     	ds	1
  1170  0071                     SerRecv@sum:	
  1171                           
  1172                           ; 1 bytes @ 0x1
  1173  0071                     	ds	1
  1174  0072                     SerRecv@i:	
  1175                           
  1176                           ; 1 bytes @ 0x2
  1177  0072                     	ds	1
  1178  0073                     SerRecv@ch:	
  1179                           
  1180                           ; 1 bytes @ 0x3
  1181  0073                     	ds	1
  1182  0074                     ??_SerialInt:	
  1183                           
  1184                           ; 1 bytes @ 0x4
  1185  0074                     	ds	1
  1186  0075                     SerialInt@ch:	
  1187                           
  1188                           ; 1 bytes @ 0x5
  1189  0075                     	ds	1
  1190  0076                     ??_isr:	
  1191                           
  1192                           ; 1 bytes @ 0x6
  1193  0076                     	ds	4
  1194                           
  1195                           	psect	cstackBANK0
  1196  0020                     __pcstackBANK0:	
  1197  0020                     ??_PerifInit:	
  1198  0020                     ??_SerInit:	
  1199                           ; 1 bytes @ 0x0
  1200                           
  1201  0020                     ??_Beep:	
  1202                           ; 1 bytes @ 0x0
  1203                           
  1204  0020                     ??_PerifTask:	
  1205                           ; 1 bytes @ 0x0
  1206                           
  1207  0020                     ??_SerTask:	
  1208                           ; 1 bytes @ 0x0
  1209                           
  1210  0020                     ??_SerTimer:	
  1211                           ; 1 bytes @ 0x0
  1212                           
  1213  0020                     ??_PerifTimer10ms:	
  1214                           ; 1 bytes @ 0x0
  1215                           
  1216  0020                     ??_PerifTimer1s:	
  1217                           ; 1 bytes @ 0x0
  1218                           
  1219  0020                     ??_SerReceive:	
  1220                           ; 1 bytes @ 0x0
  1221                           
  1222  0020                     ??_minipow2:	
  1223                           ; 1 bytes @ 0x0
  1224                           
  1225  0020                     ??_SerAck:	
  1226                           ; 1 bytes @ 0x0
  1227                           
  1228  0020                     ?_IOResetChanges:	
  1229                           ; 1 bytes @ 0x0
  1230                           
  1231  0020                     ??_SerTimeOut:	
  1232                           ; 1 bytes @ 0x0
  1233                           
  1234  0020                     ??_IOChanges:	
  1235                           ; 1 bytes @ 0x0
  1236                           
  1237  0020                     ??_LCDBusInput:	
  1238                           ; 1 bytes @ 0x0
  1239                           
  1240  0020                     ??_LCDBusOutput:	
  1241                           ; 1 bytes @ 0x0
  1242                           
  1243  0020                     ?_iEEputc:	
  1244                           ; 1 bytes @ 0x0
  1245                           
  1246  0020                     ??_iEEgetc:	
  1247                           ; 1 bytes @ 0x0
  1248                           
  1249  0020                     ?_PrintDiaSem:	
  1250                           ; 1 bytes @ 0x0
  1251                           
  1252  0020                     ?_PrintMes:	
  1253                           ; 1 bytes @ 0x0
  1254                           
  1255  0020                     ??_SerPutCh:	
  1256                           ; 1 bytes @ 0x0
  1257                           
  1258  0020                     ??_IOUpdateOut:	
  1259                           ; 1 bytes @ 0x0
  1260                           
  1261  0020                     ??_IOUpdateIn:	
  1262                           ; 1 bytes @ 0x0
  1263                           
  1264  0020                     ??_IOControlFinPulso:	
  1265                           ; 1 bytes @ 0x0
  1266                           
  1267  0020                     ?___bmul:	
  1268                           ; 1 bytes @ 0x0
  1269                           
  1270  0020                     ?___lwdiv:	
  1271                           ; 1 bytes @ 0x0
  1272                           
  1273  0020                     ?___lwmod:	
  1274                           ; 2 bytes @ 0x0
  1275                           
  1276  0020                     iEEputc@data:	
  1277                           ; 2 bytes @ 0x0
  1278                           
  1279  0020                     iEEgetc@address:	
  1280                           ; 1 bytes @ 0x0
  1281                           
  1282  0020                     PrintDiaSem@str:	
  1283                           ; 1 bytes @ 0x0
  1284                           
  1285  0020                     PrintMes@str:	
  1286                           ; 1 bytes @ 0x0
  1287                           
  1288  0020                     SerPutCh@ch:	
  1289                           ; 1 bytes @ 0x0
  1290                           
  1291  0020                     IOResetChanges@reset:	
  1292                           ; 1 bytes @ 0x0
  1293                           
  1294  0020                     minipow2@pot:	
  1295                           ; 1 bytes @ 0x0
  1296                           
  1297  0020                     ___bmul@multiplicand:	
  1298                           ; 1 bytes @ 0x0
  1299                           
  1300  0020                     ___lwdiv@divisor:	
  1301                           ; 1 bytes @ 0x0
  1302                           
  1303  0020                     ___lwmod@divisor:	
  1304                           ; 2 bytes @ 0x0
  1305                           
  1306                           
  1307                           ; 2 bytes @ 0x0
  1308  0020                     	ds	1
  1309  0021                     ??_IOInit:	
  1310  0021                     ??_IOTask:	
  1311                           ; 1 bytes @ 0x1
  1312                           
  1313  0021                     ??_IOTimer:	
  1314                           ; 1 bytes @ 0x1
  1315                           
  1316  0021                     ??_SerSendR:	
  1317                           ; 1 bytes @ 0x1
  1318                           
  1319  0021                     ??_IOResetChanges:	
  1320                           ; 1 bytes @ 0x1
  1321                           
  1322  0021                     ??_SerSendQ:	
  1323                           ; 1 bytes @ 0x1
  1324                           
  1325  0021                     ?_LCDSend:	
  1326                           ; 1 bytes @ 0x1
  1327                           
  1328  0021                     ??_iEEputc:	
  1329                           ; 1 bytes @ 0x1
  1330                           
  1331  0021                     ??_LoadConfig:	
  1332                           ; 1 bytes @ 0x1
  1333                           
  1334  0021                     ??_LoadStatus:	
  1335                           ; 1 bytes @ 0x1
  1336                           
  1337  0021                     ??_PrintDiaSem:	
  1338                           ; 1 bytes @ 0x1
  1339                           
  1340  0021                     ??_PrintMes:	
  1341                           ; 1 bytes @ 0x1
  1342                           
  1343  0021                     ??___bmul:	
  1344                           ; 1 bytes @ 0x1
  1345                           
  1346  0021                     SerReceive@msg:	
  1347                           ; 1 bytes @ 0x1
  1348                           
  1349  0021                     IOChanges@io:	
  1350                           ; 1 bytes @ 0x1
  1351                           
  1352  0021                     LCDSend@cmd:	
  1353                           ; 1 bytes @ 0x1
  1354                           
  1355                           
  1356                           ; 1 bytes @ 0x1
  1357  0021                     	ds	1
  1358  0022                     ??_LCDSend:	
  1359  0022                     iEEputc@address:	
  1360                           ; 1 bytes @ 0x2
  1361                           
  1362  0022                     PrintDiaSem@dia:	
  1363                           ; 1 bytes @ 0x2
  1364                           
  1365  0022                     PrintMes@mes:	
  1366                           ; 1 bytes @ 0x2
  1367                           
  1368  0022                     SerReceive@p:	
  1369                           ; 1 bytes @ 0x2
  1370                           
  1371  0022                     IOChanges@rc:	
  1372                           ; 1 bytes @ 0x2
  1373                           
  1374  0022                     IOResetChanges@io:	
  1375                           ; 1 bytes @ 0x2
  1376                           
  1377  0022                     ___bmul@product:	
  1378                           ; 1 bytes @ 0x2
  1379                           
  1380  0022                     _Beep$518:	
  1381                           ; 1 bytes @ 0x2
  1382                           
  1383  0022                     ___lwdiv@dividend:	
  1384                           ; 2 bytes @ 0x2
  1385                           
  1386  0022                     ___lwmod@dividend:	
  1387                           ; 2 bytes @ 0x2
  1388                           
  1389                           
  1390                           ; 2 bytes @ 0x2
  1391  0022                     	ds	1
  1392  0023                     iEEputc@INTCON_SAVE:	
  1393  0023                     SerSendQ@p:	
  1394                           ; 1 bytes @ 0x3
  1395                           
  1396  0023                     SerSendR@p:	
  1397                           ; 1 bytes @ 0x3
  1398                           
  1399  0023                     SerReceive@i:	
  1400                           ; 1 bytes @ 0x3
  1401                           
  1402  0023                     ___bmul@multiplier:	
  1403                           ; 1 bytes @ 0x3
  1404                           
  1405                           
  1406                           ; 1 bytes @ 0x3
  1407  0023                     	ds	1
  1408  0024                     ??_SaveConfig:	
  1409  0024                     ??_SaveStatus:	
  1410                           ; 1 bytes @ 0x4
  1411                           
  1412  0024                     ??___lwdiv:	
  1413                           ; 1 bytes @ 0x4
  1414                           
  1415  0024                     ??___lwmod:	
  1416                           ; 1 bytes @ 0x4
  1417                           
  1418  0024                     LCDSend@data:	
  1419                           ; 1 bytes @ 0x4
  1420                           
  1421  0024                     SerSendQ@i:	
  1422                           ; 1 bytes @ 0x4
  1423                           
  1424  0024                     SerSendR@i:	
  1425                           ; 2 bytes @ 0x4
  1426                           
  1427  0024                     _Beep$519:	
  1428                           ; 2 bytes @ 0x4
  1429                           
  1430                           
  1431                           ; 2 bytes @ 0x4
  1432  0024                     	ds	1
  1433  0025                     LCDSend@aux_byte:	
  1434  0025                     ___lwmod@counter:	
  1435                           ; 1 bytes @ 0x5
  1436                           
  1437  0025                     ___lwdiv@quotient:	
  1438                           ; 1 bytes @ 0x5
  1439                           
  1440                           
  1441                           ; 2 bytes @ 0x5
  1442  0025                     	ds	1
  1443  0026                     ??_LCDInit:	
  1444  0026                     ?_LCDGoto:	
  1445                           ; 1 bytes @ 0x6
  1446                           
  1447  0026                     SerSendQ@msg:	
  1448                           ; 1 bytes @ 0x6
  1449                           
  1450  0026                     SerSendR@msg:	
  1451                           ; 1 bytes @ 0x6
  1452                           
  1453  0026                     Beep@count:	
  1454                           ; 1 bytes @ 0x6
  1455                           
  1456  0026                     LCDGoto@col:	
  1457                           ; 1 bytes @ 0x6
  1458                           
  1459                           
  1460                           ; 1 bytes @ 0x6
  1461  0026                     	ds	1
  1462  0027                     ??_LCDGoto:	
  1463  0027                     LCDGoto@line:	
  1464                           ; 1 bytes @ 0x7
  1465                           
  1466  0027                     ___lwdiv@counter:	
  1467                           ; 1 bytes @ 0x7
  1468                           
  1469                           
  1470                           ; 1 bytes @ 0x7
  1471  0027                     	ds	1
  1472  0028                     ?_utoa:	
  1473  0028                     ?_LCDMsg:	
  1474                           ; 1 bytes @ 0x8
  1475                           
  1476  0028                     LCDMsg@columna:	
  1477                           ; 1 bytes @ 0x8
  1478                           
  1479  0028                     utoa@val:	
  1480                           ; 1 bytes @ 0x8
  1481                           
  1482                           
  1483                           ; 2 bytes @ 0x8
  1484  0028                     	ds	1
  1485  0029                     LCDMsg@msg:	
  1486                           
  1487                           ; 2 bytes @ 0x9
  1488  0029                     	ds	1
  1489  002A                     utoa@base:	
  1490                           
  1491                           ; 2 bytes @ 0xA
  1492  002A                     	ds	1
  1493  002B                     ??_LCDMsg:	
  1494                           
  1495                           ; 1 bytes @ 0xB
  1496  002B                     	ds	1
  1497  002C                     ??_utoa:	
  1498  002C                     LCDMsg@linea:	
  1499                           ; 1 bytes @ 0xC
  1500                           
  1501                           
  1502                           ; 1 bytes @ 0xC
  1503  002C                     	ds	1
  1504  002D                     utoa@v:	
  1505                           
  1506                           ; 2 bytes @ 0xD
  1507  002D                     	ds	2
  1508  002F                     utoa@c:	
  1509                           
  1510                           ; 1 bytes @ 0xF
  1511  002F                     	ds	1
  1512  0030                     utoa@buf:	
  1513                           
  1514                           ; 1 bytes @ 0x10
  1515  0030                     	ds	1
  1516  0031                     ??_PrintInfoScreen:	
  1517                           
  1518                           ; 1 bytes @ 0x11
  1519  0031                     	ds	2
  1520  0033                     PrintInfoScreen@str:	
  1521                           
  1522                           ; 19 bytes @ 0x13
  1523  0033                     	ds	19
  1524  0046                     ??_main:	
  1525                           
  1526                           ; 1 bytes @ 0x26
  1527  0046                     	ds	4
  1528  004A                     _main$354:	
  1529                           
  1530                           ; 2 bytes @ 0x2A
  1531  004A                     	ds	2
  1532  004C                     _main$355:	
  1533                           
  1534                           ; 2 bytes @ 0x2C
  1535  004C                     	ds	2
  1536  004E                     main@i:	
  1537                           
  1538                           ; 1 bytes @ 0x2E
  1539  004E                     	ds	1
  1540                           
  1541                           	psect	maintext
  1542  0035                     __pmaintext:	
  1543 ;;
  1544 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1545 ;;
  1546 ;; *************** function _main *****************
  1547 ;; Defined at:
  1548 ;;		line 645 in file "main.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  i               1   46[BANK0 ] unsigned char 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : B00/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       0       0       0       0
  1563 ;;      Locals:         0       5       0       0       0
  1564 ;;      Temps:          0       4       0       0       0
  1565 ;;      Totals:         0       9       0       0       0
  1566 ;;Total ram usage:        9 bytes
  1567 ;; Hardware stack levels required when called:    8
  1568 ;; This function calls:
  1569 ;;		_Beep
  1570 ;;		_IOChanges
  1571 ;;		_IOInit
  1572 ;;		_IOResetChanges
  1573 ;;		_IOTask
  1574 ;;		_IOTimer
  1575 ;;		_LCDInit
  1576 ;;		_LCDMsg
  1577 ;;		_LoadConfig
  1578 ;;		_LoadStatus
  1579 ;;		_PerifInit
  1580 ;;		_PerifTask
  1581 ;;		_PerifTimer10ms
  1582 ;;		_PerifTimer1s
  1583 ;;		_PrintInfoScreen
  1584 ;;		_SaveConfig
  1585 ;;		_SaveStatus
  1586 ;;		_SerAck
  1587 ;;		_SerInit
  1588 ;;		_SerReceive
  1589 ;;		_SerSendQ
  1590 ;;		_SerSendR
  1591 ;;		_SerTask
  1592 ;;		_SerTimeOut
  1593 ;;		_SerTimer
  1594 ;;		___bmul
  1595 ;;		_minipow2
  1596 ;; This function is called by:
  1597 ;;		Startup code after reset
  1598 ;; This function uses a non-reentrant model
  1599 ;;
  1600                           
  1601                           
  1602                           ;psect for function _main
  1603  0035                     _main:	
  1604                           
  1605                           ;main.c: 647: unsigned char i;
  1606                           ;main.c: 667: OPTION_REG = 0b10001111;
  1607                           
  1608                           ;incstack = 0
  1609                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1610  0035  308F               	movlw	143
  1611  0036  1683               	bsf	3,5	;RP0=1, select bank1
  1612  0037  1303               	bcf	3,6	;RP1=0, select bank1
  1613  0038  0081               	movwf	1	;volatile
  1614                           
  1615                           ;main.c: 669: PORTA = 0x00;
  1616  0039  1283               	bcf	3,5	;RP0=0, select bank0
  1617  003A  1303               	bcf	3,6	;RP1=0, select bank0
  1618  003B  0185               	clrf	5	;volatile
  1619                           
  1620                           ;main.c: 670: PORTB = 0x00;
  1621  003C  0186               	clrf	6	;volatile
  1622                           
  1623                           ;main.c: 671: PORTC = 0x00;
  1624  003D  0187               	clrf	7	;volatile
  1625                           
  1626                           ;main.c: 672: PORTD = 0x00;
  1627  003E  0188               	clrf	8	;volatile
  1628                           
  1629                           ;main.c: 673: PORTE = 0x00;
  1630  003F  0189               	clrf	9	;volatile
  1631                           
  1632                           ;main.c: 674: TRISA = 0b11101111;
  1633  0040  30EF               	movlw	239
  1634  0041  1683               	bsf	3,5	;RP0=1, select bank1
  1635  0042  1303               	bcf	3,6	;RP1=0, select bank1
  1636  0043  0085               	movwf	5	;volatile
  1637                           
  1638                           ;main.c: 675: TRISB = 0b00000001;
  1639  0044  3001               	movlw	1
  1640  0045  0086               	movwf	6	;volatile
  1641                           
  1642                           ;main.c: 676: TRISC = 0b10000000;
  1643  0046  3080               	movlw	128
  1644  0047  0087               	movwf	7	;volatile
  1645                           
  1646                           ;main.c: 677: TRISD = 0b11111111;
  1647  0048  30FF               	movlw	255
  1648  0049  0088               	movwf	8	;volatile
  1649                           
  1650                           ;main.c: 678: TRISE = 0b00000000;
  1651  004A  0189               	clrf	9	;volatile
  1652                           
  1653                           ;main.c: 680: INTCON = 0x00;
  1654  004B  018B               	clrf	11	;volatile
  1655                           
  1656                           ;main.c: 681: T0IE = 1;
  1657  004C  168B               	bsf	11,5	;volatile
  1658                           
  1659                           ;main.c: 682: INTE = 1;
  1660  004D  160B               	bsf	11,4	;volatile
  1661                           
  1662                           ;main.c: 683: PEIE = 1;
  1663  004E  170B               	bsf	11,6	;volatile
  1664                           
  1665                           ;main.c: 686: ANSEL = 0b00000000;
  1666  004F  1683               	bsf	3,5	;RP0=1, select bank3
  1667  0050  1703               	bsf	3,6	;RP1=1, select bank3
  1668  0051  0188               	clrf	8	;volatile
  1669                           
  1670                           ;main.c: 687: ANSELH = 0b00000000;
  1671  0052  0189               	clrf	9	;volatile
  1672                           
  1673                           ;main.c: 719: ADCON0 = 0b00000000;
  1674  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1675  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1676  0055  019F               	clrf	31	;volatile
  1677                           
  1678                           ;main.c: 733: ADCON1 = 0b00000000;
  1679  0056  1683               	bsf	3,5	;RP0=1, select bank1
  1680  0057  1303               	bcf	3,6	;RP1=0, select bank1
  1681  0058  019F               	clrf	31	;volatile
  1682                           
  1683                           ;main.c: 735: CCP1CON = 0b00000000;
  1684  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1685  005A  1303               	bcf	3,6	;RP1=0, select bank0
  1686  005B  0197               	clrf	23	;volatile
  1687                           
  1688                           ;main.c: 736: CCP2CON = 0b00000000;
  1689  005C  019D               	clrf	29	;volatile
  1690                           
  1691                           ;main.c: 737: WPUB = 0b00000000;
  1692  005D  1683               	bsf	3,5	;RP0=1, select bank1
  1693  005E  1303               	bcf	3,6	;RP1=0, select bank1
  1694  005F  0195               	clrf	21	;volatile
  1695                           
  1696                           ;main.c: 738: IOCB = 0b00000000;
  1697  0060  0196               	clrf	22	;volatile
  1698                           
  1699                           ;main.c: 739: CM1CON0 = 0b00000000;
  1700  0061  1283               	bcf	3,5	;RP0=0, select bank2
  1701  0062  1703               	bsf	3,6	;RP1=1, select bank2
  1702  0063  0187               	clrf	7	;volatile
  1703                           
  1704                           ;main.c: 740: CM2CON0 = 0b00000000;
  1705  0064  0188               	clrf	8	;volatile
  1706                           
  1707                           ;main.c: 741: CM2CON1 = 0b00000000;
  1708  0065  0189               	clrf	9	;volatile
  1709                           
  1710                           ;main.c: 743: TimerDiv1 = 0;
  1711  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0068  01DB               	clrf	_TimerDiv1
  1714                           
  1715                           ;main.c: 744: TimerDiv2 = 0;
  1716  0069  01DA               	clrf	_TimerDiv2
  1717                           
  1718                           ;main.c: 745: TimerFlag1 = 0;
  1719  006A  11FA               	bcf	_TimerFlag1/(0+8),_TimerFlag1& (0+7)
  1720                           
  1721                           ;main.c: 746: TimerFlag2 = 0;
  1722  006B  117A               	bcf	_TimerFlag2/(0+8),_TimerFlag2& (0+7)
  1723                           
  1724                           ;main.c: 747: InitTimer = 5;
  1725  006C  3005               	movlw	5
  1726  006D  00C6               	movwf	??_main
  1727  006E  0846               	movf	??_main,w
  1728  006F  1683               	bsf	3,5	;RP0=1, select bank1
  1729  0070  1303               	bcf	3,6	;RP1=0, select bank1
  1730  0071  00E7               	movwf	_InitTimer^(0+128)
  1731                           
  1732                           ;main.c: 748: SaveConfigTimer = 0;
  1733  0072  1283               	bcf	3,5	;RP0=0, select bank0
  1734  0073  1303               	bcf	3,6	;RP1=0, select bank0
  1735  0074  01D8               	clrf	_SaveConfigTimer
  1736                           
  1737                           ;main.c: 749: SaveStatusTimer = 0;
  1738  0075  01D7               	clrf	_SaveStatusTimer
  1739                           
  1740                           ;main.c: 750: RetryMsg = 0;
  1741  0076  01D9               	clrf	_RetryMsg
  1742                           
  1743                           ;main.c: 751: PauseMsg = 30;
  1744  0077  301E               	movlw	30
  1745  0078  00C6               	movwf	??_main
  1746  0079  0846               	movf	??_main,w
  1747  007A  1683               	bsf	3,5	;RP0=1, select bank1
  1748  007B  1303               	bcf	3,6	;RP1=0, select bank1
  1749  007C  00E9               	movwf	_PauseMsg^(0+128)
  1750                           
  1751                           ;main.c: 752: LastCntRcv = 0xFF;
  1752  007D  30FF               	movlw	255
  1753  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1754  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1755  0080  00C6               	movwf	??_main
  1756  0081  0846               	movf	??_main,w
  1757  0082  1683               	bsf	3,5	;RP0=1, select bank1
  1758  0083  1303               	bcf	3,6	;RP1=0, select bank1
  1759  0084  00E8               	movwf	_LastCntRcv^(0+128)
  1760                           
  1761                           ;main.c: 753: OnLineFlag = 0;
  1762  0085  10FA               	bcf	_OnLineFlag/(0+8),_OnLineFlag& (0+7)
  1763                           
  1764                           ;main.c: 754: Blink = 0;
  1765  0086  01FD               	clrf	_Blink
  1766                           
  1767                           ;main.c: 755: RebootTimer = 0;
  1768  0087  01FC               	clrf	_RebootTimer
  1769                           
  1770                           ;main.c: 757: gFechaHora.fecha.anio = 0;
  1771  0088  1283               	bcf	3,5	;RP0=0, select bank0
  1772  0089  1303               	bcf	3,6	;RP1=0, select bank0
  1773  008A  01CF               	clrf	_gFechaHora
  1774                           
  1775                           ;main.c: 758: gFechaHora.fecha.mes = 0;
  1776  008B  01D0               	clrf	_gFechaHora+1
  1777                           
  1778                           ;main.c: 759: gFechaHora.fecha.dia = 0;
  1779  008C  01D1               	clrf	_gFechaHora+2
  1780                           
  1781                           ;main.c: 760: gFechaHora.fecha.fecha = 1;
  1782  008D  01D2               	clrf	_gFechaHora+3
  1783  008E  0AD2               	incf	_gFechaHora+3,f
  1784                           
  1785                           ;main.c: 761: gFechaHora.hora.horas = 0;
  1786  008F  01D3               	clrf	_gFechaHora+4
  1787                           
  1788                           ;main.c: 762: gFechaHora.hora.minutos = 0;
  1789  0090  01D4               	clrf	_gFechaHora+5
  1790                           
  1791                           ;main.c: 763: gFechaHora.hora.segundos = 0;
  1792  0091  01D5               	clrf	_gFechaHora+6
  1793                           
  1794                           ;main.c: 766: LoadConfig();
  1795  0092  120A  158A  238E  120A  118A  	fcall	_LoadConfig
  1796                           
  1797                           ;main.c: 768: IOInit();
  1798  0097  160A  118A  2311  120A  118A  	fcall	_IOInit
  1799                           
  1800                           ;main.c: 769: PerifInit();
  1801  009C  160A  158A  248C  120A  118A  	fcall	_PerifInit
  1802                           
  1803                           ;main.c: 770: SerInit();
  1804  00A1  160A  158A  24FA  120A  118A  	fcall	_SerInit
  1805                           
  1806                           ;main.c: 772: LCDInit();
  1807  00A6  160A  118A  248B  120A  118A  	fcall	_LCDInit
  1808                           
  1809                           ;main.c: 781: Beep(1);
  1810  00AB  3001               	movlw	1
  1811  00AC  160A  158A  251B  120A  118A  	fcall	_Beep
  1812                           
  1813                           ;main.c: 782: PORTE |= 0b00000001;
  1814  00B1  1283               	bcf	3,5	;RP0=0, select bank0
  1815  00B2  1303               	bcf	3,6	;RP1=0, select bank0
  1816  00B3  1409               	bsf	9,0	;volatile
  1817                           
  1818                           ;main.c: 784: GIE = 1;
  1819  00B4  178B               	bsf	11,7	;volatile
  1820  00B5                     l272:	
  1821                           ;main.c: 787: while(1)
  1822                           
  1823  00B5  0064               	clrwdt	;# 
  1824                           
  1825                           ;main.c: 791: IOTask();
  1826  00B6  160A  158A  2471  120A  118A  	fcall	_IOTask
  1827                           
  1828                           ;main.c: 792: PerifTask();
  1829  00BB  120A  118A  27FF  120A  118A  	fcall	_PerifTask
  1830                           
  1831                           ;main.c: 793: SerTask();
  1832  00C0  160A  158A  2462  120A  118A  	fcall	_SerTask
  1833                           
  1834                           ;main.c: 803: if(TimerFlag1)
  1835  00C5  1DFA               	btfss	_TimerFlag1/(0+8),_TimerFlag1& (0+7)
  1836  00C6  28D8               	goto	l4959
  1837                           
  1838                           ;main.c: 804: {
  1839                           ;main.c: 805: TimerFlag1 = 0;
  1840  00C7  11FA               	bcf	_TimerFlag1/(0+8),_TimerFlag1& (0+7)
  1841                           
  1842                           ;main.c: 807: Blink++;
  1843  00C8  3001               	movlw	1
  1844  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  1845  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  1846  00CB  00C6               	movwf	??_main
  1847  00CC  0846               	movf	??_main,w
  1848  00CD  07FD               	addwf	_Blink,f
  1849                           
  1850                           ;main.c: 808: SerTimer();
  1851  00CE  160A  158A  24B3  120A  118A  	fcall	_SerTimer
  1852                           
  1853                           ;main.c: 809: PerifTimer10ms();
  1854  00D3  160A  158A  2572  120A  118A  	fcall	_PerifTimer10ms
  1855  00D8                     l4959:	
  1856                           
  1857                           ;main.c: 813: }
  1858                           ;main.c: 818: if(TimerFlag2)
  1859  00D8  1D7A               	btfss	_TimerFlag2/(0+8),_TimerFlag2& (0+7)
  1860  00D9  2937               	goto	l4999
  1861                           
  1862                           ;main.c: 819: {
  1863                           ;main.c: 820: TimerFlag2 = 0;
  1864  00DA  117A               	bcf	_TimerFlag2/(0+8),_TimerFlag2& (0+7)
  1865                           
  1866                           ;main.c: 822: if(InitTimer)
  1867  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  1868  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  1869  00DD  0867               	movf	_InitTimer^(0+128),w
  1870  00DE  1903               	btfsc	3,2
  1871  00DF  28F1               	goto	l4969
  1872                           
  1873                           ;main.c: 823: {
  1874                           ;main.c: 824: InitTimer--;
  1875  00E0  3001               	movlw	1
  1876  00E1  02E7               	subwf	_InitTimer^(0+128),f
  1877                           
  1878                           ;main.c: 825: if(InitTimer == 2)
  1879  00E2  3002               	movlw	2
  1880  00E3  0667               	xorwf	_InitTimer^(0+128),w
  1881  00E4  1D03               	btfss	3,2
  1882  00E5  28F1               	goto	l4969
  1883                           
  1884                           ;main.c: 826: {
  1885                           ;main.c: 827: Beep(2);
  1886  00E6  3002               	movlw	2
  1887  00E7  160A  158A  251B  120A  118A  	fcall	_Beep
  1888                           
  1889                           ;main.c: 828: LoadStatus();
  1890  00EC  120A  158A  21F1  120A  118A  	fcall	_LoadStatus
  1891  00F1                     l4969:	
  1892                           
  1893                           ;main.c: 829: }
  1894                           ;main.c: 830: }
  1895                           ;main.c: 832: if(SaveConfigTimer)
  1896  00F1  1283               	bcf	3,5	;RP0=0, select bank0
  1897  00F2  1303               	bcf	3,6	;RP1=0, select bank0
  1898  00F3  0858               	movf	_SaveConfigTimer,w
  1899  00F4  1903               	btfsc	3,2
  1900  00F5  2900               	goto	l4975
  1901                           
  1902                           ;main.c: 833: {
  1903                           ;main.c: 834: SaveConfigTimer--;
  1904  00F6  3001               	movlw	1
  1905  00F7  02D8               	subwf	_SaveConfigTimer,f
  1906                           
  1907                           ;main.c: 835: if( !SaveConfigTimer)
  1908  00F8  0858               	movf	_SaveConfigTimer,w
  1909  00F9  1D03               	btfss	3,2
  1910  00FA  2900               	goto	l4975
  1911                           
  1912                           ;main.c: 836: {
  1913                           ;main.c: 837: SaveConfig();
  1914  00FB  120A  158A  207A  120A  118A  	fcall	_SaveConfig
  1915  0100                     l4975:	
  1916                           
  1917                           ;main.c: 838: }
  1918                           ;main.c: 839: }
  1919                           ;main.c: 841: if(SaveStatusTimer)
  1920  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1921  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1922  0102  0857               	movf	_SaveStatusTimer,w
  1923  0103  1903               	btfsc	3,2
  1924  0104  290F               	goto	l4981
  1925                           
  1926                           ;main.c: 842: {
  1927                           ;main.c: 843: SaveStatusTimer--;
  1928  0105  3001               	movlw	1
  1929  0106  02D7               	subwf	_SaveStatusTimer,f
  1930                           
  1931                           ;main.c: 844: if( !SaveStatusTimer)
  1932  0107  0857               	movf	_SaveStatusTimer,w
  1933  0108  1D03               	btfss	3,2
  1934  0109  290F               	goto	l4981
  1935                           
  1936                           ;main.c: 845: {
  1937                           ;main.c: 846: SaveStatus();
  1938  010A  160A  118A  26A5  120A  118A  	fcall	_SaveStatus
  1939  010F                     l4981:	
  1940                           
  1941                           ;main.c: 847: }
  1942                           ;main.c: 848: }
  1943                           ;main.c: 850: if(RebootTimer)
  1944  010F  087C               	movf	_RebootTimer,w
  1945  0110  1903               	btfsc	3,2
  1946  0111  2921               	goto	l4989
  1947                           
  1948                           ;main.c: 851: {
  1949                           ;main.c: 855: if( !SaveConfigTimer && !SaveStatusTimer)
  1950  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1951  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1952  0114  0858               	movf	_SaveConfigTimer,w
  1953  0115  1D03               	btfss	3,2
  1954  0116  2921               	goto	l4989
  1955  0117  0857               	movf	_SaveStatusTimer,w
  1956  0118  1D03               	btfss	3,2
  1957  0119  2921               	goto	l4989
  1958                           
  1959                           ;main.c: 856: {
  1960                           ;main.c: 857: RebootTimer--;
  1961  011A  3001               	movlw	1
  1962  011B  02FC               	subwf	_RebootTimer,f
  1963                           
  1964                           ;main.c: 858: if( !RebootTimer) while(1) { __nop(); }
  1965  011C  087C               	movf	_RebootTimer,w
  1966  011D  1D03               	btfss	3,2
  1967  011E  2921               	goto	l4989
  1968  011F                     l284:	
  1969  011F  0000               	nop
  1970  0120  291F               	goto	l284
  1971  0121                     l4989:	
  1972                           
  1973                           ;main.c: 859: }
  1974                           ;main.c: 860: }
  1975                           ;main.c: 862: if(PauseMsg) PauseMsg--;
  1976  0121  1683               	bsf	3,5	;RP0=1, select bank1
  1977  0122  1303               	bcf	3,6	;RP1=0, select bank1
  1978  0123  0869               	movf	_PauseMsg^(0+128),w
  1979  0124  1903               	btfsc	3,2
  1980  0125  2928               	goto	l4993
  1981  0126  3001               	movlw	1
  1982  0127  02E9               	subwf	_PauseMsg^(0+128),f
  1983  0128                     l4993:	
  1984                           
  1985                           ;main.c: 864: IOTimer();
  1986  0128  120A  118A  27FA  120A  118A  	fcall	_IOTimer
  1987                           
  1988                           ;main.c: 865: PerifTimer1s();
  1989  012D  120A  118A  27FE  120A  118A  	fcall	_PerifTimer1s
  1990                           
  1991                           ;main.c: 878: PrintInfoScreen();
  1992  0132  160A  118A  23CB  120A  118A  	fcall	_PrintInfoScreen
  1993  0137                     l4999:	
  1994                           
  1995                           ;main.c: 882: }
  1996                           ;main.c: 885: if(InitTimer) continue;
  1997  0137  1683               	bsf	3,5	;RP0=1, select bank1
  1998  0138  1303               	bcf	3,6	;RP1=0, select bank1
  1999  0139  0867               	movf	_InitTimer^(0+128),w
  2000  013A  1D03               	btfss	3,2
  2001  013B  28B5               	goto	l272
  2002                           
  2003                           ;main.c: 888: if(OnLineFlag)
  2004  013C  1CFA               	btfss	_OnLineFlag/(0+8),_OnLineFlag& (0+7)
  2005  013D  2941               	goto	l290
  2006                           
  2007                           ;main.c: 889: {
  2008                           ;main.c: 890: if((Blink & 0b00001000))
  2009  013E  1DFD               	btfss	_Blink,3
  2010  013F  2947               	goto	l5011
  2011  0140  2943               	goto	l5009
  2012  0141                     l290:	
  2013                           ;main.c: 894: }
  2014                           
  2015                           ;main.c: 892: else
  2016                           ;main.c: 893: PORTE &= 0b11111110;
  2017                           
  2018                           ;main.c: 891: PORTE |= 0b00000001;
  2019                           
  2020                           
  2021                           ;main.c: 895: else
  2022                           ;main.c: 896: {
  2023                           ;main.c: 897: if((Blink & 0b00100000))
  2024  0141  1EFD               	btfss	_Blink,5
  2025  0142  2947               	goto	l5011
  2026  0143                     l5009:	
  2027                           
  2028                           ;main.c: 898: PORTE |= 0b00000001;
  2029  0143  1283               	bcf	3,5	;RP0=0, select bank0
  2030  0144  1303               	bcf	3,6	;RP1=0, select bank0
  2031  0145  1409               	bsf	9,0	;volatile
  2032  0146  294C               	goto	l5013
  2033  0147                     l5011:	
  2034                           
  2035                           ;main.c: 899: else
  2036                           ;main.c: 900: PORTE &= 0b11111110;
  2037  0147  30FE               	movlw	254
  2038  0148  1283               	bcf	3,5	;RP0=0, select bank0
  2039  0149  00C6               	movwf	??_main
  2040  014A  0846               	movf	??_main,w
  2041  014B  0589               	andwf	9,f	;volatile
  2042  014C                     l5013:	
  2043                           
  2044                           ;main.c: 901: }
  2045                           ;main.c: 906: if(SerReceive(&SerialMsg))
  2046  014C  305C               	movlw	(low (_SerialMsg| 0))& (0+255)
  2047  014D  160A  158A  2546  120A  118A  	fcall	_SerReceive
  2048  0152  3A00               	xorlw	0
  2049  0153  1903               	skipnz
  2050  0154  2DBD               	goto	l5219
  2051                           
  2052                           ;main.c: 907: {
  2053                           ;main.c: 908: if(SerialMsg.xTyp == 'Q')
  2054  0155  3051               	movlw	81
  2055  0156  1283               	bcf	3,5	;RP0=0, select bank0
  2056  0157  1303               	bcf	3,6	;RP1=0, select bank0
  2057  0158  065C               	xorwf	_SerialMsg,w
  2058  0159  1903               	btfsc	3,2
  2059  015A  2D00               	goto	l5189
  2060  015B  2D5C               	goto	l5195
  2061  015C                     l5019:	
  2062                           ;main.c: 916: case '3':
  2063                           
  2064                           ;main.c: 915: break;
  2065                           
  2066                           ;main.c: 912: {
  2067                           ;main.c: 913: case 'P':
  2068                           
  2069                           ;main.c: 909: {
  2070                           ;main.c: 911: switch(SerialMsg.xFcn)
  2071                           
  2072                           
  2073                           ;main.c: 917: if(LastCntRcv != SerialMsg.xCnt)
  2074  015C  085F               	movf	_SerialMsg+3,w
  2075  015D  1683               	bsf	3,5	;RP0=1, select bank1
  2076  015E  1303               	bcf	3,6	;RP1=0, select bank1
  2077  015F  0668               	xorwf	_LastCntRcv^(0+128),w
  2078  0160  1903               	skipnz
  2079  0161  2D4D               	goto	l5191
  2080                           
  2081                           ;main.c: 918: {
  2082                           ;main.c: 919: if(SerialMsg.xData[2] == '1')
  2083  0162  3031               	movlw	49
  2084  0163  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0164  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0165  0663               	xorwf	_SerialMsg+7,w
  2087  0166  1D03               	btfss	3,2
  2088  0167  2985               	goto	l5025
  2089                           
  2090                           ;main.c: 920: IOPORT.io[SerialMsg.xData[0]-'1'+2].status |= minipow2(SerialMsg.xData[1]-
      +                          '0');
  2091  0168  0862               	movf	_SerialMsg+6,w
  2092  0169  3ED0               	addlw	208
  2093  016A  160A  158A  25A0  120A  118A  	fcall	_minipow2
  2094  016F  1283               	bcf	3,5	;RP0=0, select bank0
  2095  0170  1303               	bcf	3,6	;RP1=0, select bank0
  2096  0171  00C6               	movwf	??_main
  2097  0172  3003               	movlw	3
  2098  0173  00C7               	movwf	??_main+1
  2099  0174  0847               	movf	??_main+1,w
  2100  0175  00A0               	movwf	___bmul@multiplicand
  2101  0176  0861               	movf	_SerialMsg+5,w
  2102  0177  3ED1               	addlw	209
  2103  0178  120A  118A  27E7  120A  118A  	fcall	___bmul
  2104  017D  3EA0               	addlw	(low (_IOPORT| 0))& (0+255)
  2105  017E  0084               	movwf	4
  2106  017F  1283               	bcf	3,5	;RP0=0, select bank0
  2107  0180  1303               	bcf	3,6	;RP1=0, select bank0
  2108  0181  0846               	movf	??_main,w
  2109  0182  1383               	bcf	3,7	;select IRP bank1
  2110  0183  0480               	iorwf	0,f
  2111  0184  2B16               	goto	l5069
  2112  0185                     l5025:	
  2113                           
  2114                           ;main.c: 921: else
  2115                           ;main.c: 922: IOPORT.io[SerialMsg.xData[0]-'1'+2].status &= (minipow2(SerialMsg.xData[1]
      +                          -'0') ^ 0xFF);
  2116  0185  0862               	movf	_SerialMsg+6,w
  2117  0186  3ED0               	addlw	208
  2118  0187  160A  158A  25A0  120A  118A  	fcall	_minipow2
  2119  018C  3AFF               	xorlw	255
  2120  018D  1283               	bcf	3,5	;RP0=0, select bank0
  2121  018E  1303               	bcf	3,6	;RP1=0, select bank0
  2122  018F  00C6               	movwf	??_main
  2123  0190  3003               	movlw	3
  2124  0191  00C7               	movwf	??_main+1
  2125  0192  0847               	movf	??_main+1,w
  2126  0193  00A0               	movwf	___bmul@multiplicand
  2127  0194  0861               	movf	_SerialMsg+5,w
  2128  0195  3ED1               	addlw	209
  2129  0196  120A  118A  27E7  120A  118A  	fcall	___bmul
  2130  019B  3EA0               	addlw	(low (_IOPORT| 0))& (0+255)
  2131  019C  0084               	movwf	4
  2132  019D  1283               	bcf	3,5	;RP0=0, select bank0
  2133  019E  1303               	bcf	3,6	;RP1=0, select bank0
  2134  019F  0846               	movf	??_main,w
  2135  01A0  1383               	bcf	3,7	;select IRP bank1
  2136  01A1  0580               	andwf	0,f
  2137  01A2  2B16               	goto	l5069
  2138  01A3                     l5029:	
  2139                           ;main.c: 930: case '5':
  2140                           
  2141                           ;main.c: 929: break;
  2142                           
  2143                           ;main.c: 927: case '4':
  2144                           
  2145                           ;main.c: 925: }
  2146                           ;main.c: 926: break;
  2147                           
  2148                           ;main.c: 924: SaveStatusTimer = 60;
  2149                           
  2150                           
  2151                           ;main.c: 931: if(LastCntRcv != SerialMsg.xCnt)
  2152  01A3  085F               	movf	_SerialMsg+3,w
  2153  01A4  1683               	bsf	3,5	;RP0=1, select bank1
  2154  01A5  1303               	bcf	3,6	;RP1=0, select bank1
  2155  01A6  0668               	xorwf	_LastCntRcv^(0+128),w
  2156  01A7  1D03               	btfss	3,2
  2157  01A8  29DA               	goto	l5043
  2158  01A9  2D4D               	goto	l5191
  2159  01AA                     l5033:	
  2160                           ;main.c: 935: {
  2161                           ;main.c: 936: case '1':
  2162                           
  2163                           ;main.c: 932: {
  2164                           ;main.c: 934: switch(SerialMsg.xData[0])
  2165                           
  2166                           
  2167                           ;main.c: 937: IOPORT.io[2].status |= minipow2(SerialMsg.xData[1]-'0');
  2168  01AA  1283               	bcf	3,5	;RP0=0, select bank0
  2169  01AB  0862               	movf	_SerialMsg+6,w
  2170  01AC  3ED0               	addlw	208
  2171  01AD  160A  158A  25A0  120A  118A  	fcall	_minipow2
  2172  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  2173  01B3  1303               	bcf	3,6	;RP1=0, select bank0
  2174  01B4  00C6               	movwf	??_main
  2175  01B5  0846               	movf	??_main,w
  2176  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  2177  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  2178  01B8  04A6               	iorwf	(_IOPORT^(0+128)+6),f
  2179                           
  2180                           ;main.c: 938: IOPORT.pulse[SerialMsg.xData[1]-'0'] = SerialMsg.xData[2];
  2181  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  2182  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  2183  01BB  0863               	movf	_SerialMsg+7,w
  2184  01BC  00C6               	movwf	??_main
  2185  01BD  0862               	movf	_SerialMsg+6,w
  2186  01BE  3ED0               	addlw	208
  2187  01BF  29D4               	goto	L1
  2188  01C0                     l5037:	
  2189                           ;main.c: 940: case '2':
  2190                           
  2191                           ;main.c: 939: break;
  2192                           
  2193                           
  2194                           ;main.c: 941: IOPORT.io[3].status |= minipow2(SerialMsg.xData[1]-'0');
  2195  01C0  0862               	movf	_SerialMsg+6,w
  2196  01C1  3ED0               	addlw	208
  2197  01C2  160A  158A  25A0  120A  118A  	fcall	_minipow2
  2198  01C7  1283               	bcf	3,5	;RP0=0, select bank0
  2199  01C8  1303               	bcf	3,6	;RP1=0, select bank0
  2200  01C9  00C6               	movwf	??_main
  2201  01CA  0846               	movf	??_main,w
  2202  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  2203  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  2204  01CD  04A9               	iorwf	(_IOPORT^(0+128)+9),f
  2205                           
  2206                           ;main.c: 942: IOPORT.pulse[SerialMsg.xData[1]-'0'+8] = SerialMsg.xData[2];
  2207  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  2208  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  2209  01D0  0863               	movf	_SerialMsg+7,w
  2210  01D1  00C6               	movwf	??_main
  2211  01D2  0862               	movf	_SerialMsg+6,w
  2212  01D3  3ED8               	addlw	216
  2213  01D4                     L1:	
  2214  01D4  3EBC               	addlw	(low ((_IOPORT| 0+28)))& (0+255)
  2215  01D5  0084               	movwf	4
  2216  01D6  0846               	movf	??_main,w
  2217  01D7  1383               	bcf	3,7	;select IRP bank1
  2218  01D8  0080               	movwf	0
  2219                           
  2220                           ;main.c: 944: }
  2221                           
  2222                           ;main.c: 943: break;
  2223  01D9  2D4D               	goto	l5191
  2224  01DA                     l5043:	
  2225  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  2226  01DB  0861               	movf	_SerialMsg+5,w
  2227                           
  2228                           ; Switch size 1, requested type "space"
  2229                           ; Number of cases is 2, Range of values is 49 to 50
  2230                           ; switch strategies available:
  2231                           ; Name         Instructions Cycles
  2232                           ; simple_byte            7     4 (average)
  2233                           ; direct_byte           17    11 (fixed)
  2234                           ; jumptable            263     9 (fixed)
  2235                           ;	Chosen strategy is simple_byte
  2236  01DC  3A31               	xorlw	49	; case 49
  2237  01DD  1903               	skipnz
  2238  01DE  29AA               	goto	l5033
  2239  01DF  3A03               	xorlw	3	; case 50
  2240  01E0  1903               	skipnz
  2241  01E1  29C0               	goto	l5037
  2242  01E2  2D4D               	goto	l5191
  2243                           
  2244                           ;main.c: 945: }
  2245                           ;main.c: 946: break;
  2246  01E3  2D4D               	goto	l5191
  2247  01E4                     l5045:	
  2248                           ;main.c: 947: case '6':
  2249                           
  2250                           
  2251                           ;main.c: 948: SerialMsg.xData[1] = IOPORT.io[SerialMsg.xData[0]-'1'].status;
  2252  01E4  3003               	movlw	3
  2253  01E5  00C6               	movwf	??_main
  2254  01E6  0846               	movf	??_main,w
  2255  01E7  00A0               	movwf	___bmul@multiplicand
  2256  01E8  0861               	movf	_SerialMsg+5,w
  2257  01E9  3ECF               	addlw	207
  2258  01EA  120A  118A  27E7  120A  118A  	fcall	___bmul
  2259  01EF  3EA0               	addlw	(low (_IOPORT| 0))& (0+255)
  2260  01F0  0084               	movwf	4
  2261  01F1  1383               	bcf	3,7	;select IRP bank1
  2262  01F2  0800               	movf	0,w
  2263  01F3  1283               	bcf	3,5	;RP0=0, select bank0
  2264  01F4  1303               	bcf	3,6	;RP1=0, select bank0
  2265  01F5  00C7               	movwf	??_main+1
  2266  01F6  0847               	movf	??_main+1,w
  2267  01F7  00E2               	movwf	_SerialMsg+6
  2268                           
  2269                           ;main.c: 949: SerialMsg.xData[2] = IOPORTCONF.io[SerialMsg.xData[0]-'1'].mascara_notif;
  2270  01F8  0861               	movf	_SerialMsg+5,w
  2271  01F9  00C6               	movwf	??_main
  2272  01FA  3001               	movlw	1
  2273  01FB                     u5215:	
  2274  01FB  1003               	clrc
  2275  01FC  0DC6               	rlf	??_main,f
  2276  01FD  3EFF               	addlw	-1
  2277  01FE  1D03               	skipz
  2278  01FF  29FB               	goto	u5215
  2279  0200  309E               	movlw	158
  2280  0201  0746               	addwf	??_main,w
  2281  0202  00C7               	movwf	??_main+1
  2282  0203  3091               	movlw	(low ((_IOPORTCONF| (0+256)+1)))& (0+255)
  2283  0204  0747               	addwf	??_main+1,w
  2284  0205  00C8               	movwf	??_main+2
  2285  0206  0A48               	incf	??_main+2,w
  2286  0207  0084               	movwf	4
  2287  0208  1783               	bsf	3,7	;select IRP bank3
  2288  0209  0800               	movf	0,w
  2289  020A  00C9               	movwf	??_main+3
  2290  020B  0849               	movf	??_main+3,w
  2291  020C  00E3               	movwf	_SerialMsg+7
  2292                           
  2293                           ;main.c: 950: SerialMsg.xData[3] = IOPORTCONF.io[SerialMsg.xData[0]-'1'].mascara_seguido
      +                          r;
  2294  020D  0861               	movf	_SerialMsg+5,w
  2295  020E  00C6               	movwf	??_main
  2296  020F  0746               	addwf	??_main,w
  2297  0210  3E9E               	addlw	158
  2298  0211  3E91               	addlw	(low ((_IOPORTCONF| (0+256)+1)))& (0+255)
  2299  0212  0084               	movwf	4
  2300  0213  0800               	movf	0,w
  2301  0214  00C7               	movwf	??_main+1
  2302  0215  0847               	movf	??_main+1,w
  2303  0216  00E4               	movwf	_SerialMsg+8
  2304                           
  2305                           ;main.c: 951: break;
  2306  0217  2D4D               	goto	l5191
  2307  0218                     l5051:	
  2308                           ;main.c: 952: case '7':
  2309                           
  2310                           
  2311                           ;main.c: 953: SerialMsg.xData[1] = IOPORT.io[SerialMsg.xData[0]-'1'+2].status;
  2312  0218  3003               	movlw	3
  2313  0219  00C6               	movwf	??_main
  2314  021A  0846               	movf	??_main,w
  2315  021B  00A0               	movwf	___bmul@multiplicand
  2316  021C  0861               	movf	_SerialMsg+5,w
  2317  021D  3ED1               	addlw	209
  2318  021E  120A  118A  27E7  120A  118A  	fcall	___bmul
  2319  0223  3EA0               	addlw	(low (_IOPORT| 0))& (0+255)
  2320  0224  0084               	movwf	4
  2321  0225  1383               	bcf	3,7	;select IRP bank1
  2322  0226  0800               	movf	0,w
  2323  0227  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0228  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0229  00C7               	movwf	??_main+1
  2326  022A  0847               	movf	??_main+1,w
  2327  022B  00E2               	movwf	_SerialMsg+6
  2328                           
  2329                           ;main.c: 954: SerialMsg.xData[2] = IOPORTCONF.io[SerialMsg.xData[0]-'1'+2].mascara_notif
      +                          ;
  2330  022C  0861               	movf	_SerialMsg+5,w
  2331  022D  00C6               	movwf	??_main
  2332  022E  3001               	movlw	1
  2333  022F                     u5225:	
  2334  022F  1003               	clrc
  2335  0230  0DC6               	rlf	??_main,f
  2336  0231  3EFF               	addlw	-1
  2337  0232  1D03               	skipz
  2338  0233  2A2F               	goto	u5225
  2339  0234  30A2               	movlw	162
  2340  0235  0746               	addwf	??_main,w
  2341  0236  00C7               	movwf	??_main+1
  2342  0237  3091               	movlw	(low ((_IOPORTCONF| (0+256)+1)))& (0+255)
  2343  0238  0747               	addwf	??_main+1,w
  2344  0239  00C8               	movwf	??_main+2
  2345  023A  0A48               	incf	??_main+2,w
  2346  023B  0084               	movwf	4
  2347  023C  1783               	bsf	3,7	;select IRP bank3
  2348  023D  0800               	movf	0,w
  2349  023E  00C9               	movwf	??_main+3
  2350  023F  0849               	movf	??_main+3,w
  2351  0240  00E3               	movwf	_SerialMsg+7
  2352                           
  2353                           ;main.c: 955: SerialMsg.xData[3] = IOPORTCONF.io[SerialMsg.xData[0]-'1'].mascara_seguido
      +                          r;
  2354  0241  0861               	movf	_SerialMsg+5,w
  2355  0242  00C6               	movwf	??_main
  2356  0243  0746               	addwf	??_main,w
  2357  0244  3E9E               	addlw	158
  2358  0245  3E91               	addlw	(low ((_IOPORTCONF| (0+256)+1)))& (0+255)
  2359  0246  0084               	movwf	4
  2360  0247  0800               	movf	0,w
  2361  0248  00C7               	movwf	??_main+1
  2362  0249  0847               	movf	??_main+1,w
  2363  024A  00E4               	movwf	_SerialMsg+8
  2364                           
  2365                           ;main.c: 956: SerialMsg.xData[4] = IOPORTCONF.mascara_seguidor_an;
  2366  024B  1683               	bsf	3,5	;RP0=1, select bank3
  2367  024C  1703               	bsf	3,6	;RP1=1, select bank3
  2368  024D  0829               	movf	(_IOPORTCONF^(0+384)+25),w
  2369  024E  1283               	bcf	3,5	;RP0=0, select bank0
  2370  024F  1303               	bcf	3,6	;RP1=0, select bank0
  2371  0250  00C6               	movwf	??_main
  2372  0251  0846               	movf	??_main,w
  2373  0252  00E5               	movwf	_SerialMsg+9
  2374                           
  2375                           ;main.c: 957: break;
  2376  0253  2D4D               	goto	l5191
  2377  0254                     l5059:	
  2378                           ;main.c: 958: case '8':
  2379                           
  2380                           
  2381                           ;main.c: 959: SerialMsg.xData[1] = IOPORT.analog[SerialMsg.xData[0]-'1'].statush;
  2382  0254  0861               	movf	_SerialMsg+5,w
  2383  0255  00C6               	movwf	??_main
  2384  0256  3002               	movlw	2
  2385  0257                     u5235:	
  2386  0257  1003               	clrc
  2387  0258  0DC6               	rlf	??_main,f
  2388  0259  3EFF               	addlw	-1
  2389  025A  1D03               	skipz
  2390  025B  2A57               	goto	u5235
  2391  025C  303C               	movlw	60
  2392  025D  0746               	addwf	??_main,w
  2393  025E  00C7               	movwf	??_main+1
  2394  025F  30AC               	movlw	(low ((_IOPORT| 0+12)))& (0+255)
  2395  0260  0747               	addwf	??_main+1,w
  2396  0261  00C8               	movwf	??_main+2
  2397  0262  0848               	movf	??_main+2,w
  2398  0263  3E02               	addlw	2
  2399  0264  0084               	movwf	4
  2400  0265  1383               	bcf	3,7	;select IRP bank1
  2401  0266  0800               	movf	0,w
  2402  0267  00C9               	movwf	??_main+3
  2403  0268  0849               	movf	??_main+3,w
  2404  0269  00E2               	movwf	_SerialMsg+6
  2405                           
  2406                           ;main.c: 960: SerialMsg.xData[2] = IOPORT.analog[SerialMsg.xData[0]-'1'].statusl;
  2407  026A  0861               	movf	_SerialMsg+5,w
  2408  026B  00C6               	movwf	??_main
  2409  026C  3002               	movlw	2
  2410  026D                     u5245:	
  2411  026D  1003               	clrc
  2412  026E  0DC6               	rlf	??_main,f
  2413  026F  3EFF               	addlw	-1
  2414  0270  1D03               	skipz
  2415  0271  2A6D               	goto	u5245
  2416  0272  303C               	movlw	60
  2417  0273  0746               	addwf	??_main,w
  2418  0274  00C7               	movwf	??_main+1
  2419  0275  30AC               	movlw	(low ((_IOPORT| 0+12)))& (0+255)
  2420  0276  0747               	addwf	??_main+1,w
  2421  0277  00C8               	movwf	??_main+2
  2422  0278  0848               	movf	??_main+2,w
  2423  0279  3E03               	addlw	3
  2424  027A  0084               	movwf	4
  2425  027B  0800               	movf	0,w
  2426  027C  00C9               	movwf	??_main+3
  2427  027D  0849               	movf	??_main+3,w
  2428  027E  00E3               	movwf	_SerialMsg+7
  2429                           
  2430                           ;main.c: 961: SerialMsg.xData[3] = IOPORTCONF.analog[SerialMsg.xData[0]-'1'].maxh;
  2431  027F  0861               	movf	_SerialMsg+5,w
  2432  0280  00C6               	movwf	??_main
  2433  0281  3001               	movlw	1
  2434  0282                     u5255:	
  2435  0282  1003               	clrc
  2436  0283  0DC6               	rlf	??_main,f
  2437  0284  3EFF               	addlw	-1
  2438  0285  1D03               	skipz
  2439  0286  2A82               	goto	u5255
  2440  0287  1003               	clrc
  2441  0288  0D46               	rlf	??_main,w
  2442  0289  3E3C               	addlw	60
  2443  028A  3E99               	addlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2444  028B  0084               	movwf	4
  2445  028C  1783               	bsf	3,7	;select IRP bank3
  2446  028D  0800               	movf	0,w
  2447  028E  00C7               	movwf	??_main+1
  2448  028F  0847               	movf	??_main+1,w
  2449  0290  00E4               	movwf	_SerialMsg+8
  2450                           
  2451                           ;main.c: 962: SerialMsg.xData[4] = IOPORTCONF.analog[SerialMsg.xData[0]-'1'].maxl;
  2452  0291  0861               	movf	_SerialMsg+5,w
  2453  0292  00C6               	movwf	??_main
  2454  0293  3002               	movlw	2
  2455  0294                     u5265:	
  2456  0294  1003               	clrc
  2457  0295  0DC6               	rlf	??_main,f
  2458  0296  3EFF               	addlw	-1
  2459  0297  1D03               	skipz
  2460  0298  2A94               	goto	u5265
  2461  0299  303C               	movlw	60
  2462  029A  0746               	addwf	??_main,w
  2463  029B  00C7               	movwf	??_main+1
  2464  029C  3099               	movlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2465  029D  0747               	addwf	??_main+1,w
  2466  029E  00C8               	movwf	??_main+2
  2467  029F  0A48               	incf	??_main+2,w
  2468  02A0  0084               	movwf	4
  2469  02A1  0800               	movf	0,w
  2470  02A2  00C9               	movwf	??_main+3
  2471  02A3  0849               	movf	??_main+3,w
  2472  02A4  00E5               	movwf	_SerialMsg+9
  2473                           
  2474                           ;main.c: 963: SerialMsg.xData[5] = IOPORTCONF.analog[SerialMsg.xData[0]-'1'].minh;
  2475  02A5  0861               	movf	_SerialMsg+5,w
  2476  02A6  00C6               	movwf	??_main
  2477  02A7  3002               	movlw	2
  2478  02A8                     u5275:	
  2479  02A8  1003               	clrc
  2480  02A9  0DC6               	rlf	??_main,f
  2481  02AA  3EFF               	addlw	-1
  2482  02AB  1D03               	skipz
  2483  02AC  2AA8               	goto	u5275
  2484  02AD  303C               	movlw	60
  2485  02AE  0746               	addwf	??_main,w
  2486  02AF  00C7               	movwf	??_main+1
  2487  02B0  3099               	movlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2488  02B1  0747               	addwf	??_main+1,w
  2489  02B2  00C8               	movwf	??_main+2
  2490  02B3  0848               	movf	??_main+2,w
  2491  02B4  3E02               	addlw	2
  2492  02B5  0084               	movwf	4
  2493  02B6  0800               	movf	0,w
  2494  02B7  00C9               	movwf	??_main+3
  2495  02B8  0849               	movf	??_main+3,w
  2496  02B9  00E6               	movwf	_SerialMsg+10
  2497                           
  2498                           ;main.c: 964: SerialMsg.xData[6] = IOPORTCONF.analog[SerialMsg.xData[0]-'1'].minl;
  2499  02BA  0861               	movf	_SerialMsg+5,w
  2500  02BB  00C6               	movwf	??_main
  2501  02BC  3002               	movlw	2
  2502  02BD                     u5285:	
  2503  02BD  1003               	clrc
  2504  02BE  0DC6               	rlf	??_main,f
  2505  02BF  3EFF               	addlw	-1
  2506  02C0  1D03               	skipz
  2507  02C1  2ABD               	goto	u5285
  2508  02C2  303C               	movlw	60
  2509  02C3  0746               	addwf	??_main,w
  2510  02C4  00C7               	movwf	??_main+1
  2511  02C5  3099               	movlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2512  02C6  0747               	addwf	??_main+1,w
  2513  02C7  00C8               	movwf	??_main+2
  2514  02C8  0848               	movf	??_main+2,w
  2515  02C9  3E03               	addlw	3
  2516  02CA  0084               	movwf	4
  2517  02CB  0800               	movf	0,w
  2518  02CC  00C9               	movwf	??_main+3
  2519  02CD  0849               	movf	??_main+3,w
  2520  02CE  00E7               	movwf	_SerialMsg+11
  2521                           
  2522                           ;main.c: 965: SerialMsg.xData[7] = IOPORT.analog[SerialMsg.xData[0]-'1'].alarm;
  2523  02CF  0861               	movf	_SerialMsg+5,w
  2524  02D0  00C6               	movwf	??_main
  2525  02D1  3001               	movlw	1
  2526  02D2                     u5295:	
  2527  02D2  1003               	clrc
  2528  02D3  0DC6               	rlf	??_main,f
  2529  02D4  3EFF               	addlw	-1
  2530  02D5  1D03               	skipz
  2531  02D6  2AD2               	goto	u5295
  2532  02D7  1003               	clrc
  2533  02D8  0D46               	rlf	??_main,w
  2534  02D9  3E3C               	addlw	60
  2535  02DA  3EAC               	addlw	(low ((_IOPORT| 0+12)))& (0+255)
  2536  02DB  0084               	movwf	4
  2537  02DC  1383               	bcf	3,7	;select IRP bank1
  2538  02DD  0800               	movf	0,w
  2539  02DE  00C7               	movwf	??_main+1
  2540  02DF  0847               	movf	??_main+1,w
  2541  02E0  00E8               	movwf	_SerialMsg+12
  2542                           
  2543                           ;main.c: 966: SerialMsg.xData[8] = IOPORTCONF.mascara_notif_an;
  2544  02E1  1683               	bsf	3,5	;RP0=1, select bank3
  2545  02E2  1703               	bsf	3,6	;RP1=1, select bank3
  2546  02E3  082A               	movf	(_IOPORTCONF^(0+384)+26),w
  2547  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2548  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2549  02E6  00C6               	movwf	??_main
  2550  02E7  0846               	movf	??_main,w
  2551  02E8  00E9               	movwf	_SerialMsg+13
  2552                           
  2553                           ;main.c: 967: SerialMsg.xData[9] = IOPORTCONF.mascara_seguidor_an;
  2554  02E9  1683               	bsf	3,5	;RP0=1, select bank3
  2555  02EA  1703               	bsf	3,6	;RP1=1, select bank3
  2556  02EB  0829               	movf	(_IOPORTCONF^(0+384)+25),w
  2557  02EC  1283               	bcf	3,5	;RP0=0, select bank0
  2558  02ED  1303               	bcf	3,6	;RP1=0, select bank0
  2559  02EE  00C6               	movwf	??_main
  2560  02EF  0846               	movf	??_main,w
  2561  02F0  00EA               	movwf	_SerialMsg+14
  2562                           
  2563                           ;main.c: 968: break;
  2564  02F1  2D4D               	goto	l5191
  2565  02F2                     l5065:	
  2566                           ;main.c: 969: case 'I':
  2567                           
  2568                           
  2569                           ;main.c: 970: if(LastCntRcv != SerialMsg.xCnt)
  2570  02F2  085F               	movf	_SerialMsg+3,w
  2571  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  2572  02F4  1303               	bcf	3,6	;RP1=0, select bank1
  2573  02F5  0668               	xorwf	_LastCntRcv^(0+128),w
  2574  02F6  1903               	skipnz
  2575  02F7  2D4D               	goto	l5191
  2576                           
  2577                           ;main.c: 971: {
  2578                           ;main.c: 972: IOPORT.io[SerialMsg.xData[0]-'1'+2].status ^= minipow2(SerialMsg.xData[1]-
      +                          '0');
  2579  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  2580  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  2581  02FA  0862               	movf	_SerialMsg+6,w
  2582  02FB  3ED0               	addlw	208
  2583  02FC  160A  158A  25A0  120A  118A  	fcall	_minipow2
  2584  0301  1283               	bcf	3,5	;RP0=0, select bank0
  2585  0302  1303               	bcf	3,6	;RP1=0, select bank0
  2586  0303  00C6               	movwf	??_main
  2587  0304  3003               	movlw	3
  2588  0305  00C7               	movwf	??_main+1
  2589  0306  0847               	movf	??_main+1,w
  2590  0307  00A0               	movwf	___bmul@multiplicand
  2591  0308  0861               	movf	_SerialMsg+5,w
  2592  0309  3ED1               	addlw	209
  2593  030A  120A  118A  27E7  120A  118A  	fcall	___bmul
  2594  030F  3EA0               	addlw	(low (_IOPORT| 0))& (0+255)
  2595  0310  0084               	movwf	4
  2596  0311  1283               	bcf	3,5	;RP0=0, select bank0
  2597  0312  1303               	bcf	3,6	;RP1=0, select bank0
  2598  0313  0846               	movf	??_main,w
  2599  0314  1383               	bcf	3,7	;select IRP bank1
  2600  0315  0680               	xorwf	0,f
  2601  0316                     l5069:	
  2602                           
  2603                           ;main.c: 974: SaveStatusTimer = 60;
  2604  0316  303C               	movlw	60
  2605  0317  00C6               	movwf	??_main
  2606  0318  0846               	movf	??_main,w
  2607  0319  00D7               	movwf	_SaveStatusTimer
  2608                           
  2609                           ;main.c: 975: }
  2610                           ;main.c: 976: break;
  2611  031A  2D4D               	goto	l5191
  2612  031B                     l5071:	
  2613                           ;main.c: 977: case 'B':
  2614                           
  2615                           
  2616                           ;main.c: 978: if(SerialMsg.xData[0] == 0xBF ||
  2617                           ;main.c: 979: SerialMsg.xData[0] == 0x5F ||
  2618                           ;main.c: 980: SerialMsg.xData[0] == 0x17 ||
  2619                           ;main.c: 981: SerialMsg.xData[0] == 0x0B ||
  2620                           ;main.c: 982: SerialMsg.xData[0] == 0x03 ||
  2621                           ;main.c: 983: SerialMsg.xData[0] == 0x01 )
  2622  031B  30BF               	movlw	191
  2623  031C  0661               	xorwf	_SerialMsg+5,w
  2624  031D  1903               	btfsc	3,2
  2625  031E  2B31               	goto	l5083
  2626  031F  305F               	movlw	95
  2627  0320  0661               	xorwf	_SerialMsg+5,w
  2628  0321  1903               	btfsc	3,2
  2629  0322  2B31               	goto	l5083
  2630  0323  3017               	movlw	23
  2631  0324  0661               	xorwf	_SerialMsg+5,w
  2632  0325  1903               	btfsc	3,2
  2633  0326  2B31               	goto	l5083
  2634  0327  300B               	movlw	11
  2635  0328  0661               	xorwf	_SerialMsg+5,w
  2636  0329  1903               	btfsc	3,2
  2637  032A  2B31               	goto	l5083
  2638  032B  3003               	movlw	3
  2639  032C  0661               	xorwf	_SerialMsg+5,w
  2640  032D  1D03               	btfss	3,2
  2641  032E  0361               	decf	_SerialMsg+5,w
  2642  032F  1D03               	btfss	3,2
  2643  0330  2D4D               	goto	l5191
  2644  0331                     l5083:	
  2645                           
  2646                           ;main.c: 984: {
  2647                           ;main.c: 985: IOPORTCONF.baud_rate = SerialMsg.xData[0];
  2648  0331  0861               	movf	_SerialMsg+5,w
  2649  0332  00C6               	movwf	??_main
  2650  0333  0846               	movf	??_main,w
  2651  0334  1683               	bsf	3,5	;RP0=1, select bank3
  2652  0335  1703               	bsf	3,6	;RP1=1, select bank3
  2653  0336  00AB               	movwf	(_IOPORTCONF^(0+384)+27)
  2654                           
  2655                           ;main.c: 986: SaveConfigTimer = 1;
  2656  0337  1283               	bcf	3,5	;RP0=0, select bank0
  2657  0338  1303               	bcf	3,6	;RP1=0, select bank0
  2658  0339  01D8               	clrf	_SaveConfigTimer
  2659  033A  0AD8               	incf	_SaveConfigTimer,f
  2660                           
  2661                           ;main.c: 987: SaveStatusTimer = 1;
  2662  033B  01D7               	clrf	_SaveStatusTimer
  2663  033C  0AD7               	incf	_SaveStatusTimer,f
  2664                           
  2665                           ;main.c: 988: RebootTimer = 5;
  2666  033D  3005               	movlw	5
  2667  033E  00C6               	movwf	??_main
  2668  033F  0846               	movf	??_main,w
  2669  0340  00FC               	movwf	_RebootTimer
  2670                           
  2671                           ;main.c: 989: Beep(20);
  2672  0341  3014               	movlw	20
  2673  0342  160A  158A  251B  120A  118A  	fcall	_Beep
  2674                           
  2675                           ;main.c: 990: }
  2676                           ;main.c: 991: break;
  2677  0347  2D4D               	goto	l5191
  2678  0348                     l5091:	
  2679                           ;main.c: 992: case 'F':
  2680                           
  2681                           
  2682                           ;main.c: 993: if(LastCntRcv != SerialMsg.xCnt)
  2683  0348  1283               	bcf	3,5	;RP0=0, select bank0
  2684  0349  1303               	bcf	3,6	;RP1=0, select bank0
  2685  034A  085F               	movf	_SerialMsg+3,w
  2686  034B  1683               	bsf	3,5	;RP0=1, select bank1
  2687  034C  1303               	bcf	3,6	;RP1=0, select bank1
  2688  034D  0668               	xorwf	_LastCntRcv^(0+128),w
  2689  034E  1D03               	btfss	3,2
  2690  034F  2B6B               	goto	l5103
  2691  0350  2D4D               	goto	l5191
  2692  0351                     l5095:	
  2693                           ;main.c: 997: {
  2694                           ;main.c: 998: case '1':
  2695                           
  2696                           ;main.c: 994: {
  2697                           ;main.c: 996: switch(SerialMsg.xData[0])
  2698                           
  2699                           
  2700                           ;main.c: 999: IOPORTCONF.io[0].mascara_seguidor = SerialMsg.xData[1];
  2701  0351  1283               	bcf	3,5	;RP0=0, select bank0
  2702  0352  0862               	movf	_SerialMsg+6,w
  2703  0353  00C6               	movwf	??_main
  2704  0354  0846               	movf	??_main,w
  2705  0355  1683               	bsf	3,5	;RP0=1, select bank3
  2706  0356  1703               	bsf	3,6	;RP1=1, select bank3
  2707  0357  0091               	movwf	(_IOPORTCONF^(0+384)+1)
  2708                           
  2709                           ;main.c: 1000: break;
  2710  0358  2BBF               	goto	l5125
  2711  0359                     l5097:	
  2712                           ;main.c: 1001: case '2':
  2713                           
  2714                           
  2715                           ;main.c: 1002: IOPORTCONF.io[1].mascara_seguidor = SerialMsg.xData[1];
  2716  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2717  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2718  035B  0862               	movf	_SerialMsg+6,w
  2719  035C  00C6               	movwf	??_main
  2720  035D  0846               	movf	??_main,w
  2721  035E  1683               	bsf	3,5	;RP0=1, select bank3
  2722  035F  1703               	bsf	3,6	;RP1=1, select bank3
  2723  0360  0093               	movwf	(_IOPORTCONF^(0+384)+3)
  2724                           
  2725                           ;main.c: 1003: break;
  2726  0361  2BBF               	goto	l5125
  2727  0362                     l5099:	
  2728                           ;main.c: 1004: case 'A':
  2729                           
  2730                           
  2731                           ;main.c: 1005: IOPORTCONF.mascara_seguidor_an = SerialMsg.xData[1];
  2732  0362  1283               	bcf	3,5	;RP0=0, select bank0
  2733  0363  1303               	bcf	3,6	;RP1=0, select bank0
  2734  0364  0862               	movf	_SerialMsg+6,w
  2735  0365  00C6               	movwf	??_main
  2736  0366  0846               	movf	??_main,w
  2737  0367  1683               	bsf	3,5	;RP0=1, select bank3
  2738  0368  1703               	bsf	3,6	;RP1=1, select bank3
  2739  0369  00A9               	movwf	(_IOPORTCONF^(0+384)+25)
  2740                           
  2741                           ;main.c: 1007: }
  2742                           
  2743                           ;main.c: 1006: break;
  2744  036A  2BBF               	goto	l5125
  2745  036B                     l5103:	
  2746  036B  1283               	bcf	3,5	;RP0=0, select bank0
  2747  036C  1303               	bcf	3,6	;RP1=0, select bank0
  2748  036D  0861               	movf	_SerialMsg+5,w
  2749                           
  2750                           ; Switch size 1, requested type "space"
  2751                           ; Number of cases is 3, Range of values is 49 to 65
  2752                           ; switch strategies available:
  2753                           ; Name         Instructions Cycles
  2754                           ; simple_byte           10     6 (average)
  2755                           ; direct_byte           62    11 (fixed)
  2756                           ; jumptable            263     9 (fixed)
  2757                           ;	Chosen strategy is simple_byte
  2758  036E  3A31               	xorlw	49	; case 49
  2759  036F  1903               	skipnz
  2760  0370  2B51               	goto	l5095
  2761  0371  3A03               	xorlw	3	; case 50
  2762  0372  1903               	skipnz
  2763  0373  2B59               	goto	l5097
  2764  0374  3A73               	xorlw	115	; case 65
  2765  0375  1903               	skipnz
  2766  0376  2B62               	goto	l5099
  2767  0377  2B78               	goto	l5105
  2768  0378                     l5105:	
  2769  0378  2BBF               	goto	l5125
  2770  0379                     l5107:	
  2771                           ;main.c: 1011: case 'O':
  2772                           
  2773                           ;main.c: 1009: }
  2774                           ;main.c: 1010: break;
  2775                           
  2776                           ;main.c: 1008: SaveConfigTimer = 10;
  2777                           
  2778                           
  2779                           ;main.c: 1012: if(LastCntRcv != SerialMsg.xCnt)
  2780  0379  085F               	movf	_SerialMsg+3,w
  2781  037A  1683               	bsf	3,5	;RP0=1, select bank1
  2782  037B  1303               	bcf	3,6	;RP1=0, select bank1
  2783  037C  0668               	xorwf	_LastCntRcv^(0+128),w
  2784  037D  1D03               	btfss	3,2
  2785  037E  2BAC               	goto	l5123
  2786  037F  2D4D               	goto	l5191
  2787  0380                     l5111:	
  2788                           ;main.c: 1016: {
  2789                           ;main.c: 1017: case '1':
  2790                           
  2791                           ;main.c: 1013: {
  2792                           ;main.c: 1015: switch(SerialMsg.xData[0])
  2793                           
  2794                           
  2795                           ;main.c: 1018: IOPORTCONF.io[0].mascara_notif = SerialMsg.xData[1];
  2796  0380  1283               	bcf	3,5	;RP0=0, select bank0
  2797  0381  0862               	movf	_SerialMsg+6,w
  2798  0382  00C6               	movwf	??_main
  2799  0383  0846               	movf	??_main,w
  2800  0384  1683               	bsf	3,5	;RP0=1, select bank3
  2801  0385  1703               	bsf	3,6	;RP1=1, select bank3
  2802  0386  0092               	movwf	(_IOPORTCONF^(0+384)+2)
  2803                           
  2804                           ;main.c: 1019: break;
  2805  0387  2BBF               	goto	l5125
  2806  0388                     l5113:	
  2807                           ;main.c: 1020: case '2':
  2808                           
  2809                           
  2810                           ;main.c: 1021: IOPORTCONF.io[1].mascara_notif = SerialMsg.xData[1];
  2811  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2812  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2813  038A  0862               	movf	_SerialMsg+6,w
  2814  038B  00C6               	movwf	??_main
  2815  038C  0846               	movf	??_main,w
  2816  038D  1683               	bsf	3,5	;RP0=1, select bank3
  2817  038E  1703               	bsf	3,6	;RP1=1, select bank3
  2818  038F  0094               	movwf	(_IOPORTCONF^(0+384)+4)
  2819                           
  2820                           ;main.c: 1022: break;
  2821  0390  2BBF               	goto	l5125
  2822  0391                     l5115:	
  2823                           ;main.c: 1023: case '3':
  2824                           
  2825                           
  2826                           ;main.c: 1024: IOPORTCONF.io[2].mascara_notif = SerialMsg.xData[1];
  2827  0391  1283               	bcf	3,5	;RP0=0, select bank0
  2828  0392  1303               	bcf	3,6	;RP1=0, select bank0
  2829  0393  0862               	movf	_SerialMsg+6,w
  2830  0394  00C6               	movwf	??_main
  2831  0395  0846               	movf	??_main,w
  2832  0396  1683               	bsf	3,5	;RP0=1, select bank3
  2833  0397  1703               	bsf	3,6	;RP1=1, select bank3
  2834  0398  0096               	movwf	(_IOPORTCONF^(0+384)+6)
  2835                           
  2836                           ;main.c: 1025: break;
  2837  0399  2BBF               	goto	l5125
  2838  039A                     l5117:	
  2839                           ;main.c: 1026: case '4':
  2840                           
  2841                           
  2842                           ;main.c: 1027: IOPORTCONF.io[3].mascara_notif = SerialMsg.xData[1];
  2843  039A  1283               	bcf	3,5	;RP0=0, select bank0
  2844  039B  1303               	bcf	3,6	;RP1=0, select bank0
  2845  039C  0862               	movf	_SerialMsg+6,w
  2846  039D  00C6               	movwf	??_main
  2847  039E  0846               	movf	??_main,w
  2848  039F  1683               	bsf	3,5	;RP0=1, select bank3
  2849  03A0  1703               	bsf	3,6	;RP1=1, select bank3
  2850  03A1  0098               	movwf	(_IOPORTCONF^(0+384)+8)
  2851                           
  2852                           ;main.c: 1028: break;
  2853  03A2  2BBF               	goto	l5125
  2854  03A3                     l5119:	
  2855                           ;main.c: 1029: case 'A':
  2856                           
  2857                           
  2858                           ;main.c: 1030: IOPORTCONF.mascara_notif_an = SerialMsg.xData[1];
  2859  03A3  1283               	bcf	3,5	;RP0=0, select bank0
  2860  03A4  1303               	bcf	3,6	;RP1=0, select bank0
  2861  03A5  0862               	movf	_SerialMsg+6,w
  2862  03A6  00C6               	movwf	??_main
  2863  03A7  0846               	movf	??_main,w
  2864  03A8  1683               	bsf	3,5	;RP0=1, select bank3
  2865  03A9  1703               	bsf	3,6	;RP1=1, select bank3
  2866  03AA  00AA               	movwf	(_IOPORTCONF^(0+384)+26)
  2867                           
  2868                           ;main.c: 1032: }
  2869                           
  2870                           ;main.c: 1031: break;
  2871  03AB  2BBF               	goto	l5125
  2872  03AC                     l5123:	
  2873  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2874  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2875  03AE  0861               	movf	_SerialMsg+5,w
  2876                           
  2877                           ; Switch size 1, requested type "space"
  2878                           ; Number of cases is 5, Range of values is 49 to 65
  2879                           ; switch strategies available:
  2880                           ; Name         Instructions Cycles
  2881                           ; simple_byte           16     9 (average)
  2882                           ; direct_byte           62    11 (fixed)
  2883                           ; jumptable            263     9 (fixed)
  2884                           ;	Chosen strategy is simple_byte
  2885  03AF  3A31               	xorlw	49	; case 49
  2886  03B0  1903               	skipnz
  2887  03B1  2B80               	goto	l5111
  2888  03B2  3A03               	xorlw	3	; case 50
  2889  03B3  1903               	skipnz
  2890  03B4  2B88               	goto	l5113
  2891  03B5  3A01               	xorlw	1	; case 51
  2892  03B6  1903               	skipnz
  2893  03B7  2B91               	goto	l5115
  2894  03B8  3A07               	xorlw	7	; case 52
  2895  03B9  1903               	skipnz
  2896  03BA  2B9A               	goto	l5117
  2897  03BB  3A75               	xorlw	117	; case 65
  2898  03BC  1903               	skipnz
  2899  03BD  2BA3               	goto	l5119
  2900  03BE  2BBF               	goto	l5125
  2901  03BF                     l5125:	
  2902                           
  2903                           ;main.c: 1033: SaveConfigTimer = 10;
  2904  03BF  300A               	movlw	10
  2905  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2906  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2907  03C2  2C19               	goto	L2
  2908  03C3                     l5127:	
  2909                           ;main.c: 1036: case 'A':
  2910                           
  2911                           ;main.c: 1034: }
  2912                           ;main.c: 1035: break;
  2913                           
  2914                           
  2915                           ;main.c: 1037: if(LastCntRcv != SerialMsg.xCnt)
  2916  03C3  085F               	movf	_SerialMsg+3,w
  2917  03C4  1683               	bsf	3,5	;RP0=1, select bank1
  2918  03C5  1303               	bcf	3,6	;RP1=0, select bank1
  2919  03C6  0668               	xorwf	_LastCntRcv^(0+128),w
  2920  03C7  1903               	skipnz
  2921  03C8  2D4D               	goto	l5191
  2922                           
  2923                           ;main.c: 1038: {
  2924                           ;main.c: 1039: IOPORTCONF.analog[SerialMsg.xData[0]-'1'].maxh = SerialMsg.xData[1];
  2925  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  2926  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  2927  03CB  0862               	movf	_SerialMsg+6,w
  2928  03CC  00C6               	movwf	??_main
  2929  03CD  0861               	movf	_SerialMsg+5,w
  2930  03CE  00C7               	movwf	??_main+1
  2931  03CF  3001               	movlw	1
  2932  03D0                     u5405:	
  2933  03D0  1003               	clrc
  2934  03D1  0DC7               	rlf	??_main+1,f
  2935  03D2  3EFF               	addlw	-1
  2936  03D3  1D03               	skipz
  2937  03D4  2BD0               	goto	u5405
  2938  03D5  1003               	clrc
  2939  03D6  0D47               	rlf	??_main+1,w
  2940  03D7  3E3C               	addlw	60
  2941  03D8  3E99               	addlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2942  03D9  0084               	movwf	4
  2943  03DA  0846               	movf	??_main,w
  2944  03DB  1783               	bsf	3,7	;select IRP bank3
  2945  03DC  0080               	movwf	0
  2946                           
  2947                           ;main.c: 1040: IOPORTCONF.analog[SerialMsg.xData[0]-'1'].maxl = SerialMsg.xData[1];
  2948  03DD  0862               	movf	_SerialMsg+6,w
  2949  03DE  00C6               	movwf	??_main
  2950  03DF  0861               	movf	_SerialMsg+5,w
  2951  03E0  00C7               	movwf	??_main+1
  2952  03E1  3002               	movlw	2
  2953  03E2                     u5415:	
  2954  03E2  1003               	clrc
  2955  03E3  0DC7               	rlf	??_main+1,f
  2956  03E4  3EFF               	addlw	-1
  2957  03E5  1D03               	skipz
  2958  03E6  2BE2               	goto	u5415
  2959  03E7  303C               	movlw	60
  2960  03E8  0747               	addwf	??_main+1,w
  2961  03E9  00C8               	movwf	??_main+2
  2962  03EA  3099               	movlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2963  03EB  0748               	addwf	??_main+2,w
  2964  03EC  00C9               	movwf	??_main+3
  2965  03ED  0A49               	incf	??_main+3,w
  2966  03EE  0084               	movwf	4
  2967  03EF  0846               	movf	??_main,w
  2968  03F0  0080               	movwf	0
  2969                           
  2970                           ;main.c: 1041: IOPORTCONF.analog[SerialMsg.xData[0]-'1'].minh = 0;
  2971  03F1  0861               	movf	_SerialMsg+5,w
  2972  03F2  00C6               	movwf	??_main
  2973  03F3  3002               	movlw	2
  2974  03F4                     u5425:	
  2975  03F4  1003               	clrc
  2976  03F5  0DC6               	rlf	??_main,f
  2977  03F6  3EFF               	addlw	-1
  2978  03F7  1D03               	skipz
  2979  03F8  2BF4               	goto	u5425
  2980  03F9  303C               	movlw	60
  2981  03FA  0746               	addwf	??_main,w
  2982  03FB  00C7               	movwf	??_main+1
  2983  03FC  3099               	movlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  2984  03FD  0747               	addwf	??_main+1,w
  2985  03FE  00C8               	movwf	??_main+2
  2986  03FF  0848               	movf	??_main+2,w
  2987  0400  3E02               	addlw	2
  2988  0401  0084               	movwf	4
  2989  0402  0180               	clrf	0
  2990                           
  2991                           ;main.c: 1042: IOPORTCONF.analog[SerialMsg.xData[0]-'1'].minl = SerialMsg.xData[1];
  2992  0403  0862               	movf	_SerialMsg+6,w
  2993  0404  00C6               	movwf	??_main
  2994  0405  0861               	movf	_SerialMsg+5,w
  2995  0406  00C7               	movwf	??_main+1
  2996  0407  3002               	movlw	2
  2997  0408                     u5435:	
  2998  0408  1003               	clrc
  2999  0409  0DC7               	rlf	??_main+1,f
  3000  040A  3EFF               	addlw	-1
  3001  040B  1D03               	skipz
  3002  040C  2C08               	goto	u5435
  3003  040D  303C               	movlw	60
  3004  040E  0747               	addwf	??_main+1,w
  3005  040F  00C8               	movwf	??_main+2
  3006  0410  3099               	movlw	(low ((_IOPORTCONF| (0+256)+9)))& (0+255)
  3007  0411  0748               	addwf	??_main+2,w
  3008  0412  00C9               	movwf	??_main+3
  3009  0413  0849               	movf	??_main+3,w
  3010  0414  3E03               	addlw	3
  3011  0415  0084               	movwf	4
  3012  0416  0846               	movf	??_main,w
  3013  0417  0080               	movwf	0
  3014                           
  3015                           ;main.c: 1043: SaveConfigTimer = 10;
  3016  0418  300A               	movlw	10
  3017  0419                     L2:	
  3018  0419  00C6               	movwf	??_main
  3019  041A  0846               	movf	??_main,w
  3020  041B  00D8               	movwf	_SaveConfigTimer
  3021                           
  3022                           ;main.c: 1044: }
  3023                           ;main.c: 1045: break;
  3024  041C  2D4D               	goto	l5191
  3025  041D                     l5133:	
  3026                           ;main.c: 1046: case 'C':
  3027                           
  3028                           
  3029                           ;main.c: 1047: Beep(SerialMsg.xData[0] - '0');
  3030  041D  0861               	movf	_SerialMsg+5,w
  3031  041E  3ED0               	addlw	208
  3032  041F  160A  158A  251B  120A  118A  	fcall	_Beep
  3033                           
  3034                           ;main.c: 1048: break;
  3035  0424  2D4D               	goto	l5191
  3036  0425                     l5135:	
  3037                           ;main.c: 1050: case 'D':
  3038                           
  3039                           
  3040                           ;main.c: 1051: SerialMsg.xSum = 0;
  3041  0425  1283               	bcf	3,5	;RP0=0, select bank0
  3042  0426  1303               	bcf	3,6	;RP1=0, select bank0
  3043  0427  01EB               	clrf	_SerialMsg+15
  3044                           
  3045                           ;main.c: 1052: LCDMsg(1, 1, &SerialMsg.xData[0]);
  3046  0428  01A8               	clrf	LCDMsg@columna
  3047  0429  0AA8               	incf	LCDMsg@columna,f
  3048  042A  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3049  042B  00A9               	movwf	LCDMsg@msg
  3050  042C  3000               	movlw	0
  3051  042D  00AA               	movwf	LCDMsg@msg+1
  3052  042E  3001               	movlw	1
  3053  042F  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3054                           
  3055                           ;main.c: 1053: break;
  3056  0434  2D4D               	goto	l5191
  3057  0435                     l5139:	
  3058                           ;main.c: 1054: case 'E':
  3059                           
  3060                           
  3061                           ;main.c: 1055: SerialMsg.xSum = 0;
  3062  0435  1283               	bcf	3,5	;RP0=0, select bank0
  3063  0436  1303               	bcf	3,6	;RP1=0, select bank0
  3064  0437  01EB               	clrf	_SerialMsg+15
  3065                           
  3066                           ;main.c: 1056: LCDMsg(1, 20, &SerialMsg.xData[0]);
  3067  0438  3014               	movlw	20
  3068  0439  00C6               	movwf	??_main
  3069  043A  0846               	movf	??_main,w
  3070  043B  00A8               	movwf	LCDMsg@columna
  3071  043C  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3072  043D  00A9               	movwf	LCDMsg@msg
  3073  043E  3000               	movlw	0
  3074  043F  00AA               	movwf	LCDMsg@msg+1
  3075  0440  3001               	movlw	1
  3076  0441  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3077                           
  3078                           ;main.c: 1057: break;
  3079  0446  2D4D               	goto	l5191
  3080  0447                     l5143:	
  3081                           ;main.c: 1058: case 'G':
  3082                           
  3083                           
  3084                           ;main.c: 1059: SerialMsg.xSum = 0;
  3085  0447  1283               	bcf	3,5	;RP0=0, select bank0
  3086  0448  1303               	bcf	3,6	;RP1=0, select bank0
  3087  0449  01EB               	clrf	_SerialMsg+15
  3088                           
  3089                           ;main.c: 1060: LCDMsg(2, 1, &SerialMsg.xData[0]);
  3090  044A  01A8               	clrf	LCDMsg@columna
  3091  044B  0AA8               	incf	LCDMsg@columna,f
  3092  044C  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3093  044D  00A9               	movwf	LCDMsg@msg
  3094  044E  3000               	movlw	0
  3095  044F  00AA               	movwf	LCDMsg@msg+1
  3096  0450  3002               	movlw	2
  3097  0451  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3098                           
  3099                           ;main.c: 1061: break;
  3100  0456  2D4D               	goto	l5191
  3101  0457                     l5147:	
  3102                           ;main.c: 1062: case 'H':
  3103                           
  3104                           
  3105                           ;main.c: 1063: SerialMsg.xSum = 0;
  3106  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3107  0458  1303               	bcf	3,6	;RP1=0, select bank0
  3108  0459  01EB               	clrf	_SerialMsg+15
  3109                           
  3110                           ;main.c: 1064: LCDMsg(2, 20, &SerialMsg.xData[0]);
  3111  045A  3014               	movlw	20
  3112  045B  00C6               	movwf	??_main
  3113  045C  0846               	movf	??_main,w
  3114  045D  00A8               	movwf	LCDMsg@columna
  3115  045E  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3116  045F  00A9               	movwf	LCDMsg@msg
  3117  0460  3000               	movlw	0
  3118  0461  00AA               	movwf	LCDMsg@msg+1
  3119  0462  3002               	movlw	2
  3120  0463  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3121                           
  3122                           ;main.c: 1065: break;
  3123  0468  2D4D               	goto	l5191
  3124  0469                     l5151:	
  3125                           ;main.c: 1066: case 'J':
  3126                           
  3127                           
  3128                           ;main.c: 1067: SerialMsg.xSum = 0;
  3129  0469  1283               	bcf	3,5	;RP0=0, select bank0
  3130  046A  1303               	bcf	3,6	;RP1=0, select bank0
  3131  046B  01EB               	clrf	_SerialMsg+15
  3132                           
  3133                           ;main.c: 1068: LCDMsg(3, 1, &SerialMsg.xData[0]);
  3134  046C  01A8               	clrf	LCDMsg@columna
  3135  046D  0AA8               	incf	LCDMsg@columna,f
  3136  046E  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3137  046F  00A9               	movwf	LCDMsg@msg
  3138  0470  3000               	movlw	0
  3139  0471  00AA               	movwf	LCDMsg@msg+1
  3140  0472  3003               	movlw	3
  3141  0473  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3142                           
  3143                           ;main.c: 1069: break;
  3144  0478  2D4D               	goto	l5191
  3145  0479                     l5155:	
  3146                           ;main.c: 1070: case 'K':
  3147                           
  3148                           
  3149                           ;main.c: 1071: SerialMsg.xSum = 0;
  3150  0479  1283               	bcf	3,5	;RP0=0, select bank0
  3151  047A  1303               	bcf	3,6	;RP1=0, select bank0
  3152  047B  01EB               	clrf	_SerialMsg+15
  3153                           
  3154                           ;main.c: 1072: LCDMsg(3, 20, &SerialMsg.xData[0]);
  3155  047C  3014               	movlw	20
  3156  047D  00C6               	movwf	??_main
  3157  047E  0846               	movf	??_main,w
  3158  047F  00A8               	movwf	LCDMsg@columna
  3159  0480  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3160  0481  00A9               	movwf	LCDMsg@msg
  3161  0482  3000               	movlw	0
  3162  0483  00AA               	movwf	LCDMsg@msg+1
  3163  0484  3003               	movlw	3
  3164  0485  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3165                           
  3166                           ;main.c: 1073: break;
  3167  048A  2D4D               	goto	l5191
  3168  048B                     l5159:	
  3169                           ;main.c: 1074: case 'M':
  3170                           
  3171                           
  3172                           ;main.c: 1075: SerialMsg.xSum = 0;
  3173  048B  1283               	bcf	3,5	;RP0=0, select bank0
  3174  048C  1303               	bcf	3,6	;RP1=0, select bank0
  3175  048D  01EB               	clrf	_SerialMsg+15
  3176                           
  3177                           ;main.c: 1076: LCDMsg(4, 1, &SerialMsg.xData[0]);
  3178  048E  01A8               	clrf	LCDMsg@columna
  3179  048F  0AA8               	incf	LCDMsg@columna,f
  3180  0490  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3181  0491  00A9               	movwf	LCDMsg@msg
  3182  0492  3000               	movlw	0
  3183  0493  00AA               	movwf	LCDMsg@msg+1
  3184  0494  3004               	movlw	4
  3185  0495  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3186                           
  3187                           ;main.c: 1077: break;
  3188  049A  2D4D               	goto	l5191
  3189  049B                     l5163:	
  3190                           ;main.c: 1078: case 'N':
  3191                           
  3192                           
  3193                           ;main.c: 1079: SerialMsg.xSum = 0;
  3194  049B  1283               	bcf	3,5	;RP0=0, select bank0
  3195  049C  1303               	bcf	3,6	;RP1=0, select bank0
  3196  049D  01EB               	clrf	_SerialMsg+15
  3197                           
  3198                           ;main.c: 1080: LCDMsg(4, 20, &SerialMsg.xData[0]);
  3199  049E  3014               	movlw	20
  3200  049F  00C6               	movwf	??_main
  3201  04A0  0846               	movf	??_main,w
  3202  04A1  00A8               	movwf	LCDMsg@columna
  3203  04A2  3061               	movlw	(low ((_SerialMsg| 0+5)))& (0+255)
  3204  04A3  00A9               	movwf	LCDMsg@msg
  3205  04A4  3000               	movlw	0
  3206  04A5  00AA               	movwf	LCDMsg@msg+1
  3207  04A6  3004               	movlw	4
  3208  04A7  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3209                           
  3210                           ;main.c: 1084: break;
  3211                           
  3212                           ;main.c: 1082: case 'Q':
  3213                           
  3214                           ;main.c: 1081: break;
  3215  04AC  2D4D               	goto	l5191
  3216  04AD                     l5167:	
  3217                           ;main.c: 1086: case 'L':
  3218                           
  3219                           
  3220                           ;main.c: 1087: if(SerialMsg.xData[0] > 0 && SerialMsg.xData[0] < 254)
  3221  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  3222  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  3223  04AF  0861               	movf	_SerialMsg+5,w
  3224  04B0  1903               	btfsc	3,2
  3225  04B1  2D4D               	goto	l5191
  3226  04B2  30FE               	movlw	254
  3227  04B3  0261               	subwf	_SerialMsg+5,w
  3228  04B4  1803               	skipnc
  3229  04B5  2D4D               	goto	l5191
  3230                           
  3231                           ;main.c: 1088: {
  3232                           ;main.c: 1089: IOPORTCONF.hw_address = SerialMsg.xData[0];
  3233  04B6  0861               	movf	_SerialMsg+5,w
  3234  04B7  00C6               	movwf	??_main
  3235  04B8  0846               	movf	??_main,w
  3236  04B9  1683               	bsf	3,5	;RP0=1, select bank3
  3237  04BA  1703               	bsf	3,6	;RP1=1, select bank3
  3238  04BB  0090               	movwf	_IOPORTCONF^(0+384)
  3239                           
  3240                           ;main.c: 1090: SaveConfigTimer = 1;
  3241  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  3242  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  3243  04BE  01D8               	clrf	_SaveConfigTimer
  3244  04BF  0AD8               	incf	_SaveConfigTimer,f
  3245                           
  3246                           ;main.c: 1091: SaveStatusTimer = 1;
  3247  04C0  01D7               	clrf	_SaveStatusTimer
  3248  04C1  0AD7               	incf	_SaveStatusTimer,f
  3249                           
  3250                           ;main.c: 1092: RebootTimer = 5;
  3251  04C2  3005               	movlw	5
  3252  04C3  00C6               	movwf	??_main
  3253  04C4  0846               	movf	??_main,w
  3254  04C5  00FC               	movwf	_RebootTimer
  3255                           
  3256                           ;main.c: 1093: Beep(20);
  3257  04C6  3014               	movlw	20
  3258  04C7  160A  158A  251B  120A  118A  	fcall	_Beep
  3259                           
  3260                           ;main.c: 1094: }
  3261                           ;main.c: 1095: break;
  3262  04CC  2D4D               	goto	l5191
  3263  04CD                     l351:	
  3264                           ;main.c: 1096: case 'R':
  3265                           
  3266                           
  3267                           ;main.c: 1097: SaveConfigTimer = 1;
  3268  04CD  01D8               	clrf	_SaveConfigTimer
  3269  04CE  0AD8               	incf	_SaveConfigTimer,f
  3270                           
  3271                           ;main.c: 1098: SaveStatusTimer = 1;
  3272  04CF  01D7               	clrf	_SaveStatusTimer
  3273  04D0  0AD7               	incf	_SaveStatusTimer,f
  3274                           
  3275                           ;main.c: 1099: RebootTimer = 5;
  3276  04D1  3005               	movlw	5
  3277  04D2  00C6               	movwf	??_main
  3278  04D3  0846               	movf	??_main,w
  3279  04D4  00FC               	movwf	_RebootTimer
  3280                           
  3281                           ;main.c: 1100: Beep(20);
  3282  04D5  3014               	movlw	20
  3283  04D6  160A  158A  251B  120A  118A  	fcall	_Beep
  3284                           
  3285                           ;main.c: 1101: break;
  3286  04DB  2D4D               	goto	l5191
  3287  04DC                     l5183:	
  3288                           ;main.c: 1103: case 'T':
  3289                           
  3290                           
  3291                           ;main.c: 1104: gFechaHora.fecha.anio = SerialMsg.xData[6];
  3292  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3293  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3294  04DE  0867               	movf	_SerialMsg+11,w
  3295  04DF  00C6               	movwf	??_main
  3296  04E0  0846               	movf	??_main,w
  3297  04E1  00CF               	movwf	_gFechaHora
  3298                           
  3299                           ;main.c: 1105: gFechaHora.fecha.mes = SerialMsg.xData[5];
  3300  04E2  0866               	movf	_SerialMsg+10,w
  3301  04E3  00C6               	movwf	??_main
  3302  04E4  0846               	movf	??_main,w
  3303  04E5  00D0               	movwf	_gFechaHora+1
  3304                           
  3305                           ;main.c: 1106: gFechaHora.fecha.dia = SerialMsg.xData[3];
  3306  04E6  0864               	movf	_SerialMsg+8,w
  3307  04E7  00C6               	movwf	??_main
  3308  04E8  0846               	movf	??_main,w
  3309  04E9  00D1               	movwf	_gFechaHora+2
  3310                           
  3311                           ;main.c: 1107: gFechaHora.fecha.fecha = SerialMsg.xData[4];
  3312  04EA  0865               	movf	_SerialMsg+9,w
  3313  04EB  00C6               	movwf	??_main
  3314  04EC  0846               	movf	??_main,w
  3315  04ED  00D2               	movwf	_gFechaHora+3
  3316                           
  3317                           ;main.c: 1108: gFechaHora.hora.horas = SerialMsg.xData[0];
  3318  04EE  0861               	movf	_SerialMsg+5,w
  3319  04EF  00C6               	movwf	??_main
  3320  04F0  0846               	movf	??_main,w
  3321  04F1  00D3               	movwf	_gFechaHora+4
  3322                           
  3323                           ;main.c: 1109: gFechaHora.hora.minutos = SerialMsg.xData[1];
  3324  04F2  0862               	movf	_SerialMsg+6,w
  3325  04F3  00C6               	movwf	??_main
  3326  04F4  0846               	movf	??_main,w
  3327  04F5  00D4               	movwf	_gFechaHora+5
  3328                           
  3329                           ;main.c: 1110: gFechaHora.hora.segundos = SerialMsg.xData[2];
  3330  04F6  0863               	movf	_SerialMsg+7,w
  3331  04F7  00C6               	movwf	??_main
  3332  04F8  0846               	movf	??_main,w
  3333  04F9  00D5               	movwf	_gFechaHora+6
  3334                           
  3335                           ;main.c: 1111: break;
  3336  04FA  2D4D               	goto	l5191
  3337  04FB                     l5185:	
  3338                           ;main.c: 1113: default:
  3339                           
  3340                           
  3341                           ;main.c: 1115: SerialMsg.xTyp = 'E';
  3342  04FB  3045               	movlw	69
  3343  04FC  00C6               	movwf	??_main
  3344  04FD  0846               	movf	??_main,w
  3345  04FE  00DC               	movwf	_SerialMsg
  3346                           
  3347                           ;main.c: 1117: }
  3348                           
  3349                           ;main.c: 1116: break;
  3350  04FF  2D4D               	goto	l5191
  3351  0500                     l5189:	
  3352  0500  0860               	movf	_SerialMsg+4,w
  3353                           
  3354                           ; Switch size 1, requested type "space"
  3355                           ; Number of cases is 25, Range of values is 51 to 84
  3356                           ; switch strategies available:
  3357                           ; Name         Instructions Cycles
  3358                           ; simple_byte           76    39 (average)
  3359                           ; direct_byte          113    11 (fixed)
  3360                           ; jumptable            263     9 (fixed)
  3361                           ;	Chosen strategy is simple_byte
  3362  0501  3A33               	xorlw	51	; case 51
  3363  0502  1903               	skipnz
  3364  0503  295C               	goto	l5019
  3365  0504  3A07               	xorlw	7	; case 52
  3366  0505  1903               	skipnz
  3367  0506  2D4D               	goto	l5191
  3368  0507  3A01               	xorlw	1	; case 53
  3369  0508  1903               	skipnz
  3370  0509  29A3               	goto	l5029
  3371  050A  3A03               	xorlw	3	; case 54
  3372  050B  1903               	skipnz
  3373  050C  29E4               	goto	l5045
  3374  050D  3A01               	xorlw	1	; case 55
  3375  050E  1903               	skipnz
  3376  050F  2A18               	goto	l5051
  3377  0510  3A0F               	xorlw	15	; case 56
  3378  0511  1903               	skipnz
  3379  0512  2A54               	goto	l5059
  3380  0513  3A79               	xorlw	121	; case 65
  3381  0514  1903               	skipnz
  3382  0515  2BC3               	goto	l5127
  3383  0516  3A03               	xorlw	3	; case 66
  3384  0517  1903               	skipnz
  3385  0518  2B1B               	goto	l5071
  3386  0519  3A01               	xorlw	1	; case 67
  3387  051A  1903               	skipnz
  3388  051B  2C1D               	goto	l5133
  3389  051C  3A07               	xorlw	7	; case 68
  3390  051D  1903               	skipnz
  3391  051E  2C25               	goto	l5135
  3392  051F  3A01               	xorlw	1	; case 69
  3393  0520  1903               	skipnz
  3394  0521  2C35               	goto	l5139
  3395  0522  3A03               	xorlw	3	; case 70
  3396  0523  1903               	skipnz
  3397  0524  2B48               	goto	l5091
  3398  0525  3A01               	xorlw	1	; case 71
  3399  0526  1903               	skipnz
  3400  0527  2C47               	goto	l5143
  3401  0528  3A0F               	xorlw	15	; case 72
  3402  0529  1903               	skipnz
  3403  052A  2C57               	goto	l5147
  3404  052B  3A01               	xorlw	1	; case 73
  3405  052C  1903               	skipnz
  3406  052D  2AF2               	goto	l5065
  3407  052E  3A03               	xorlw	3	; case 74
  3408  052F  1903               	skipnz
  3409  0530  2C69               	goto	l5151
  3410  0531  3A01               	xorlw	1	; case 75
  3411  0532  1903               	skipnz
  3412  0533  2C79               	goto	l5155
  3413  0534  3A07               	xorlw	7	; case 76
  3414  0535  1903               	skipnz
  3415  0536  2CAD               	goto	l5167
  3416  0537  3A01               	xorlw	1	; case 77
  3417  0538  1903               	skipnz
  3418  0539  2C8B               	goto	l5159
  3419  053A  3A03               	xorlw	3	; case 78
  3420  053B  1903               	skipnz
  3421  053C  2C9B               	goto	l5163
  3422  053D  3A01               	xorlw	1	; case 79
  3423  053E  1903               	skipnz
  3424  053F  2B79               	goto	l5107
  3425  0540  3A1F               	xorlw	31	; case 80
  3426  0541  1903               	skipnz
  3427  0542  2D4D               	goto	l5191
  3428  0543  3A01               	xorlw	1	; case 81
  3429  0544  1903               	skipnz
  3430  0545  2D4D               	goto	l5191
  3431  0546  3A03               	xorlw	3	; case 82
  3432  0547  1903               	skipnz
  3433  0548  2CCD               	goto	l351
  3434  0549  3A06               	xorlw	6	; case 84
  3435  054A  1903               	skipnz
  3436  054B  2CDC               	goto	l5183
  3437  054C  2CFB               	goto	l5185
  3438  054D                     l5191:	
  3439                           
  3440                           ;main.c: 1118: SerSendR(&SerialMsg);
  3441  054D  305C               	movlw	(low (_SerialMsg| 0))& (0+255)
  3442  054E  120A  158A  2001  120A  118A  	fcall	_SerSendR
  3443                           
  3444                           ;main.c: 1119: LastCntRcv = SerialMsg.xCnt;
  3445  0553  1283               	bcf	3,5	;RP0=0, select bank0
  3446  0554  1303               	bcf	3,6	;RP1=0, select bank0
  3447  0555  085F               	movf	_SerialMsg+3,w
  3448  0556  00C6               	movwf	??_main
  3449  0557  0846               	movf	??_main,w
  3450  0558  1683               	bsf	3,5	;RP0=1, select bank1
  3451  0559  1303               	bcf	3,6	;RP1=0, select bank1
  3452  055A  00E8               	movwf	_LastCntRcv^(0+128)
  3453                           
  3454                           ;main.c: 1120: }
  3455  055B  2DBD               	goto	l5219
  3456  055C                     l5195:	
  3457                           
  3458                           ;main.c: 1121: else if(SerialMsg.xTyp == 'R')
  3459  055C  3052               	movlw	82
  3460  055D  1283               	bcf	3,5	;RP0=0, select bank0
  3461  055E  065C               	xorwf	_SerialMsg,w
  3462  055F  1D03               	btfss	3,2
  3463  0560  2DBD               	goto	l5219
  3464                           
  3465                           ;main.c: 1122: {
  3466                           ;main.c: 1124: if( SerialMsg.xCnt == LastMsgSend.xCnt &&
  3467                           ;main.c: 1125: SerialMsg.xFcn == LastMsgSend.xFcn )
  3468  0561  085F               	movf	_SerialMsg+3,w
  3469  0562  1683               	bsf	3,5	;RP0=1, select bank3
  3470  0563  1703               	bsf	3,6	;RP1=1, select bank3
  3471  0564  063F               	xorwf	(_LastMsgSend^(0+384)+3),w
  3472  0565  1D03               	skipz
  3473  0566  2DBD               	goto	l5219
  3474  0567  1283               	bcf	3,5	;RP0=0, select bank0
  3475  0568  1303               	bcf	3,6	;RP1=0, select bank0
  3476  0569  0860               	movf	_SerialMsg+4,w
  3477  056A  1683               	bsf	3,5	;RP0=1, select bank3
  3478  056B  1703               	bsf	3,6	;RP1=1, select bank3
  3479  056C  0640               	xorwf	(_LastMsgSend^(0+384)+4),w
  3480  056D  1D03               	skipz
  3481  056E  2DBD               	goto	l5219
  3482                           
  3483                           ;main.c: 1126: {
  3484                           ;main.c: 1127: RetryMsg = 0;
  3485  056F  1283               	bcf	3,5	;RP0=0, select bank0
  3486  0570  1303               	bcf	3,6	;RP1=0, select bank0
  3487  0571  01D9               	clrf	_RetryMsg
  3488                           
  3489                           ;main.c: 1128: PauseMsg = 0;
  3490  0572  1683               	bsf	3,5	;RP0=1, select bank1
  3491  0573  1303               	bcf	3,6	;RP1=0, select bank1
  3492  0574  01E9               	clrf	_PauseMsg^(0+128)
  3493                           
  3494                           ;main.c: 1129: SerAck();
  3495  0575  160A  158A  2495  120A  118A  	fcall	_SerAck
  3496                           
  3497                           ;main.c: 1130: switch(SerialMsg.xFcn)
  3498  057A  2DB0               	goto	l5217
  3499  057B                     l5205:	
  3500                           ;main.c: 1131: {
  3501                           ;main.c: 1132: case '6':
  3502                           
  3503                           
  3504                           ;main.c: 1133: IOResetChanges(SerialMsg.xData[0], SerialMsg.xData[1]);
  3505  057B  1283               	bcf	3,5	;RP0=0, select bank0
  3506  057C  1303               	bcf	3,6	;RP1=0, select bank0
  3507  057D  0862               	movf	_SerialMsg+6,w
  3508  057E  00C6               	movwf	??_main
  3509  057F  0846               	movf	??_main,w
  3510  0580  00A0               	movwf	IOResetChanges@reset
  3511  0581  0861               	movf	_SerialMsg+5,w
  3512  0582  160A  158A  266F  120A  118A  	fcall	_IOResetChanges
  3513                           
  3514                           ;main.c: 1134: break;
  3515  0587  2DBD               	goto	l5219
  3516  0588                     l5207:	
  3517                           ;main.c: 1135: case '7':
  3518                           
  3519                           
  3520                           ;main.c: 1136: IOResetChanges(SerialMsg.xData[0]+2, SerialMsg.xData[1]);
  3521  0588  1283               	bcf	3,5	;RP0=0, select bank0
  3522  0589  1303               	bcf	3,6	;RP1=0, select bank0
  3523  058A  0862               	movf	_SerialMsg+6,w
  3524  058B  00C6               	movwf	??_main
  3525  058C  0846               	movf	??_main,w
  3526  058D  00A0               	movwf	IOResetChanges@reset
  3527  058E  0861               	movf	_SerialMsg+5,w
  3528  058F  3E02               	addlw	2
  3529  0590  160A  158A  266F  120A  118A  	fcall	_IOResetChanges
  3530                           
  3531                           ;main.c: 1137: break;
  3532  0595  2DBD               	goto	l5219
  3533  0596                     l361:	
  3534                           ;main.c: 1143: case 'P':
  3535                           
  3536                           
  3537                           ;main.c: 1144: if( !OnLineFlag)
  3538  0596  18FA               	btfsc	_OnLineFlag/(0+8),_OnLineFlag& (0+7)
  3539  0597  2DBD               	goto	l5219
  3540                           
  3541                           ;main.c: 1145: {
  3542                           ;main.c: 1146: OnLineFlag = 1;
  3543  0598  14FA               	bsf	_OnLineFlag/(0+8),_OnLineFlag& (0+7)
  3544                           
  3545                           ;main.c: 1147: Beep(5);
  3546  0599  3005               	movlw	5
  3547  059A  160A  158A  251B  120A  118A  	fcall	_Beep
  3548                           
  3549                           ;main.c: 1148: LCDMsg(3, 2, "Interface ON-Line");
  3550  059F  3002               	movlw	2
  3551  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3552  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3553  05A2  00C6               	movwf	??_main
  3554  05A3  0846               	movf	??_main,w
  3555  05A4  00A8               	movwf	LCDMsg@columna
  3556  05A5  3014               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3557  05A6  00A9               	movwf	LCDMsg@msg
  3558  05A7  3080               	movlw	128
  3559  05A8  00AA               	movwf	LCDMsg@msg+1
  3560  05A9  3003               	movlw	3
  3561  05AA  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3562                           
  3563                           ;main.c: 1156: }
  3564                           
  3565                           ;main.c: 1149: }
  3566                           ;main.c: 1150: break;
  3567  05AF  2DBD               	goto	l5219
  3568  05B0                     l5217:	
  3569  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3570  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3571  05B2  0860               	movf	_SerialMsg+4,w
  3572                           
  3573                           ; Switch size 1, requested type "space"
  3574                           ; Number of cases is 3, Range of values is 54 to 80
  3575                           ; switch strategies available:
  3576                           ; Name         Instructions Cycles
  3577                           ; simple_byte           10     6 (average)
  3578                           ; direct_byte           92    11 (fixed)
  3579                           ; jumptable            263     9 (fixed)
  3580                           ;	Chosen strategy is simple_byte
  3581  05B3  3A36               	xorlw	54	; case 54
  3582  05B4  1903               	skipnz
  3583  05B5  2D7B               	goto	l5205
  3584  05B6  3A01               	xorlw	1	; case 55
  3585  05B7  1903               	skipnz
  3586  05B8  2D88               	goto	l5207
  3587  05B9  3A67               	xorlw	103	; case 80
  3588  05BA  1903               	skipnz
  3589  05BB  2D96               	goto	l361
  3590  05BC  2DBD               	goto	l5219
  3591  05BD                     l5219:	
  3592                           
  3593                           ;main.c: 1157: }
  3594                           ;main.c: 1159: }
  3595                           ;main.c: 1160: }
  3596                           ;main.c: 1168: if( !PauseMsg)
  3597  05BD  1683               	bsf	3,5	;RP0=1, select bank1
  3598  05BE  1303               	bcf	3,6	;RP1=0, select bank1
  3599  05BF  0869               	movf	_PauseMsg^(0+128),w
  3600  05C0  1D03               	btfss	3,2
  3601  05C1  28B5               	goto	l272
  3602                           
  3603                           ;main.c: 1169: {
  3604                           ;main.c: 1170: if(OnLineFlag)
  3605  05C2  1CFA               	btfss	_OnLineFlag/(0+8),_OnLineFlag& (0+7)
  3606  05C3  2EAA               	goto	l5281
  3607                           
  3608                           ;main.c: 1171: {
  3609                           ;main.c: 1172: if(RetryMsg)
  3610  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  3611  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  3612  05C6  0859               	movf	_RetryMsg,w
  3613  05C7  1903               	btfsc	3,2
  3614  05C8  2E22               	goto	l5245
  3615                           
  3616                           ;main.c: 1173: {
  3617                           ;main.c: 1175: RetryMsg--;
  3618  05C9  3001               	movlw	1
  3619  05CA  02D9               	subwf	_RetryMsg,f
  3620                           
  3621                           ;main.c: 1176: if( !RetryMsg)
  3622  05CB  0859               	movf	_RetryMsg,w
  3623  05CC  1D03               	btfss	3,2
  3624  05CD  2E13               	goto	l5241
  3625                           
  3626                           ;main.c: 1177: {
  3627                           ;main.c: 1179: SerTimeOut();
  3628  05CE  160A  158A  249E  120A  118A  	fcall	_SerTimeOut
  3629                           
  3630                           ;main.c: 1180: OnLineFlag = 0;
  3631  05D3  10FA               	bcf	_OnLineFlag/(0+8),_OnLineFlag& (0+7)
  3632                           
  3633                           ;main.c: 1181: LCDMsg(3, 2, "Interface OFF-Line");
  3634  05D4  3002               	movlw	2
  3635  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  3636  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  3637  05D7  00C6               	movwf	??_main
  3638  05D8  0846               	movf	??_main,w
  3639  05D9  00A8               	movwf	LCDMsg@columna
  3640  05DA  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  3641  05DB  00A9               	movwf	LCDMsg@msg
  3642  05DC  3080               	movlw	128
  3643  05DD  00AA               	movwf	LCDMsg@msg+1
  3644  05DE  3003               	movlw	3
  3645  05DF  160A  118A  2004  120A  118A  	fcall	_LCDMsg
  3646                           
  3647                           ;main.c: 1183: switch(LastMsgSend.xFcn)
  3648  05E4  2E08               	goto	l5239
  3649  05E5                     l5233:	
  3650                           ;main.c: 1184: {
  3651                           ;main.c: 1185: case '6':
  3652                           
  3653                           
  3654                           ;main.c: 1186: IOResetChanges(LastMsgSend.xData[0], LastMsgSend.xData[1]);
  3655  05E5  1683               	bsf	3,5	;RP0=1, select bank3
  3656  05E6  1703               	bsf	3,6	;RP1=1, select bank3
  3657  05E7  0842               	movf	(_LastMsgSend^(0+384)+6),w
  3658  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3659  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3660  05EA  00C6               	movwf	??_main
  3661  05EB  0846               	movf	??_main,w
  3662  05EC  00A0               	movwf	IOResetChanges@reset
  3663  05ED  1683               	bsf	3,5	;RP0=1, select bank3
  3664  05EE  1703               	bsf	3,6	;RP1=1, select bank3
  3665  05EF  0841               	movf	(_LastMsgSend^(0+384)+5),w
  3666  05F0  160A  158A  266F  120A  118A  	fcall	_IOResetChanges
  3667                           
  3668                           ;main.c: 1187: break;
  3669  05F5  28B5               	goto	l272
  3670  05F6                     l5235:	
  3671                           ;main.c: 1188: case '7':
  3672                           
  3673                           
  3674                           ;main.c: 1189: IOResetChanges(LastMsgSend.xData[0]+2, LastMsgSend.xData[1]);
  3675  05F6  1683               	bsf	3,5	;RP0=1, select bank3
  3676  05F7  1703               	bsf	3,6	;RP1=1, select bank3
  3677  05F8  0842               	movf	(_LastMsgSend^(0+384)+6),w
  3678  05F9  1283               	bcf	3,5	;RP0=0, select bank0
  3679  05FA  1303               	bcf	3,6	;RP1=0, select bank0
  3680  05FB  00C6               	movwf	??_main
  3681  05FC  0846               	movf	??_main,w
  3682  05FD  00A0               	movwf	IOResetChanges@reset
  3683  05FE  1683               	bsf	3,5	;RP0=1, select bank3
  3684  05FF  1703               	bsf	3,6	;RP1=1, select bank3
  3685  0600  0841               	movf	(_LastMsgSend^(0+384)+5),w
  3686  0601  3E02               	addlw	2
  3687  0602  160A  158A  266F  120A  118A  	fcall	_IOResetChanges
  3688                           
  3689                           ;main.c: 1201: }
  3690                           
  3691                           ;main.c: 1190: break;
  3692  0607  28B5               	goto	l272
  3693  0608                     l5239:	
  3694  0608  1683               	bsf	3,5	;RP0=1, select bank3
  3695  0609  1703               	bsf	3,6	;RP1=1, select bank3
  3696  060A  0840               	movf	(_LastMsgSend^(0+384)+4),w
  3697                           
  3698                           ; Switch size 1, requested type "space"
  3699                           ; Number of cases is 2, Range of values is 54 to 55
  3700                           ; switch strategies available:
  3701                           ; Name         Instructions Cycles
  3702                           ; simple_byte            7     4 (average)
  3703                           ; direct_byte           17    11 (fixed)
  3704                           ; jumptable            263     9 (fixed)
  3705                           ;	Chosen strategy is simple_byte
  3706  060B  3A36               	xorlw	54	; case 54
  3707  060C  1903               	skipnz
  3708  060D  2DE5               	goto	l5233
  3709  060E  3A01               	xorlw	1	; case 55
  3710  060F  1903               	skipnz
  3711  0610  2DF6               	goto	l5235
  3712  0611  28B5               	goto	l272
  3713                           
  3714                           ;main.c: 1202: }
  3715  0612  28B5               	goto	l272
  3716  0613                     l5241:	
  3717                           
  3718                           ;main.c: 1203: else
  3719                           ;main.c: 1204: {
  3720                           ;main.c: 1206: SerSendQ(&LastMsgSend);
  3721  0613  30BC               	movlw	(low (_LastMsgSend| (0+256)))& (0+255)
  3722  0614  160A  118A  20C4  120A  118A  	fcall	_SerSendQ
  3723                           
  3724                           ;main.c: 1207: PauseMsg = 2;
  3725  0619  3002               	movlw	2
  3726  061A  1283               	bcf	3,5	;RP0=0, select bank0
  3727  061B  1303               	bcf	3,6	;RP1=0, select bank0
  3728  061C  00C6               	movwf	??_main
  3729  061D  0846               	movf	??_main,w
  3730  061E  1683               	bsf	3,5	;RP0=1, select bank1
  3731  061F  1303               	bcf	3,6	;RP1=0, select bank1
  3732  0620  00E9               	movwf	_PauseMsg^(0+128)
  3733                           
  3734                           ;main.c: 1208: }
  3735                           ;main.c: 1209: }
  3736  0621  28B5               	goto	l272
  3737  0622                     l5245:	
  3738                           
  3739                           ;main.c: 1210: else
  3740                           ;main.c: 1211: {
  3741                           ;main.c: 1212: for(i = 0; i < 4; i++)
  3742  0622  1283               	bcf	3,5	;RP0=0, select bank0
  3743  0623  01CE               	clrf	main@i
  3744  0624                     L6:	
  3745  0624  3004               	movlw	4
  3746  0625  024E               	subwf	main@i,w
  3747  0626  1803               	btfsc	3,0
  3748  0627  28B5               	goto	l272
  3749                           
  3750                           ;main.c: 1213: {
  3751                           ;main.c: 1214: if(IOChanges('1' + i))
  3752  0628  084E               	movf	main@i,w
  3753  0629  3E31               	addlw	49
  3754  062A  160A  158A  2637  120A  118A  	fcall	_IOChanges
  3755  062F  3A00               	xorlw	0
  3756  0630  1903               	skipnz
  3757  0631  2EA3               	goto	l5277
  3758                           
  3759                           ;main.c: 1215: {
  3760                           ;main.c: 1216: LastMsgSend.xFcn = (i < 2)?'6':'7';
  3761  0632  3002               	movlw	2
  3762  0633  1283               	bcf	3,5	;RP0=0, select bank0
  3763  0634  1303               	bcf	3,6	;RP1=0, select bank0
  3764  0635  024E               	subwf	main@i,w
  3765  0636  1C03               	skipc
  3766  0637  2E3A               	goto	l5257
  3767  0638  3037               	movlw	55
  3768  0639  2E3B               	goto	L3
  3769  063A                     l5257:	
  3770  063A  3036               	movlw	54
  3771  063B                     L3:	
  3772  063B  00CA               	movwf	_main$354
  3773  063C  3000               	movlw	0
  3774  063D  00CB               	movwf	_main$354+1
  3775  063E  084A               	movf	_main$354,w
  3776  063F  00C6               	movwf	??_main
  3777  0640  0846               	movf	??_main,w
  3778  0641  1683               	bsf	3,5	;RP0=1, select bank3
  3779  0642  1703               	bsf	3,6	;RP1=1, select bank3
  3780  0643  00C0               	movwf	(_LastMsgSend^(0+384)+4)
  3781                           
  3782                           ;main.c: 1217: LastMsgSend.xData[0] = (i & 0x01)?'2':'1';
  3783  0644  1283               	bcf	3,5	;RP0=0, select bank0
  3784  0645  1303               	bcf	3,6	;RP1=0, select bank0
  3785  0646  184E               	btfsc	main@i,0
  3786  0647  2E4A               	goto	l5263
  3787  0648  3031               	movlw	49
  3788  0649  2E4B               	goto	L4
  3789  064A                     l5263:	
  3790  064A  3032               	movlw	50
  3791  064B                     L4:	
  3792  064B  00CC               	movwf	_main$355
  3793  064C  3000               	movlw	0
  3794  064D  00CD               	movwf	_main$355+1
  3795  064E  084C               	movf	_main$355,w
  3796  064F  00C6               	movwf	??_main
  3797  0650  0846               	movf	??_main,w
  3798  0651  1683               	bsf	3,5	;RP0=1, select bank3
  3799  0652  1703               	bsf	3,6	;RP1=1, select bank3
  3800  0653  00C1               	movwf	(_LastMsgSend^(0+384)+5)
  3801                           
  3802                           ;main.c: 1218: LastMsgSend.xData[1] = IOPORT.io[i].status;
  3803  0654  3003               	movlw	3
  3804  0655  1283               	bcf	3,5	;RP0=0, select bank0
  3805  0656  1303               	bcf	3,6	;RP1=0, select bank0
  3806  0657  00C6               	movwf	??_main
  3807  0658  0846               	movf	??_main,w
  3808  0659  00A0               	movwf	___bmul@multiplicand
  3809  065A  084E               	movf	main@i,w
  3810  065B  120A  118A  27E7  120A  118A  	fcall	___bmul
  3811  0660  3EA0               	addlw	(low (_IOPORT| 0))& (0+255)
  3812  0661  0084               	movwf	4
  3813  0662  1383               	bcf	3,7	;select IRP bank1
  3814  0663  0800               	movf	0,w
  3815  0664  1283               	bcf	3,5	;RP0=0, select bank0
  3816  0665  1303               	bcf	3,6	;RP1=0, select bank0
  3817  0666  00C7               	movwf	??_main+1
  3818  0667  0847               	movf	??_main+1,w
  3819  0668  1683               	bsf	3,5	;RP0=1, select bank3
  3820  0669  1703               	bsf	3,6	;RP1=1, select bank3
  3821  066A  00C2               	movwf	(_LastMsgSend^(0+384)+6)
  3822                           
  3823                           ;main.c: 1219: LastMsgSend.xData[2] = IOPORTCONF.io[i].mascara_notif;
  3824  066B  1283               	bcf	3,5	;RP0=0, select bank0
  3825  066C  1303               	bcf	3,6	;RP1=0, select bank0
  3826  066D  084E               	movf	main@i,w
  3827  066E  00C6               	movwf	??_main
  3828  066F  3001               	movlw	1
  3829  0670                     u5585:	
  3830  0670  1003               	clrc
  3831  0671  0DC6               	rlf	??_main,f
  3832  0672  3EFF               	addlw	-1
  3833  0673  1D03               	skipz
  3834  0674  2E70               	goto	u5585
  3835  0675  3091               	movlw	(low ((_IOPORTCONF| (0+256)+1)))& (0+255)
  3836  0676  0746               	addwf	??_main,w
  3837  0677  00C7               	movwf	??_main+1
  3838  0678  0A47               	incf	??_main+1,w
  3839  0679  0084               	movwf	4
  3840  067A  1783               	bsf	3,7	;select IRP bank3
  3841  067B  0800               	movf	0,w
  3842  067C  00C8               	movwf	??_main+2
  3843  067D  0848               	movf	??_main+2,w
  3844  067E  1683               	bsf	3,5	;RP0=1, select bank3
  3845  067F  1703               	bsf	3,6	;RP1=1, select bank3
  3846  0680  00C3               	movwf	(_LastMsgSend^(0+384)+7)
  3847                           
  3848                           ;main.c: 1220: LastMsgSend.xData[3] = IOPORTCONF.io[i].mascara_seguidor;
  3849  0681  1283               	bcf	3,5	;RP0=0, select bank0
  3850  0682  1303               	bcf	3,6	;RP1=0, select bank0
  3851  0683  084E               	movf	main@i,w
  3852  0684  00C6               	movwf	??_main
  3853  0685  0746               	addwf	??_main,w
  3854  0686  3E91               	addlw	(low ((_IOPORTCONF| (0+256)+1)))& (0+255)
  3855  0687  0084               	movwf	4
  3856  0688  0800               	movf	0,w
  3857  0689  00C7               	movwf	??_main+1
  3858  068A  0847               	movf	??_main+1,w
  3859  068B  1683               	bsf	3,5	;RP0=1, select bank3
  3860  068C  1703               	bsf	3,6	;RP1=1, select bank3
  3861  068D  00C4               	movwf	(_LastMsgSend^(0+384)+8)
  3862                           
  3863                           ;main.c: 1221: PauseMsg = 2;
  3864  068E  3002               	movlw	2
  3865  068F  1283               	bcf	3,5	;RP0=0, select bank0
  3866  0690  1303               	bcf	3,6	;RP1=0, select bank0
  3867  0691  00C6               	movwf	??_main
  3868  0692  0846               	movf	??_main,w
  3869  0693  1683               	bsf	3,5	;RP0=1, select bank1
  3870  0694  1303               	bcf	3,6	;RP1=0, select bank1
  3871  0695  00E9               	movwf	_PauseMsg^(0+128)
  3872                           
  3873                           ;main.c: 1222: RetryMsg = 10;
  3874  0696  300A               	movlw	10
  3875  0697  1283               	bcf	3,5	;RP0=0, select bank0
  3876  0698  1303               	bcf	3,6	;RP1=0, select bank0
  3877  0699  00C6               	movwf	??_main
  3878  069A  0846               	movf	??_main,w
  3879  069B  00D9               	movwf	_RetryMsg
  3880                           
  3881                           ;main.c: 1223: SerSendQ(&LastMsgSend);
  3882  069C  30BC               	movlw	(low (_LastMsgSend| (0+256)))& (0+255)
  3883  069D  160A  118A  20C4  120A  118A  	fcall	_SerSendQ
  3884                           
  3885                           ;main.c: 1224: break;
  3886  06A2  28B5               	goto	l272
  3887  06A3                     l5277:	
  3888  06A3  3001               	movlw	1
  3889  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  3890  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  3891  06A6  00C6               	movwf	??_main
  3892  06A7  0846               	movf	??_main,w
  3893  06A8  07CE               	addwf	main@i,f
  3894  06A9  2E24               	goto	L6
  3895  06AA                     l5281:	
  3896                           ;main.c: 1225: }
  3897                           ;main.c: 1265: }
  3898                           ;main.c: 1266: }
  3899                           ;main.c: 1267: }
  3900                           
  3901                           
  3902                           ;main.c: 1268: else
  3903                           ;main.c: 1269: {
  3904                           ;main.c: 1270: LastMsgSend.xFcn = 'P';
  3905  06AA  3050               	movlw	80
  3906  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3907  06AC  00C6               	movwf	??_main
  3908  06AD  0846               	movf	??_main,w
  3909  06AE  1683               	bsf	3,5	;RP0=1, select bank3
  3910  06AF  1703               	bsf	3,6	;RP1=1, select bank3
  3911  06B0  00C0               	movwf	(_LastMsgSend^(0+384)+4)
  3912                           
  3913                           ;main.c: 1271: LastMsgSend.xData[0] = 0x02;
  3914  06B1  3002               	movlw	2
  3915  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  3916  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  3917  06B4  00C6               	movwf	??_main
  3918  06B5  0846               	movf	??_main,w
  3919  06B6  1683               	bsf	3,5	;RP0=1, select bank3
  3920  06B7  1703               	bsf	3,6	;RP1=1, select bank3
  3921  06B8  00C1               	movwf	(_LastMsgSend^(0+384)+5)
  3922                           
  3923                           ;main.c: 1272: LastMsgSend.xData[1] = 0x01;
  3924  06B9  01C2               	clrf	(_LastMsgSend^(0+384)+6)
  3925  06BA  0AC2               	incf	(_LastMsgSend^(0+384)+6),f
  3926                           
  3927                           ;main.c: 1273: LastMsgSend.xData[2] = 0x02;
  3928  06BB  3002               	movlw	2
  3929  06BC  1283               	bcf	3,5	;RP0=0, select bank0
  3930  06BD  1303               	bcf	3,6	;RP1=0, select bank0
  3931  06BE  00C6               	movwf	??_main
  3932  06BF  0846               	movf	??_main,w
  3933  06C0  1683               	bsf	3,5	;RP0=1, select bank3
  3934  06C1  1703               	bsf	3,6	;RP1=1, select bank3
  3935  06C2  00C3               	movwf	(_LastMsgSend^(0+384)+7)
  3936                           
  3937                           ;main.c: 1274: LastMsgSend.xData[3] = 0x03;
  3938  06C3  3003               	movlw	3
  3939  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  3940  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  3941  06C6  00C6               	movwf	??_main
  3942  06C7  0846               	movf	??_main,w
  3943  06C8  1683               	bsf	3,5	;RP0=1, select bank3
  3944  06C9  1703               	bsf	3,6	;RP1=1, select bank3
  3945  06CA  00C4               	movwf	(_LastMsgSend^(0+384)+8)
  3946                           
  3947                           ;main.c: 1275: LastMsgSend.xData[3] = 0x00;
  3948  06CB  01C4               	clrf	(_LastMsgSend^(0+384)+8)
  3949                           
  3950                           ;main.c: 1276: SerSendQ(&LastMsgSend);
  3951  06CC  30BC               	movlw	(low (_LastMsgSend| (0+256)))& (0+255)
  3952  06CD  160A  118A  20C4  120A  118A  	fcall	_SerSendQ
  3953                           
  3954                           ;main.c: 1277: PauseMsg = 15;
  3955  06D2  300F               	movlw	15
  3956  06D3  1283               	bcf	3,5	;RP0=0, select bank0
  3957  06D4  1303               	bcf	3,6	;RP1=0, select bank0
  3958  06D5  00C6               	movwf	??_main
  3959  06D6  0846               	movf	??_main,w
  3960  06D7  1683               	bsf	3,5	;RP0=1, select bank1
  3961  06D8  1303               	bcf	3,6	;RP1=0, select bank1
  3962  06D9  00E9               	movwf	_PauseMsg^(0+128)
  3963                           
  3964                           ;main.c: 1278: RetryMsg = 0;
  3965  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  3966  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  3967  06DC  01D9               	clrf	_RetryMsg
  3968                           
  3969                           ;main.c: 1279: Beep(0);
  3970  06DD  3000               	movlw	0
  3971  06DE  160A  158A  251B  120A  118A  	fcall	_Beep
  3972  06E3  28B5               	goto	l272
  3973  06E4                     __end_of_main:	
  3974                           
  3975                           	psect	text1
  3976  1DA0                     __ptext1:	
  3977 ;; *************** function _minipow2 *****************
  3978 ;; Defined at:
  3979 ;;		line 26 in file "minipow.c"
  3980 ;; Parameters:    Size  Location     Type
  3981 ;;  pot             1    wreg     unsigned char 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  pot             1    0[BANK0 ] unsigned char 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  1    wreg      unsigned char 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3993 ;;      Params:         0       0       0       0       0
  3994 ;;      Locals:         0       1       0       0       0
  3995 ;;      Temps:          0       0       0       0       0
  3996 ;;      Totals:         0       1       0       0       0
  3997 ;;Total ram usage:        1 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    3
  4000 ;; This function calls:
  4001 ;;		Nothing
  4002 ;; This function is called by:
  4003 ;;		_main
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function _minipow2
  4009  1DA0                     _minipow2:	
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in _minipow2: [wreg-fsr0h+status,2+status,0]
  4013                           ;minipow2@pot stored from wreg
  4014  1DA0  1283               	bcf	3,5	;RP0=0, select bank0
  4015  1DA1  1303               	bcf	3,6	;RP1=0, select bank0
  4016  1DA2  00A0               	movwf	minipow2@pot
  4017                           
  4018                           ;minipow.c: 28: switch(pot)
  4019  1DA3  2DB6               	goto	l4707
  4020  1DA4                     l4669:	
  4021                           ;minipow.c: 29: {
  4022                           ;minipow.c: 30: case 0: return 1;
  4023                           
  4024  1DA4  3001               	movlw	1
  4025  1DA5  0008               	return
  4026  1DA6                     l4673:	
  4027                           ;minipow.c: 31: case 1: return 2;
  4028                           
  4029  1DA6  3002               	movlw	2
  4030  1DA7  0008               	return
  4031  1DA8                     l4677:	
  4032                           ;minipow.c: 32: case 2: return 4;
  4033                           
  4034  1DA8  3004               	movlw	4
  4035  1DA9  0008               	return
  4036  1DAA                     l4681:	
  4037                           ;minipow.c: 33: case 3: return 8;
  4038                           
  4039  1DAA  3008               	movlw	8
  4040  1DAB  0008               	return
  4041  1DAC                     l4685:	
  4042                           ;minipow.c: 34: case 4: return 16;
  4043                           
  4044  1DAC  3010               	movlw	16
  4045  1DAD  0008               	return
  4046  1DAE                     l4689:	
  4047                           ;minipow.c: 35: case 5: return 32;
  4048                           
  4049  1DAE  3020               	movlw	32
  4050  1DAF  0008               	return
  4051  1DB0                     l4693:	
  4052                           ;minipow.c: 36: case 6: return 64;
  4053                           
  4054  1DB0  3040               	movlw	64
  4055  1DB1  0008               	return
  4056  1DB2                     l4697:	
  4057                           ;minipow.c: 37: case 7: return 128;
  4058                           
  4059  1DB2  3080               	movlw	128
  4060  1DB3  0008               	return
  4061  1DB4                     l4701:	
  4062                           ;minipow.c: 38: default: return 0;
  4063                           
  4064  1DB4  3000               	movlw	0
  4065                           
  4066                           ;minipow.c: 39: }
  4067  1DB5  0008               	return
  4068  1DB6                     l4707:	
  4069  1DB6  0820               	movf	minipow2@pot,w
  4070                           
  4071                           ; Switch size 1, requested type "space"
  4072                           ; Number of cases is 8, Range of values is 0 to 7
  4073                           ; switch strategies available:
  4074                           ; Name         Instructions Cycles
  4075                           ; simple_byte           25    13 (average)
  4076                           ; direct_byte           32     8 (fixed)
  4077                           ; jumptable            260     6 (fixed)
  4078                           ;	Chosen strategy is simple_byte
  4079  1DB7  3A00               	xorlw	0	; case 0
  4080  1DB8  1903               	skipnz
  4081  1DB9  2DA4               	goto	l4669
  4082  1DBA  3A01               	xorlw	1	; case 1
  4083  1DBB  1903               	skipnz
  4084  1DBC  2DA6               	goto	l4673
  4085  1DBD  3A03               	xorlw	3	; case 2
  4086  1DBE  1903               	skipnz
  4087  1DBF  2DA8               	goto	l4677
  4088  1DC0  3A01               	xorlw	1	; case 3
  4089  1DC1  1903               	skipnz
  4090  1DC2  2DAA               	goto	l4681
  4091  1DC3  3A07               	xorlw	7	; case 4
  4092  1DC4  1903               	skipnz
  4093  1DC5  2DAC               	goto	l4685
  4094  1DC6  3A01               	xorlw	1	; case 5
  4095  1DC7  1903               	skipnz
  4096  1DC8  2DAE               	goto	l4689
  4097  1DC9  3A03               	xorlw	3	; case 6
  4098  1DCA  1903               	skipnz
  4099  1DCB  2DB0               	goto	l4693
  4100  1DCC  3A01               	xorlw	1	; case 7
  4101  1DCD  1903               	skipnz
  4102  1DCE  2DB2               	goto	l4697
  4103  1DCF  2DB4               	goto	l4701
  4104  1DD0  0008               	return
  4105  1DD1                     __end_of_minipow2:	
  4106                           
  4107                           	psect	text2
  4108  07E7                     __ptext2:	
  4109 ;; *************** function ___bmul *****************
  4110 ;; Defined at:
  4111 ;;		line 4 in file "/opt/microchip/xc8/v1.44/sources/common/Umul8.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;  multiplier      1    wreg     unsigned char 
  4114 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  multiplier      1    3[BANK0 ] unsigned char 
  4117 ;;  product         1    2[BANK0 ] unsigned char 
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      unsigned char 
  4120 ;; Registers used:
  4121 ;;		wreg, status,2, status,0
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4127 ;;      Params:         0       1       0       0       0
  4128 ;;      Locals:         0       2       0       0       0
  4129 ;;      Temps:          0       1       0       0       0
  4130 ;;      Totals:         0       4       0       0       0
  4131 ;;Total ram usage:        4 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    3
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_main
  4138 ;; This function uses a non-reentrant model
  4139 ;;
  4140                           
  4141                           
  4142                           ;psect for function ___bmul
  4143  07E7                     ___bmul:	
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4147                           ;___bmul@multiplier stored from wreg
  4148  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  4149  07E8  1303               	bcf	3,6	;RP1=0, select bank0
  4150  07E9  00A3               	movwf	___bmul@multiplier
  4151  07EA  01A2               	clrf	___bmul@product
  4152  07EB                     l4817:	
  4153  07EB  1C23               	btfss	___bmul@multiplier,0
  4154  07EC  2FF1               	goto	l4821
  4155  07ED  0820               	movf	___bmul@multiplicand,w
  4156  07EE  00A1               	movwf	??___bmul
  4157  07EF  0821               	movf	??___bmul,w
  4158  07F0  07A2               	addwf	___bmul@product,f
  4159  07F1                     l4821:	
  4160  07F1  1003               	clrc
  4161  07F2  0DA0               	rlf	___bmul@multiplicand,f
  4162  07F3  1003               	clrc
  4163  07F4  0CA3               	rrf	___bmul@multiplier,f
  4164  07F5  0823               	movf	___bmul@multiplier,w
  4165  07F6  1D03               	btfss	3,2
  4166  07F7  2FEB               	goto	l4817
  4167  07F8  0822               	movf	___bmul@product,w
  4168  07F9  0008               	return
  4169  07FA                     __end_of___bmul:	
  4170                           
  4171                           	psect	text3
  4172  1CB3                     __ptext3:	
  4173 ;; *************** function _SerTimer *****************
  4174 ;; Defined at:
  4175 ;;		line 204 in file "serial.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;		None
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg, status,2, status,0
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4189 ;;      Params:         0       0       0       0       0
  4190 ;;      Locals:         0       0       0       0       0
  4191 ;;      Temps:          0       0       0       0       0
  4192 ;;      Totals:         0       0       0       0       0
  4193 ;;Total ram usage:        0 bytes
  4194 ;; Hardware stack levels used:    1
  4195 ;; Hardware stack levels required when called:    3
  4196 ;; This function calls:
  4197 ;;		Nothing
  4198 ;; This function is called by:
  4199 ;;		_main
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           
  4204                           ;psect for function _SerTimer
  4205  1CB3                     _SerTimer:	
  4206                           
  4207                           ;serial.c: 206: if(SerTimerCount)
  4208                           
  4209                           ;incstack = 0
  4210                           ; Regs used in _SerTimer: [wreg+status,2+status,0]
  4211  1CB3  087B               	movf	_SerTimerCount,w
  4212  1CB4  1903               	btfsc	3,2
  4213  1CB5  0008               	return
  4214                           
  4215                           ;serial.c: 207: {
  4216                           ;serial.c: 208: SerTimerCount--;
  4217  1CB6  3001               	movlw	1
  4218  1CB7  02FB               	subwf	_SerTimerCount,f
  4219                           
  4220                           ;serial.c: 209: if( !SerTimerCount)
  4221  1CB8  087B               	movf	_SerTimerCount,w
  4222  1CB9  1D03               	btfss	3,2
  4223  1CBA  0008               	return
  4224                           
  4225                           ;serial.c: 210: {
  4226                           ;serial.c: 211: SerRxBufferIndex = 0;
  4227  1CBB  1283               	bcf	3,5	;RP0=0, select bank0
  4228  1CBC  1303               	bcf	3,6	;RP1=0, select bank0
  4229  1CBD  01D6               	clrf	_SerRxBufferIndex
  4230  1CBE  0008               	return
  4231  1CBF                     __end_of_SerTimer:	
  4232                           
  4233                           	psect	text4
  4234  1C9E                     __ptext4:	
  4235 ;; *************** function _SerTimeOut *****************
  4236 ;; Defined at:
  4237 ;;		line 221 in file "serial.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;                  1    wreg      void 
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, status,0
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : 0/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4251 ;;      Params:         0       0       0       0       0
  4252 ;;      Locals:         0       0       0       0       0
  4253 ;;      Temps:          0       1       0       0       0
  4254 ;;      Totals:         0       1       0       0       0
  4255 ;;Total ram usage:        1 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:    3
  4258 ;; This function calls:
  4259 ;;		Nothing
  4260 ;; This function is called by:
  4261 ;;		_main
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           
  4266                           ;psect for function _SerTimeOut
  4267  1C9E                     _SerTimeOut:	
  4268                           
  4269                           ;serial.c: 223: SerMsgCount++;
  4270                           
  4271                           ;incstack = 0
  4272                           ; Regs used in _SerTimeOut: [wreg+status,2+status,0]
  4273  1C9E  3001               	movlw	1
  4274  1C9F  1283               	bcf	3,5	;RP0=0, select bank0
  4275  1CA0  1303               	bcf	3,6	;RP1=0, select bank0
  4276  1CA1  00A0               	movwf	??_SerTimeOut
  4277  1CA2  0820               	movf	??_SerTimeOut,w
  4278  1CA3  1683               	bsf	3,5	;RP0=1, select bank1
  4279  1CA4  1303               	bcf	3,6	;RP1=0, select bank1
  4280  1CA5  07E6               	addwf	_SerMsgCount^(0+128),f
  4281  1CA6  0008               	return
  4282  1CA7                     __end_of_SerTimeOut:	
  4283                           
  4284                           	psect	text5
  4285  1C62                     __ptext5:	
  4286 ;; *************** function _SerTask *****************
  4287 ;; Defined at:
  4288 ;;		line 194 in file "serial.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;		None
  4291 ;; Auto vars:     Size  Location     Type
  4292 ;;		None
  4293 ;; Return value:  Size  Location     Type
  4294 ;;                  1    wreg      void 
  4295 ;; Registers used:
  4296 ;;		None
  4297 ;; Tracked objects:
  4298 ;;		On entry : 0/0
  4299 ;;		On exit  : 0/0
  4300 ;;		Unchanged: 0/0
  4301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4302 ;;      Params:         0       0       0       0       0
  4303 ;;      Locals:         0       0       0       0       0
  4304 ;;      Temps:          0       0       0       0       0
  4305 ;;      Totals:         0       0       0       0       0
  4306 ;;Total ram usage:        0 bytes
  4307 ;; Hardware stack levels used:    1
  4308 ;; Hardware stack levels required when called:    3
  4309 ;; This function calls:
  4310 ;;		Nothing
  4311 ;; This function is called by:
  4312 ;;		_main
  4313 ;; This function uses a non-reentrant model
  4314 ;;
  4315                           
  4316                           
  4317                           ;psect for function _SerTask
  4318  1C62                     _SerTask:	
  4319                           
  4320                           ;serial.c: 196: if(OERR)
  4321                           
  4322                           ;incstack = 0
  4323                           ; Regs used in _SerTask: []
  4324  1C62  1283               	bcf	3,5	;RP0=0, select bank0
  4325  1C63  1303               	bcf	3,6	;RP1=0, select bank0
  4326  1C64  1C98               	btfss	24,1	;volatile
  4327  1C65  0008               	return
  4328                           
  4329                           ;serial.c: 197: {
  4330                           ;serial.c: 198: CREN = 0;
  4331  1C66  1218               	bcf	24,4	;volatile
  4332                           
  4333                           ;serial.c: 199: CREN = 1;
  4334  1C67  1618               	bsf	24,4	;volatile
  4335  1C68  0008               	return
  4336  1C69                     __end_of_SerTask:	
  4337                           
  4338                           	psect	text6
  4339  0801                     __ptext6:	
  4340 ;; *************** function _SerSendR *****************
  4341 ;; Defined at:
  4342 ;;		line 98 in file "serial.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  msg             1    wreg     PTR struct _serial_msg
  4345 ;;		 -> SerialMsg(16), 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  msg             1    6[BANK0 ] PTR struct _serial_msg
  4348 ;;		 -> SerialMsg(16), 
  4349 ;;  i               2    4[BANK0 ] int 
  4350 ;;  p               1    3[BANK0 ] PTR unsigned char 
  4351 ;;		 -> SerialMsg.xTyp(1), SerialMsg(16), 
  4352 ;; Return value:  Size  Location     Type
  4353 ;;                  1    wreg      void 
  4354 ;; Registers used:
  4355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4356 ;; Tracked objects:
  4357 ;;		On entry : 0/0
  4358 ;;		On exit  : 0/0
  4359 ;;		Unchanged: 0/0
  4360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4361 ;;      Params:         0       0       0       0       0
  4362 ;;      Locals:         0       4       0       0       0
  4363 ;;      Temps:          0       2       0       0       0
  4364 ;;      Totals:         0       6       0       0       0
  4365 ;;Total ram usage:        6 bytes
  4366 ;; Hardware stack levels used:    1
  4367 ;; Hardware stack levels required when called:    4
  4368 ;; This function calls:
  4369 ;;		_SerPutCh
  4370 ;; This function is called by:
  4371 ;;		_main
  4372 ;; This function uses a non-reentrant model
  4373 ;;
  4374                           
  4375                           
  4376                           ;psect for function _SerSendR
  4377  0801                     _SerSendR:	
  4378                           
  4379                           ;incstack = 0
  4380                           ; Regs used in _SerSendR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4381                           ;SerSendR@msg stored from wreg
  4382  0801  1283               	bcf	3,5	;RP0=0, select bank0
  4383  0802  1303               	bcf	3,6	;RP1=0, select bank0
  4384  0803  00A6               	movwf	SerSendR@msg
  4385                           
  4386                           ;serial.c: 100: char* p = &msg->xTyp;
  4387  0804  0826               	movf	SerSendR@msg,w
  4388  0805  00A1               	movwf	??_SerSendR
  4389  0806  0821               	movf	??_SerSendR,w
  4390  0807  00A3               	movwf	SerSendR@p
  4391                           
  4392                           ;serial.c: 101: int i;
  4393                           ;serial.c: 103: if(msg->xTyp == 'Q')msg->xTyp = 'R';
  4394  0808  0826               	movf	SerSendR@msg,w
  4395  0809  0084               	movwf	4
  4396  080A  3051               	movlw	81
  4397  080B  1383               	bcf	3,7	;select IRP bank0
  4398  080C  0600               	xorwf	0,w
  4399  080D  1D03               	btfss	3,2
  4400  080E  2815               	goto	l4715
  4401  080F  3052               	movlw	82
  4402  0810  00A1               	movwf	??_SerSendR
  4403  0811  0826               	movf	SerSendR@msg,w
  4404  0812  0084               	movwf	4
  4405  0813  0821               	movf	??_SerSendR,w
  4406  0814  0080               	movwf	0
  4407  0815                     l4715:	
  4408                           
  4409                           ;serial.c: 104: msg->xDst = 0;
  4410  0815  0A26               	incf	SerSendR@msg,w
  4411  0816  0084               	movwf	4
  4412  0817  0180               	clrf	0
  4413                           
  4414                           ;serial.c: 105: msg->xSrc = IOPORTCONF.hw_address;
  4415  0818  1683               	bsf	3,5	;RP0=1, select bank3
  4416  0819  1703               	bsf	3,6	;RP1=1, select bank3
  4417  081A  0810               	movf	_IOPORTCONF^(0+384),w
  4418  081B  1283               	bcf	3,5	;RP0=0, select bank0
  4419  081C  1303               	bcf	3,6	;RP1=0, select bank0
  4420  081D  00A1               	movwf	??_SerSendR
  4421  081E  0826               	movf	SerSendR@msg,w
  4422  081F  3E02               	addlw	2
  4423  0820  0084               	movwf	4
  4424  0821  0821               	movf	??_SerSendR,w
  4425  0822  0080               	movwf	0
  4426                           
  4427                           ;serial.c: 106: msg->xSum = 0;
  4428  0823  0826               	movf	SerSendR@msg,w
  4429  0824  3E0F               	addlw	15
  4430  0825  0084               	movwf	4
  4431  0826  0180               	clrf	0
  4432                           
  4433                           ;serial.c: 107: for(i = 0; i < 15; i++)
  4434  0827  01A4               	clrf	SerSendR@i
  4435  0828  01A5               	clrf	SerSendR@i+1
  4436  0829  0825               	movf	SerSendR@i+1,w
  4437  082A  3A80               	xorlw	128
  4438  082B  00FF               	movwf	127
  4439  082C  3080               	movlw	128
  4440  082D  027F               	subwf	127,w
  4441  082E  1D03               	skipz
  4442  082F  2832               	goto	u4875
  4443  0830  300F               	movlw	15
  4444  0831  0224               	subwf	SerSendR@i,w
  4445  0832                     u4875:	
  4446  0832  1803               	btfsc	3,0
  4447  0833  2854               	goto	l4731
  4448  0834                     l4725:	
  4449                           
  4450                           ;serial.c: 108: {
  4451                           ;serial.c: 109: msg->xSum += *(p+i);
  4452  0834  1283               	bcf	3,5	;RP0=0, select bank0
  4453  0835  1303               	bcf	3,6	;RP1=0, select bank0
  4454  0836  0824               	movf	SerSendR@i,w
  4455  0837  0723               	addwf	SerSendR@p,w
  4456  0838  00A1               	movwf	??_SerSendR
  4457  0839  0821               	movf	??_SerSendR,w
  4458  083A  0084               	movwf	4
  4459  083B  1383               	bcf	3,7	;select IRP bank0
  4460  083C  0800               	movf	0,w
  4461  083D  00A2               	movwf	??_SerSendR+1
  4462  083E  0826               	movf	SerSendR@msg,w
  4463  083F  3E0F               	addlw	15
  4464  0840  0084               	movwf	4
  4465  0841  0822               	movf	??_SerSendR+1,w
  4466  0842  0780               	addwf	0,f
  4467  0843  3001               	movlw	1
  4468  0844  07A4               	addwf	SerSendR@i,f
  4469  0845  1803               	skipnc
  4470  0846  0AA5               	incf	SerSendR@i+1,f
  4471  0847  3000               	movlw	0
  4472  0848  07A5               	addwf	SerSendR@i+1,f
  4473  0849  0825               	movf	SerSendR@i+1,w
  4474  084A  3A80               	xorlw	128
  4475  084B  00FF               	movwf	127
  4476  084C  3080               	movlw	128
  4477  084D  027F               	subwf	127,w
  4478  084E  1D03               	skipz
  4479  084F  2852               	goto	u4885
  4480  0850  300F               	movlw	15
  4481  0851  0224               	subwf	SerSendR@i,w
  4482  0852                     u4885:	
  4483  0852  1C03               	skipc
  4484  0853  2834               	goto	l4725
  4485  0854                     l4731:	
  4486                           
  4487                           ;serial.c: 110: }
  4488                           ;serial.c: 111: for(i = 0; i < 16; i++)
  4489  0854  1283               	bcf	3,5	;RP0=0, select bank0
  4490  0855  1303               	bcf	3,6	;RP1=0, select bank0
  4491  0856  01A4               	clrf	SerSendR@i
  4492  0857  01A5               	clrf	SerSendR@i+1
  4493  0858                     L7:	
  4494  0858  0825               	movf	SerSendR@i+1,w
  4495  0859  3A80               	xorlw	128
  4496  085A  00FF               	movwf	127
  4497  085B  3080               	movlw	128
  4498  085C  027F               	subwf	127,w
  4499  085D  1D03               	skipz
  4500  085E  2861               	goto	u4895
  4501  085F  3010               	movlw	16
  4502  0860  0224               	subwf	SerSendR@i,w
  4503  0861                     u4895:	
  4504  0861  1803               	btfsc	3,0
  4505  0862  0008               	return
  4506                           
  4507                           ;serial.c: 112: {
  4508                           ;serial.c: 113: SerPutCh(*(p+i));
  4509  0863  1283               	bcf	3,5	;RP0=0, select bank0
  4510  0864  1303               	bcf	3,6	;RP1=0, select bank0
  4511  0865  0824               	movf	SerSendR@i,w
  4512  0866  0723               	addwf	SerSendR@p,w
  4513  0867  00A1               	movwf	??_SerSendR
  4514  0868  0821               	movf	??_SerSendR,w
  4515  0869  0084               	movwf	4
  4516  086A  1383               	bcf	3,7	;select IRP bank0
  4517  086B  0800               	movf	0,w
  4518  086C  160A  158A  24A7  120A  158A  	fcall	_SerPutCh
  4519  0871  3001               	movlw	1
  4520  0872  1283               	bcf	3,5	;RP0=0, select bank0
  4521  0873  1303               	bcf	3,6	;RP1=0, select bank0
  4522  0874  07A4               	addwf	SerSendR@i,f
  4523  0875  1803               	skipnc
  4524  0876  0AA5               	incf	SerSendR@i+1,f
  4525  0877  3000               	movlw	0
  4526  0878  07A5               	addwf	SerSendR@i+1,f
  4527  0879  2858               	goto	L7
  4528  087A                     __end_of_SerSendR:	
  4529                           
  4530                           	psect	text7
  4531  10C4                     __ptext7:	
  4532 ;; *************** function _SerSendQ *****************
  4533 ;; Defined at:
  4534 ;;		line 78 in file "serial.c"
  4535 ;; Parameters:    Size  Location     Type
  4536 ;;  msg             1    wreg     PTR struct _serial_msg
  4537 ;;		 -> LastMsgSend(16), 
  4538 ;; Auto vars:     Size  Location     Type
  4539 ;;  msg             1    6[BANK0 ] PTR struct _serial_msg
  4540 ;;		 -> LastMsgSend(16), 
  4541 ;;  i               2    4[BANK0 ] int 
  4542 ;;  p               1    3[BANK0 ] PTR unsigned char 
  4543 ;;		 -> LastMsgSend.xTyp(1), LastMsgSend(16), 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  1    wreg      void 
  4546 ;; Registers used:
  4547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4553 ;;      Params:         0       0       0       0       0
  4554 ;;      Locals:         0       4       0       0       0
  4555 ;;      Temps:          0       2       0       0       0
  4556 ;;      Totals:         0       6       0       0       0
  4557 ;;Total ram usage:        6 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; Hardware stack levels required when called:    4
  4560 ;; This function calls:
  4561 ;;		_SerPutCh
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           
  4568                           ;psect for function _SerSendQ
  4569  10C4                     _SerSendQ:	
  4570                           
  4571                           ;incstack = 0
  4572                           ; Regs used in _SerSendQ: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4573                           ;SerSendQ@msg stored from wreg
  4574  10C4  1283               	bcf	3,5	;RP0=0, select bank0
  4575  10C5  1303               	bcf	3,6	;RP1=0, select bank0
  4576  10C6  00A6               	movwf	SerSendQ@msg
  4577                           
  4578                           ;serial.c: 80: char* p = &msg->xTyp;
  4579  10C7  0826               	movf	SerSendQ@msg,w
  4580  10C8  00A1               	movwf	??_SerSendQ
  4581  10C9  0821               	movf	??_SerSendQ,w
  4582  10CA  00A3               	movwf	SerSendQ@p
  4583                           
  4584                           ;serial.c: 81: int i;
  4585                           ;serial.c: 83: msg->xTyp = 'Q';
  4586  10CB  3051               	movlw	81
  4587  10CC  00A1               	movwf	??_SerSendQ
  4588  10CD  0826               	movf	SerSendQ@msg,w
  4589  10CE  0084               	movwf	4
  4590  10CF  0821               	movf	??_SerSendQ,w
  4591  10D0  1783               	bsf	3,7	;select IRP bank2
  4592  10D1  0080               	movwf	0
  4593                           
  4594                           ;serial.c: 84: msg->xDst = 0;
  4595  10D2  0A26               	incf	SerSendQ@msg,w
  4596  10D3  0084               	movwf	4
  4597  10D4  0180               	clrf	0
  4598                           
  4599                           ;serial.c: 85: msg->xSrc = IOPORTCONF.hw_address;
  4600  10D5  1683               	bsf	3,5	;RP0=1, select bank3
  4601  10D6  1703               	bsf	3,6	;RP1=1, select bank3
  4602  10D7  0810               	movf	_IOPORTCONF^(0+384),w
  4603  10D8  1283               	bcf	3,5	;RP0=0, select bank0
  4604  10D9  1303               	bcf	3,6	;RP1=0, select bank0
  4605  10DA  00A1               	movwf	??_SerSendQ
  4606  10DB  0826               	movf	SerSendQ@msg,w
  4607  10DC  3E02               	addlw	2
  4608  10DD  0084               	movwf	4
  4609  10DE  0821               	movf	??_SerSendQ,w
  4610  10DF  0080               	movwf	0
  4611                           
  4612                           ;serial.c: 86: msg->xCnt = SerMsgCount;
  4613  10E0  1683               	bsf	3,5	;RP0=1, select bank1
  4614  10E1  1303               	bcf	3,6	;RP1=0, select bank1
  4615  10E2  0866               	movf	_SerMsgCount^(0+128),w
  4616  10E3  1283               	bcf	3,5	;RP0=0, select bank0
  4617  10E4  1303               	bcf	3,6	;RP1=0, select bank0
  4618  10E5  00A1               	movwf	??_SerSendQ
  4619  10E6  0826               	movf	SerSendQ@msg,w
  4620  10E7  3E03               	addlw	3
  4621  10E8  0084               	movwf	4
  4622  10E9  0821               	movf	??_SerSendQ,w
  4623  10EA  0080               	movwf	0
  4624                           
  4625                           ;serial.c: 87: msg->xSum = 0;
  4626  10EB  0826               	movf	SerSendQ@msg,w
  4627  10EC  3E0F               	addlw	15
  4628  10ED  0084               	movwf	4
  4629  10EE  0180               	clrf	0
  4630                           
  4631                           ;serial.c: 88: for(i = 0; i < 15; i++)
  4632  10EF  01A4               	clrf	SerSendQ@i
  4633  10F0  01A5               	clrf	SerSendQ@i+1
  4634  10F1  0825               	movf	SerSendQ@i+1,w
  4635  10F2  3A80               	xorlw	128
  4636  10F3  00FF               	movwf	127
  4637  10F4  3080               	movlw	128
  4638  10F5  027F               	subwf	127,w
  4639  10F6  1D03               	skipz
  4640  10F7  28FA               	goto	u4915
  4641  10F8  300F               	movlw	15
  4642  10F9  0224               	subwf	SerSendQ@i,w
  4643  10FA                     u4915:	
  4644  10FA  1803               	btfsc	3,0
  4645  10FB  291C               	goto	l4785
  4646  10FC                     l4779:	
  4647                           
  4648                           ;serial.c: 89: {
  4649                           ;serial.c: 90: msg->xSum += *(p+i);
  4650  10FC  1283               	bcf	3,5	;RP0=0, select bank0
  4651  10FD  1303               	bcf	3,6	;RP1=0, select bank0
  4652  10FE  0824               	movf	SerSendQ@i,w
  4653  10FF  0723               	addwf	SerSendQ@p,w
  4654  1100  00A1               	movwf	??_SerSendQ
  4655  1101  0821               	movf	??_SerSendQ,w
  4656  1102  0084               	movwf	4
  4657  1103  1783               	bsf	3,7	;select IRP bank2
  4658  1104  0800               	movf	0,w
  4659  1105  00A2               	movwf	??_SerSendQ+1
  4660  1106  0826               	movf	SerSendQ@msg,w
  4661  1107  3E0F               	addlw	15
  4662  1108  0084               	movwf	4
  4663  1109  0822               	movf	??_SerSendQ+1,w
  4664  110A  0780               	addwf	0,f
  4665  110B  3001               	movlw	1
  4666  110C  07A4               	addwf	SerSendQ@i,f
  4667  110D  1803               	skipnc
  4668  110E  0AA5               	incf	SerSendQ@i+1,f
  4669  110F  3000               	movlw	0
  4670  1110  07A5               	addwf	SerSendQ@i+1,f
  4671  1111  0825               	movf	SerSendQ@i+1,w
  4672  1112  3A80               	xorlw	128
  4673  1113  00FF               	movwf	127
  4674  1114  3080               	movlw	128
  4675  1115  027F               	subwf	127,w
  4676  1116  1D03               	skipz
  4677  1117  291A               	goto	u4925
  4678  1118  300F               	movlw	15
  4679  1119  0224               	subwf	SerSendQ@i,w
  4680  111A                     u4925:	
  4681  111A  1C03               	skipc
  4682  111B  28FC               	goto	l4779
  4683  111C                     l4785:	
  4684                           
  4685                           ;serial.c: 91: }
  4686                           ;serial.c: 92: for(i = 0; i < 16; i++)
  4687  111C  1283               	bcf	3,5	;RP0=0, select bank0
  4688  111D  1303               	bcf	3,6	;RP1=0, select bank0
  4689  111E  01A4               	clrf	SerSendQ@i
  4690  111F  01A5               	clrf	SerSendQ@i+1
  4691  1120                     L8:	
  4692  1120  0825               	movf	SerSendQ@i+1,w
  4693  1121  3A80               	xorlw	128
  4694  1122  00FF               	movwf	127
  4695  1123  3080               	movlw	128
  4696  1124  027F               	subwf	127,w
  4697  1125  1D03               	skipz
  4698  1126  2929               	goto	u4935
  4699  1127  3010               	movlw	16
  4700  1128  0224               	subwf	SerSendQ@i,w
  4701  1129                     u4935:	
  4702  1129  1803               	btfsc	3,0
  4703  112A  0008               	return
  4704                           
  4705                           ;serial.c: 93: {
  4706                           ;serial.c: 94: SerPutCh(*(p+i));
  4707  112B  1283               	bcf	3,5	;RP0=0, select bank0
  4708  112C  1303               	bcf	3,6	;RP1=0, select bank0
  4709  112D  0824               	movf	SerSendQ@i,w
  4710  112E  0723               	addwf	SerSendQ@p,w
  4711  112F  00A1               	movwf	??_SerSendQ
  4712  1130  0821               	movf	??_SerSendQ,w
  4713  1131  0084               	movwf	4
  4714  1132  1783               	bsf	3,7	;select IRP bank2
  4715  1133  0800               	movf	0,w
  4716  1134  160A  158A  24A7  160A  118A  	fcall	_SerPutCh
  4717  1139  3001               	movlw	1
  4718  113A  1283               	bcf	3,5	;RP0=0, select bank0
  4719  113B  1303               	bcf	3,6	;RP1=0, select bank0
  4720  113C  07A4               	addwf	SerSendQ@i,f
  4721  113D  1803               	skipnc
  4722  113E  0AA5               	incf	SerSendQ@i+1,f
  4723  113F  3000               	movlw	0
  4724  1140  07A5               	addwf	SerSendQ@i+1,f
  4725  1141  2920               	goto	L8
  4726  1142                     __end_of_SerSendQ:	
  4727                           
  4728                           	psect	text8
  4729  1CA7                     __ptext8:	
  4730 ;; *************** function _SerPutCh *****************
  4731 ;; Defined at:
  4732 ;;		line 71 in file "serial.c"
  4733 ;; Parameters:    Size  Location     Type
  4734 ;;  ch              1    wreg     unsigned char 
  4735 ;; Auto vars:     Size  Location     Type
  4736 ;;  ch              1    0[BANK0 ] unsigned char 
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4746 ;;      Params:         0       0       0       0       0
  4747 ;;      Locals:         0       1       0       0       0
  4748 ;;      Temps:          0       0       0       0       0
  4749 ;;      Totals:         0       1       0       0       0
  4750 ;;Total ram usage:        1 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    3
  4753 ;; This function calls:
  4754 ;;		Nothing
  4755 ;; This function is called by:
  4756 ;;		_SerSendQ
  4757 ;;		_SerSendR
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761                           
  4762                           ;psect for function _SerPutCh
  4763  1CA7                     _SerPutCh:	
  4764                           
  4765                           ;incstack = 0
  4766                           ; Regs used in _SerPutCh: [wreg]
  4767                           ;SerPutCh@ch stored from wreg
  4768  1CA7  1283               	bcf	3,5	;RP0=0, select bank0
  4769  1CA8  1303               	bcf	3,6	;RP1=0, select bank0
  4770  1CA9  00A0               	movwf	SerPutCh@ch
  4771  1CAA                     l428:	
  4772                           ;serial.c: 74: while( !TRMT);
  4773                           
  4774  1CAA  1683               	bsf	3,5	;RP0=1, select bank1
  4775  1CAB  1303               	bcf	3,6	;RP1=0, select bank1
  4776  1CAC  1C98               	btfss	24,1	;volatile
  4777  1CAD  2CAA               	goto	l428
  4778                           
  4779                           ;serial.c: 75: TXREG = ch;
  4780  1CAE  1283               	bcf	3,5	;RP0=0, select bank0
  4781  1CAF  1303               	bcf	3,6	;RP1=0, select bank0
  4782  1CB0  0820               	movf	SerPutCh@ch,w
  4783  1CB1  0099               	movwf	25	;volatile
  4784  1CB2  0008               	return
  4785  1CB3                     __end_of_SerPutCh:	
  4786                           
  4787                           	psect	text9
  4788  1D46                     __ptext9:	
  4789 ;; *************** function _SerReceive *****************
  4790 ;; Defined at:
  4791 ;;		line 117 in file "serial.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  msg             1    wreg     PTR struct _serial_msg
  4794 ;;		 -> SerialMsg(16), 
  4795 ;; Auto vars:     Size  Location     Type
  4796 ;;  msg             1    1[BANK0 ] PTR struct _serial_msg
  4797 ;;		 -> SerialMsg(16), 
  4798 ;;  i               1    3[BANK0 ] unsigned char 
  4799 ;;  p               1    2[BANK0 ] PTR unsigned char 
  4800 ;;		 -> SerialMsg.xTyp(1), SerialMsg(16), 
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  1    wreg      unsigned char 
  4803 ;; Registers used:
  4804 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4810 ;;      Params:         0       0       0       0       0
  4811 ;;      Locals:         0       3       0       0       0
  4812 ;;      Temps:          0       1       0       0       0
  4813 ;;      Totals:         0       4       0       0       0
  4814 ;;Total ram usage:        4 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    3
  4817 ;; This function calls:
  4818 ;;		Nothing
  4819 ;; This function is called by:
  4820 ;;		_main
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           
  4825                           ;psect for function _SerReceive
  4826  1D46                     _SerReceive:	
  4827                           
  4828                           ;incstack = 0
  4829                           ; Regs used in _SerReceive: [wreg-fsr0h+status,2+status,0]
  4830                           ;SerReceive@msg stored from wreg
  4831  1D46  1283               	bcf	3,5	;RP0=0, select bank0
  4832  1D47  1303               	bcf	3,6	;RP1=0, select bank0
  4833  1D48  00A1               	movwf	SerReceive@msg
  4834                           
  4835                           ;serial.c: 119: unsigned char i;
  4836                           ;serial.c: 120: char* p;
  4837                           ;serial.c: 122: if(SerRxBufferIndex == 16)
  4838  1D49  3010               	movlw	16
  4839  1D4A  0656               	xorwf	_SerRxBufferIndex,w
  4840  1D4B  1D03               	btfss	3,2
  4841  1D4C  2D70               	goto	l4663
  4842                           
  4843                           ;serial.c: 123: {
  4844                           ;serial.c: 124: p = &msg->xTyp;
  4845  1D4D  0821               	movf	SerReceive@msg,w
  4846  1D4E  00A0               	movwf	??_SerReceive
  4847  1D4F  0820               	movf	??_SerReceive,w
  4848  1D50  00A2               	movwf	SerReceive@p
  4849                           
  4850                           ;serial.c: 125: for(i = 0; i < 16; i++)
  4851  1D51  01A3               	clrf	SerReceive@i
  4852  1D52  3010               	movlw	16
  4853  1D53  0223               	subwf	SerReceive@i,w
  4854  1D54  1803               	btfsc	3,0
  4855  1D55  2D6D               	goto	l4657
  4856  1D56                     l4649:	
  4857                           
  4858                           ;serial.c: 126: {
  4859                           ;serial.c: 127: *p = SerRxBuffer[i];
  4860  1D56  0823               	movf	SerReceive@i,w
  4861  1D57  3EAC               	addlw	(low (_SerRxBuffer| (0+256)))& (0+255)
  4862  1D58  0084               	movwf	4
  4863  1D59  1783               	bsf	3,7	;select IRP bank3
  4864  1D5A  0800               	movf	0,w
  4865  1D5B  00A0               	movwf	??_SerReceive
  4866  1D5C  0822               	movf	SerReceive@p,w
  4867  1D5D  0084               	movwf	4
  4868  1D5E  0820               	movf	??_SerReceive,w
  4869  1D5F  1383               	bcf	3,7	;select IRP bank0
  4870  1D60  0080               	movwf	0
  4871                           
  4872                           ;serial.c: 128: p++;
  4873  1D61  3001               	movlw	1
  4874  1D62  00A0               	movwf	??_SerReceive
  4875  1D63  0820               	movf	??_SerReceive,w
  4876  1D64  07A2               	addwf	SerReceive@p,f
  4877  1D65  3001               	movlw	1
  4878  1D66  00A0               	movwf	??_SerReceive
  4879  1D67  0820               	movf	??_SerReceive,w
  4880  1D68  07A3               	addwf	SerReceive@i,f
  4881  1D69  3010               	movlw	16
  4882  1D6A  0223               	subwf	SerReceive@i,w
  4883  1D6B  1C03               	skipc
  4884  1D6C  2D56               	goto	l4649
  4885  1D6D                     l4657:	
  4886                           
  4887                           ;serial.c: 129: }
  4888                           ;serial.c: 130: SerRxBufferIndex = 0;
  4889  1D6D  01D6               	clrf	_SerRxBufferIndex
  4890                           
  4891                           ;serial.c: 131: return 16;
  4892  1D6E  3010               	movlw	16
  4893  1D6F  0008               	return
  4894  1D70                     l4663:	
  4895                           
  4896                           ;serial.c: 132: }
  4897                           ;serial.c: 133: return 0;
  4898  1D70  3000               	movlw	0
  4899  1D71  0008               	return
  4900  1D72                     __end_of_SerReceive:	
  4901                           
  4902                           	psect	text10
  4903  1CFA                     __ptext10:	
  4904 ;; *************** function _SerInit *****************
  4905 ;; Defined at:
  4906 ;;		line 43 in file "serial.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, status,2
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4920 ;;      Params:         0       0       0       0       0
  4921 ;;      Locals:         0       0       0       0       0
  4922 ;;      Temps:          0       0       0       0       0
  4923 ;;      Totals:         0       0       0       0       0
  4924 ;;Total ram usage:        0 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    3
  4927 ;; This function calls:
  4928 ;;		Nothing
  4929 ;; This function is called by:
  4930 ;;		_main
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           
  4935                           ;psect for function _SerInit
  4936  1CFA                     _SerInit:	
  4937                           
  4938                           ;serial.c: 48: BRGH = 1;
  4939                           
  4940                           ;incstack = 0
  4941                           ; Regs used in _SerInit: [wreg+status,2]
  4942  1CFA  1683               	bsf	3,5	;RP0=1, select bank1
  4943  1CFB  1303               	bcf	3,6	;RP1=0, select bank1
  4944  1CFC  1518               	bsf	24,2	;volatile
  4945                           
  4946                           ;serial.c: 49: BRG16 = 0;
  4947  1CFD  1683               	bsf	3,5	;RP0=1, select bank3
  4948  1CFE  1703               	bsf	3,6	;RP1=1, select bank3
  4949  1CFF  1187               	bcf	7,3	;volatile
  4950                           
  4951                           ;serial.c: 50: SPBRGH = 0x00;
  4952  1D00  1683               	bsf	3,5	;RP0=1, select bank1
  4953  1D01  1303               	bcf	3,6	;RP1=0, select bank1
  4954  1D02  019A               	clrf	26	;volatile
  4955                           
  4956                           ;serial.c: 51: SPBRG = IOPORTCONF.baud_rate;
  4957  1D03  1683               	bsf	3,5	;RP0=1, select bank3
  4958  1D04  1703               	bsf	3,6	;RP1=1, select bank3
  4959  1D05  082B               	movf	(_IOPORTCONF^(0+384)+27),w
  4960  1D06  1683               	bsf	3,5	;RP0=1, select bank1
  4961  1D07  1303               	bcf	3,6	;RP1=0, select bank1
  4962  1D08  0099               	movwf	25	;volatile
  4963                           
  4964                           ;serial.c: 54: TXEN = 1;
  4965  1D09  1698               	bsf	24,5	;volatile
  4966                           
  4967                           ;serial.c: 55: SYNC = 0;
  4968  1D0A  1218               	bcf	24,4	;volatile
  4969                           
  4970                           ;serial.c: 56: CREN = 1;
  4971  1D0B  1283               	bcf	3,5	;RP0=0, select bank0
  4972  1D0C  1303               	bcf	3,6	;RP1=0, select bank0
  4973  1D0D  1618               	bsf	24,4	;volatile
  4974                           
  4975                           ;serial.c: 57: SPEN = 1;
  4976  1D0E  1798               	bsf	24,7	;volatile
  4977                           
  4978                           ;serial.c: 59: SerTimerCount = 0;
  4979  1D0F  01FB               	clrf	_SerTimerCount
  4980                           
  4981                           ;serial.c: 60: SerRxBufferIndex = 0;
  4982  1D10  01D6               	clrf	_SerRxBufferIndex
  4983                           
  4984                           ;serial.c: 61: SerMsgCount = 0;
  4985  1D11  1683               	bsf	3,5	;RP0=1, select bank1
  4986  1D12  1303               	bcf	3,6	;RP1=0, select bank1
  4987  1D13  01E6               	clrf	_SerMsgCount^(0+128)
  4988                           
  4989                           ;serial.c: 63: PEIE = 1;
  4990  1D14  170B               	bsf	11,6	;volatile
  4991                           
  4992                           ;serial.c: 64: RCIE = 1;
  4993  1D15  168C               	bsf	12,5	;volatile
  4994                           
  4995                           ;serial.c: 67: CREN = 0;
  4996  1D16  1283               	bcf	3,5	;RP0=0, select bank0
  4997  1D17  1303               	bcf	3,6	;RP1=0, select bank0
  4998  1D18  1218               	bcf	24,4	;volatile
  4999                           
  5000                           ;serial.c: 68: CREN = 1;
  5001  1D19  1618               	bsf	24,4	;volatile
  5002  1D1A  0008               	return
  5003  1D1B                     __end_of_SerInit:	
  5004                           
  5005                           	psect	text11
  5006  1C95                     __ptext11:	
  5007 ;; *************** function _SerAck *****************
  5008 ;; Defined at:
  5009 ;;		line 216 in file "serial.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, status,2, status,0
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5023 ;;      Params:         0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0
  5025 ;;      Temps:          0       1       0       0       0
  5026 ;;      Totals:         0       1       0       0       0
  5027 ;;Total ram usage:        1 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    3
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_main
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           
  5038                           ;psect for function _SerAck
  5039  1C95                     _SerAck:	
  5040                           
  5041                           ;serial.c: 218: SerMsgCount++;
  5042                           
  5043                           ;incstack = 0
  5044                           ; Regs used in _SerAck: [wreg+status,2+status,0]
  5045  1C95  3001               	movlw	1
  5046  1C96  1283               	bcf	3,5	;RP0=0, select bank0
  5047  1C97  1303               	bcf	3,6	;RP1=0, select bank0
  5048  1C98  00A0               	movwf	??_SerAck
  5049  1C99  0820               	movf	??_SerAck,w
  5050  1C9A  1683               	bsf	3,5	;RP0=1, select bank1
  5051  1C9B  1303               	bcf	3,6	;RP1=0, select bank1
  5052  1C9C  07E6               	addwf	_SerMsgCount^(0+128),f
  5053  1C9D  0008               	return
  5054  1C9E                     __end_of_SerAck:	
  5055                           
  5056                           	psect	text12
  5057  16A5                     __ptext12:	
  5058 ;; *************** function _SaveStatus *****************
  5059 ;; Defined at:
  5060 ;;		line 292 in file "main.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5074 ;;      Params:         0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0
  5076 ;;      Temps:          0       1       0       0       0
  5077 ;;      Totals:         0       1       0       0       0
  5078 ;;Total ram usage:        1 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:    4
  5081 ;; This function calls:
  5082 ;;		_iEEputc
  5083 ;; This function is called by:
  5084 ;;		_main
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088                           
  5089                           ;psect for function _SaveStatus
  5090  16A5                     _SaveStatus:	
  5091                           
  5092                           ;main.c: 294: iEEputc(128, 0xA5);
  5093                           
  5094                           ;incstack = 0
  5095                           ; Regs used in _SaveStatus: [wreg+status,2+status,0+pclath+cstack]
  5096  16A5  30A5               	movlw	165
  5097  16A6  1283               	bcf	3,5	;RP0=0, select bank0
  5098  16A7  1303               	bcf	3,6	;RP1=0, select bank0
  5099  16A8  00A4               	movwf	??_SaveStatus
  5100  16A9  0824               	movf	??_SaveStatus,w
  5101  16AA  00A0               	movwf	iEEputc@data
  5102  16AB  3080               	movlw	128
  5103  16AC  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5104                           
  5105                           ;main.c: 295: iEEputc(129, IOPORT.io[0].status);
  5106  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  5107  16B2  1303               	bcf	3,6	;RP1=0, select bank1
  5108  16B3  0820               	movf	_IOPORT^(0+128),w
  5109  16B4  1283               	bcf	3,5	;RP0=0, select bank0
  5110  16B5  1303               	bcf	3,6	;RP1=0, select bank0
  5111  16B6  00A4               	movwf	??_SaveStatus
  5112  16B7  0824               	movf	??_SaveStatus,w
  5113  16B8  00A0               	movwf	iEEputc@data
  5114  16B9  3081               	movlw	129
  5115  16BA  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5116                           
  5117                           ;main.c: 296: iEEputc(130, IOPORT.io[1].status);
  5118  16BF  1683               	bsf	3,5	;RP0=1, select bank1
  5119  16C0  1303               	bcf	3,6	;RP1=0, select bank1
  5120  16C1  0823               	movf	(_IOPORT^(0+128)+3),w
  5121  16C2  1283               	bcf	3,5	;RP0=0, select bank0
  5122  16C3  1303               	bcf	3,6	;RP1=0, select bank0
  5123  16C4  00A4               	movwf	??_SaveStatus
  5124  16C5  0824               	movf	??_SaveStatus,w
  5125  16C6  00A0               	movwf	iEEputc@data
  5126  16C7  3082               	movlw	130
  5127  16C8  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5128                           
  5129                           ;main.c: 297: iEEputc(131, IOPORT.io[2].status);
  5130  16CD  1683               	bsf	3,5	;RP0=1, select bank1
  5131  16CE  1303               	bcf	3,6	;RP1=0, select bank1
  5132  16CF  0826               	movf	(_IOPORT^(0+128)+6),w
  5133  16D0  1283               	bcf	3,5	;RP0=0, select bank0
  5134  16D1  1303               	bcf	3,6	;RP1=0, select bank0
  5135  16D2  00A4               	movwf	??_SaveStatus
  5136  16D3  0824               	movf	??_SaveStatus,w
  5137  16D4  00A0               	movwf	iEEputc@data
  5138  16D5  3083               	movlw	131
  5139  16D6  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5140                           
  5141                           ;main.c: 298: iEEputc(132, IOPORT.io[3].status);
  5142  16DB  1683               	bsf	3,5	;RP0=1, select bank1
  5143  16DC  1303               	bcf	3,6	;RP1=0, select bank1
  5144  16DD  0829               	movf	(_IOPORT^(0+128)+9),w
  5145  16DE  1283               	bcf	3,5	;RP0=0, select bank0
  5146  16DF  1303               	bcf	3,6	;RP1=0, select bank0
  5147  16E0  00A4               	movwf	??_SaveStatus
  5148  16E1  0824               	movf	??_SaveStatus,w
  5149  16E2  00A0               	movwf	iEEputc@data
  5150  16E3  3084               	movlw	132
  5151  16E4  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5152                           
  5153                           ;main.c: 299: iEEputc(133, IOPORT.analog[0].alarm);
  5154  16E9  1683               	bsf	3,5	;RP0=1, select bank1
  5155  16EA  1303               	bcf	3,6	;RP1=0, select bank1
  5156  16EB  082C               	movf	(_IOPORT^(0+128)+12),w
  5157  16EC  1283               	bcf	3,5	;RP0=0, select bank0
  5158  16ED  1303               	bcf	3,6	;RP1=0, select bank0
  5159  16EE  00A4               	movwf	??_SaveStatus
  5160  16EF  0824               	movf	??_SaveStatus,w
  5161  16F0  00A0               	movwf	iEEputc@data
  5162  16F1  3085               	movlw	133
  5163  16F2  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5164                           
  5165                           ;main.c: 300: iEEputc(134, IOPORT.analog[1].alarm);
  5166  16F7  1683               	bsf	3,5	;RP0=1, select bank1
  5167  16F8  1303               	bcf	3,6	;RP1=0, select bank1
  5168  16F9  0830               	movf	(_IOPORT^(0+128)+16),w
  5169  16FA  1283               	bcf	3,5	;RP0=0, select bank0
  5170  16FB  1303               	bcf	3,6	;RP1=0, select bank0
  5171  16FC  00A4               	movwf	??_SaveStatus
  5172  16FD  0824               	movf	??_SaveStatus,w
  5173  16FE  00A0               	movwf	iEEputc@data
  5174  16FF  3086               	movlw	134
  5175  1700  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5176                           
  5177                           ;main.c: 301: iEEputc(135, IOPORT.analog[2].alarm);
  5178  1705  1683               	bsf	3,5	;RP0=1, select bank1
  5179  1706  1303               	bcf	3,6	;RP1=0, select bank1
  5180  1707  0834               	movf	(_IOPORT^(0+128)+20),w
  5181  1708  1283               	bcf	3,5	;RP0=0, select bank0
  5182  1709  1303               	bcf	3,6	;RP1=0, select bank0
  5183  170A  00A4               	movwf	??_SaveStatus
  5184  170B  0824               	movf	??_SaveStatus,w
  5185  170C  00A0               	movwf	iEEputc@data
  5186  170D  3087               	movlw	135
  5187  170E  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5188                           
  5189                           ;main.c: 302: iEEputc(136, IOPORT.analog[3].alarm);
  5190  1713  1683               	bsf	3,5	;RP0=1, select bank1
  5191  1714  1303               	bcf	3,6	;RP1=0, select bank1
  5192  1715  0838               	movf	(_IOPORT^(0+128)+24),w
  5193  1716  1283               	bcf	3,5	;RP0=0, select bank0
  5194  1717  1303               	bcf	3,6	;RP1=0, select bank0
  5195  1718  00A4               	movwf	??_SaveStatus
  5196  1719  0824               	movf	??_SaveStatus,w
  5197  171A  00A0               	movwf	iEEputc@data
  5198  171B  3088               	movlw	136
  5199  171C  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5200                           
  5201                           ;main.c: 303: iEEputc(137, IOPORT.pulse[0]);
  5202  1721  1683               	bsf	3,5	;RP0=1, select bank1
  5203  1722  1303               	bcf	3,6	;RP1=0, select bank1
  5204  1723  083C               	movf	(_IOPORT^(0+128)+28),w
  5205  1724  1283               	bcf	3,5	;RP0=0, select bank0
  5206  1725  1303               	bcf	3,6	;RP1=0, select bank0
  5207  1726  00A4               	movwf	??_SaveStatus
  5208  1727  0824               	movf	??_SaveStatus,w
  5209  1728  00A0               	movwf	iEEputc@data
  5210  1729  3089               	movlw	137
  5211  172A  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5212                           
  5213                           ;main.c: 304: iEEputc(138, IOPORT.pulse[1]);
  5214  172F  1683               	bsf	3,5	;RP0=1, select bank1
  5215  1730  1303               	bcf	3,6	;RP1=0, select bank1
  5216  1731  083D               	movf	(_IOPORT^(0+128)+29),w
  5217  1732  1283               	bcf	3,5	;RP0=0, select bank0
  5218  1733  1303               	bcf	3,6	;RP1=0, select bank0
  5219  1734  00A4               	movwf	??_SaveStatus
  5220  1735  0824               	movf	??_SaveStatus,w
  5221  1736  00A0               	movwf	iEEputc@data
  5222  1737  308A               	movlw	138
  5223  1738  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5224                           
  5225                           ;main.c: 305: iEEputc(139, IOPORT.pulse[2]);
  5226  173D  1683               	bsf	3,5	;RP0=1, select bank1
  5227  173E  1303               	bcf	3,6	;RP1=0, select bank1
  5228  173F  083E               	movf	(_IOPORT^(0+128)+30),w
  5229  1740  1283               	bcf	3,5	;RP0=0, select bank0
  5230  1741  1303               	bcf	3,6	;RP1=0, select bank0
  5231  1742  00A4               	movwf	??_SaveStatus
  5232  1743  0824               	movf	??_SaveStatus,w
  5233  1744  00A0               	movwf	iEEputc@data
  5234  1745  308B               	movlw	139
  5235  1746  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5236                           
  5237                           ;main.c: 306: iEEputc(140, IOPORT.pulse[3]);
  5238  174B  1683               	bsf	3,5	;RP0=1, select bank1
  5239  174C  1303               	bcf	3,6	;RP1=0, select bank1
  5240  174D  083F               	movf	(_IOPORT^(0+128)+31),w
  5241  174E  1283               	bcf	3,5	;RP0=0, select bank0
  5242  174F  1303               	bcf	3,6	;RP1=0, select bank0
  5243  1750  00A4               	movwf	??_SaveStatus
  5244  1751  0824               	movf	??_SaveStatus,w
  5245  1752  00A0               	movwf	iEEputc@data
  5246  1753  308C               	movlw	140
  5247  1754  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5248                           
  5249                           ;main.c: 307: iEEputc(141, IOPORT.pulse[4]);
  5250  1759  1683               	bsf	3,5	;RP0=1, select bank1
  5251  175A  1303               	bcf	3,6	;RP1=0, select bank1
  5252  175B  0840               	movf	(_IOPORT^(0+128)+32),w
  5253  175C  1283               	bcf	3,5	;RP0=0, select bank0
  5254  175D  1303               	bcf	3,6	;RP1=0, select bank0
  5255  175E  00A4               	movwf	??_SaveStatus
  5256  175F  0824               	movf	??_SaveStatus,w
  5257  1760  00A0               	movwf	iEEputc@data
  5258  1761  308D               	movlw	141
  5259  1762  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5260                           
  5261                           ;main.c: 308: iEEputc(142, IOPORT.pulse[5]);
  5262  1767  1683               	bsf	3,5	;RP0=1, select bank1
  5263  1768  1303               	bcf	3,6	;RP1=0, select bank1
  5264  1769  0841               	movf	(_IOPORT^(0+128)+33),w
  5265  176A  1283               	bcf	3,5	;RP0=0, select bank0
  5266  176B  1303               	bcf	3,6	;RP1=0, select bank0
  5267  176C  00A4               	movwf	??_SaveStatus
  5268  176D  0824               	movf	??_SaveStatus,w
  5269  176E  00A0               	movwf	iEEputc@data
  5270  176F  308E               	movlw	142
  5271  1770  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5272                           
  5273                           ;main.c: 309: iEEputc(143, IOPORT.pulse[6]);
  5274  1775  1683               	bsf	3,5	;RP0=1, select bank1
  5275  1776  1303               	bcf	3,6	;RP1=0, select bank1
  5276  1777  0842               	movf	(_IOPORT^(0+128)+34),w
  5277  1778  1283               	bcf	3,5	;RP0=0, select bank0
  5278  1779  1303               	bcf	3,6	;RP1=0, select bank0
  5279  177A  00A4               	movwf	??_SaveStatus
  5280  177B  0824               	movf	??_SaveStatus,w
  5281  177C  00A0               	movwf	iEEputc@data
  5282  177D  308F               	movlw	143
  5283  177E  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5284                           
  5285                           ;main.c: 310: iEEputc(144, IOPORT.pulse[7]);
  5286  1783  1683               	bsf	3,5	;RP0=1, select bank1
  5287  1784  1303               	bcf	3,6	;RP1=0, select bank1
  5288  1785  0843               	movf	(_IOPORT^(0+128)+35),w
  5289  1786  1283               	bcf	3,5	;RP0=0, select bank0
  5290  1787  1303               	bcf	3,6	;RP1=0, select bank0
  5291  1788  00A4               	movwf	??_SaveStatus
  5292  1789  0824               	movf	??_SaveStatus,w
  5293  178A  00A0               	movwf	iEEputc@data
  5294  178B  3090               	movlw	144
  5295  178C  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5296                           
  5297                           ;main.c: 311: iEEputc(145, IOPORT.pulse[8]);
  5298  1791  1683               	bsf	3,5	;RP0=1, select bank1
  5299  1792  1303               	bcf	3,6	;RP1=0, select bank1
  5300  1793  0844               	movf	(_IOPORT^(0+128)+36),w
  5301  1794  1283               	bcf	3,5	;RP0=0, select bank0
  5302  1795  1303               	bcf	3,6	;RP1=0, select bank0
  5303  1796  00A4               	movwf	??_SaveStatus
  5304  1797  0824               	movf	??_SaveStatus,w
  5305  1798  00A0               	movwf	iEEputc@data
  5306  1799  3091               	movlw	145
  5307  179A  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5308                           
  5309                           ;main.c: 312: iEEputc(146, IOPORT.pulse[9]);
  5310  179F  1683               	bsf	3,5	;RP0=1, select bank1
  5311  17A0  1303               	bcf	3,6	;RP1=0, select bank1
  5312  17A1  0845               	movf	(_IOPORT^(0+128)+37),w
  5313  17A2  1283               	bcf	3,5	;RP0=0, select bank0
  5314  17A3  1303               	bcf	3,6	;RP1=0, select bank0
  5315  17A4  00A4               	movwf	??_SaveStatus
  5316  17A5  0824               	movf	??_SaveStatus,w
  5317  17A6  00A0               	movwf	iEEputc@data
  5318  17A7  3092               	movlw	146
  5319  17A8  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5320                           
  5321                           ;main.c: 313: iEEputc(147, IOPORT.pulse[10]);
  5322  17AD  1683               	bsf	3,5	;RP0=1, select bank1
  5323  17AE  1303               	bcf	3,6	;RP1=0, select bank1
  5324  17AF  0846               	movf	(_IOPORT^(0+128)+38),w
  5325  17B0  1283               	bcf	3,5	;RP0=0, select bank0
  5326  17B1  1303               	bcf	3,6	;RP1=0, select bank0
  5327  17B2  00A4               	movwf	??_SaveStatus
  5328  17B3  0824               	movf	??_SaveStatus,w
  5329  17B4  00A0               	movwf	iEEputc@data
  5330  17B5  3093               	movlw	147
  5331  17B6  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5332                           
  5333                           ;main.c: 314: iEEputc(148, IOPORT.pulse[11]);
  5334  17BB  1683               	bsf	3,5	;RP0=1, select bank1
  5335  17BC  1303               	bcf	3,6	;RP1=0, select bank1
  5336  17BD  0847               	movf	(_IOPORT^(0+128)+39),w
  5337  17BE  1283               	bcf	3,5	;RP0=0, select bank0
  5338  17BF  1303               	bcf	3,6	;RP1=0, select bank0
  5339  17C0  00A4               	movwf	??_SaveStatus
  5340  17C1  0824               	movf	??_SaveStatus,w
  5341  17C2  00A0               	movwf	iEEputc@data
  5342  17C3  3094               	movlw	148
  5343  17C4  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5344                           
  5345                           ;main.c: 315: iEEputc(149, IOPORT.pulse[12]);
  5346  17C9  1683               	bsf	3,5	;RP0=1, select bank1
  5347  17CA  1303               	bcf	3,6	;RP1=0, select bank1
  5348  17CB  0848               	movf	(_IOPORT^(0+128)+40),w
  5349  17CC  1283               	bcf	3,5	;RP0=0, select bank0
  5350  17CD  1303               	bcf	3,6	;RP1=0, select bank0
  5351  17CE  00A4               	movwf	??_SaveStatus
  5352  17CF  0824               	movf	??_SaveStatus,w
  5353  17D0  00A0               	movwf	iEEputc@data
  5354  17D1  3095               	movlw	149
  5355  17D2  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5356                           
  5357                           ;main.c: 316: iEEputc(150, IOPORT.pulse[13]);
  5358  17D7  1683               	bsf	3,5	;RP0=1, select bank1
  5359  17D8  1303               	bcf	3,6	;RP1=0, select bank1
  5360  17D9  0849               	movf	(_IOPORT^(0+128)+41),w
  5361  17DA  1283               	bcf	3,5	;RP0=0, select bank0
  5362  17DB  1303               	bcf	3,6	;RP1=0, select bank0
  5363  17DC  00A4               	movwf	??_SaveStatus
  5364  17DD  0824               	movf	??_SaveStatus,w
  5365  17DE  00A0               	movwf	iEEputc@data
  5366  17DF  3096               	movlw	150
  5367  17E0  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5368                           
  5369                           ;main.c: 317: iEEputc(151, IOPORT.pulse[14]);
  5370  17E5  1683               	bsf	3,5	;RP0=1, select bank1
  5371  17E6  1303               	bcf	3,6	;RP1=0, select bank1
  5372  17E7  084A               	movf	(_IOPORT^(0+128)+42),w
  5373  17E8  1283               	bcf	3,5	;RP0=0, select bank0
  5374  17E9  1303               	bcf	3,6	;RP1=0, select bank0
  5375  17EA  00A4               	movwf	??_SaveStatus
  5376  17EB  0824               	movf	??_SaveStatus,w
  5377  17EC  00A0               	movwf	iEEputc@data
  5378  17ED  3097               	movlw	151
  5379  17EE  160A  158A  25D1  160A  118A  	fcall	_iEEputc
  5380                           
  5381                           ;main.c: 318: iEEputc(152, IOPORT.pulse[15]);
  5382  17F3  1683               	bsf	3,5	;RP0=1, select bank1
  5383  17F4  1303               	bcf	3,6	;RP1=0, select bank1
  5384  17F5  084B               	movf	(_IOPORT^(0+128)+43),w
  5385  17F6  1283               	bcf	3,5	;RP0=0, select bank0
  5386  17F7  1303               	bcf	3,6	;RP1=0, select bank0
  5387  17F8  00A4               	movwf	??_SaveStatus
  5388  17F9  0824               	movf	??_SaveStatus,w
  5389  17FA  00A0               	movwf	iEEputc@data
  5390  17FB  3098               	movlw	152
  5391  17FC  160A  158A  25D1   	fcall	_iEEputc
  5392  17FF  0008               	return
  5393  1800                     __end_of_SaveStatus:	
  5394                           
  5395                           	psect	text13
  5396  087A                     __ptext13:	
  5397 ;; *************** function _SaveConfig *****************
  5398 ;; Defined at:
  5399 ;;		line 192 in file "main.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;		None
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  1    wreg      void 
  5406 ;; Registers used:
  5407 ;;		wreg, status,2, status,0, pclath, cstack
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5413 ;;      Params:         0       0       0       0       0
  5414 ;;      Locals:         0       0       0       0       0
  5415 ;;      Temps:          0       1       0       0       0
  5416 ;;      Totals:         0       1       0       0       0
  5417 ;;Total ram usage:        1 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    4
  5420 ;; This function calls:
  5421 ;;		_iEEputc
  5422 ;; This function is called by:
  5423 ;;		_main
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           
  5428                           ;psect for function _SaveConfig
  5429  087A                     _SaveConfig:	
  5430                           
  5431                           ;main.c: 194: iEEputc(0, 0x5A);
  5432                           
  5433                           ;incstack = 0
  5434                           ; Regs used in _SaveConfig: [wreg+status,2+status,0+pclath+cstack]
  5435  087A  305A               	movlw	90
  5436  087B  1283               	bcf	3,5	;RP0=0, select bank0
  5437  087C  1303               	bcf	3,6	;RP1=0, select bank0
  5438  087D  00A4               	movwf	??_SaveConfig
  5439  087E  0824               	movf	??_SaveConfig,w
  5440  087F  00A0               	movwf	iEEputc@data
  5441  0880  3000               	movlw	0
  5442  0881  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5443                           
  5444                           ;main.c: 195: iEEputc(1, IOPORTCONF.hw_address);
  5445  0886  1683               	bsf	3,5	;RP0=1, select bank3
  5446  0887  1703               	bsf	3,6	;RP1=1, select bank3
  5447  0888  0810               	movf	_IOPORTCONF^(0+384),w
  5448  0889  1283               	bcf	3,5	;RP0=0, select bank0
  5449  088A  1303               	bcf	3,6	;RP1=0, select bank0
  5450  088B  00A4               	movwf	??_SaveConfig
  5451  088C  0824               	movf	??_SaveConfig,w
  5452  088D  00A0               	movwf	iEEputc@data
  5453  088E  3001               	movlw	1
  5454  088F  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5455                           
  5456                           ;main.c: 196: iEEputc(2, IOPORTCONF.io[0].mascara_seguidor);
  5457  0894  1683               	bsf	3,5	;RP0=1, select bank3
  5458  0895  1703               	bsf	3,6	;RP1=1, select bank3
  5459  0896  0811               	movf	(_IOPORTCONF^(0+384)+1),w
  5460  0897  1283               	bcf	3,5	;RP0=0, select bank0
  5461  0898  1303               	bcf	3,6	;RP1=0, select bank0
  5462  0899  00A4               	movwf	??_SaveConfig
  5463  089A  0824               	movf	??_SaveConfig,w
  5464  089B  00A0               	movwf	iEEputc@data
  5465  089C  3002               	movlw	2
  5466  089D  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5467                           
  5468                           ;main.c: 197: iEEputc(3, IOPORTCONF.io[0].mascara_notif);
  5469  08A2  1683               	bsf	3,5	;RP0=1, select bank3
  5470  08A3  1703               	bsf	3,6	;RP1=1, select bank3
  5471  08A4  0812               	movf	(_IOPORTCONF^(0+384)+2),w
  5472  08A5  1283               	bcf	3,5	;RP0=0, select bank0
  5473  08A6  1303               	bcf	3,6	;RP1=0, select bank0
  5474  08A7  00A4               	movwf	??_SaveConfig
  5475  08A8  0824               	movf	??_SaveConfig,w
  5476  08A9  00A0               	movwf	iEEputc@data
  5477  08AA  3003               	movlw	3
  5478  08AB  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5479                           
  5480                           ;main.c: 198: iEEputc(4, IOPORTCONF.io[1].mascara_seguidor);
  5481  08B0  1683               	bsf	3,5	;RP0=1, select bank3
  5482  08B1  1703               	bsf	3,6	;RP1=1, select bank3
  5483  08B2  0813               	movf	(_IOPORTCONF^(0+384)+3),w
  5484  08B3  1283               	bcf	3,5	;RP0=0, select bank0
  5485  08B4  1303               	bcf	3,6	;RP1=0, select bank0
  5486  08B5  00A4               	movwf	??_SaveConfig
  5487  08B6  0824               	movf	??_SaveConfig,w
  5488  08B7  00A0               	movwf	iEEputc@data
  5489  08B8  3004               	movlw	4
  5490  08B9  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5491                           
  5492                           ;main.c: 199: iEEputc(5, IOPORTCONF.io[1].mascara_notif);
  5493  08BE  1683               	bsf	3,5	;RP0=1, select bank3
  5494  08BF  1703               	bsf	3,6	;RP1=1, select bank3
  5495  08C0  0814               	movf	(_IOPORTCONF^(0+384)+4),w
  5496  08C1  1283               	bcf	3,5	;RP0=0, select bank0
  5497  08C2  1303               	bcf	3,6	;RP1=0, select bank0
  5498  08C3  00A4               	movwf	??_SaveConfig
  5499  08C4  0824               	movf	??_SaveConfig,w
  5500  08C5  00A0               	movwf	iEEputc@data
  5501  08C6  3005               	movlw	5
  5502  08C7  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5503                           
  5504                           ;main.c: 200: iEEputc(6, IOPORTCONF.io[2].mascara_notif);
  5505  08CC  1683               	bsf	3,5	;RP0=1, select bank3
  5506  08CD  1703               	bsf	3,6	;RP1=1, select bank3
  5507  08CE  0816               	movf	(_IOPORTCONF^(0+384)+6),w
  5508  08CF  1283               	bcf	3,5	;RP0=0, select bank0
  5509  08D0  1303               	bcf	3,6	;RP1=0, select bank0
  5510  08D1  00A4               	movwf	??_SaveConfig
  5511  08D2  0824               	movf	??_SaveConfig,w
  5512  08D3  00A0               	movwf	iEEputc@data
  5513  08D4  3006               	movlw	6
  5514  08D5  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5515                           
  5516                           ;main.c: 201: iEEputc(7, IOPORTCONF.io[3].mascara_notif);
  5517  08DA  1683               	bsf	3,5	;RP0=1, select bank3
  5518  08DB  1703               	bsf	3,6	;RP1=1, select bank3
  5519  08DC  0818               	movf	(_IOPORTCONF^(0+384)+8),w
  5520  08DD  1283               	bcf	3,5	;RP0=0, select bank0
  5521  08DE  1303               	bcf	3,6	;RP1=0, select bank0
  5522  08DF  00A4               	movwf	??_SaveConfig
  5523  08E0  0824               	movf	??_SaveConfig,w
  5524  08E1  00A0               	movwf	iEEputc@data
  5525  08E2  3007               	movlw	7
  5526  08E3  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5527                           
  5528                           ;main.c: 202: iEEputc(8, IOPORTCONF.analog[0].maxh);
  5529  08E8  1683               	bsf	3,5	;RP0=1, select bank3
  5530  08E9  1703               	bsf	3,6	;RP1=1, select bank3
  5531  08EA  0819               	movf	(_IOPORTCONF^(0+384)+9),w
  5532  08EB  1283               	bcf	3,5	;RP0=0, select bank0
  5533  08EC  1303               	bcf	3,6	;RP1=0, select bank0
  5534  08ED  00A4               	movwf	??_SaveConfig
  5535  08EE  0824               	movf	??_SaveConfig,w
  5536  08EF  00A0               	movwf	iEEputc@data
  5537  08F0  3008               	movlw	8
  5538  08F1  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5539                           
  5540                           ;main.c: 203: iEEputc(9, IOPORTCONF.analog[0].maxl);
  5541  08F6  1683               	bsf	3,5	;RP0=1, select bank3
  5542  08F7  1703               	bsf	3,6	;RP1=1, select bank3
  5543  08F8  081A               	movf	(_IOPORTCONF^(0+384)+10),w
  5544  08F9  1283               	bcf	3,5	;RP0=0, select bank0
  5545  08FA  1303               	bcf	3,6	;RP1=0, select bank0
  5546  08FB  00A4               	movwf	??_SaveConfig
  5547  08FC  0824               	movf	??_SaveConfig,w
  5548  08FD  00A0               	movwf	iEEputc@data
  5549  08FE  3009               	movlw	9
  5550  08FF  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5551                           
  5552                           ;main.c: 204: iEEputc(10, IOPORTCONF.analog[0].minh);
  5553  0904  1683               	bsf	3,5	;RP0=1, select bank3
  5554  0905  1703               	bsf	3,6	;RP1=1, select bank3
  5555  0906  081B               	movf	(_IOPORTCONF^(0+384)+11),w
  5556  0907  1283               	bcf	3,5	;RP0=0, select bank0
  5557  0908  1303               	bcf	3,6	;RP1=0, select bank0
  5558  0909  00A4               	movwf	??_SaveConfig
  5559  090A  0824               	movf	??_SaveConfig,w
  5560  090B  00A0               	movwf	iEEputc@data
  5561  090C  300A               	movlw	10
  5562  090D  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5563                           
  5564                           ;main.c: 205: iEEputc(11, IOPORTCONF.analog[0].minl);
  5565  0912  1683               	bsf	3,5	;RP0=1, select bank3
  5566  0913  1703               	bsf	3,6	;RP1=1, select bank3
  5567  0914  081C               	movf	(_IOPORTCONF^(0+384)+12),w
  5568  0915  1283               	bcf	3,5	;RP0=0, select bank0
  5569  0916  1303               	bcf	3,6	;RP1=0, select bank0
  5570  0917  00A4               	movwf	??_SaveConfig
  5571  0918  0824               	movf	??_SaveConfig,w
  5572  0919  00A0               	movwf	iEEputc@data
  5573  091A  300B               	movlw	11
  5574  091B  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5575                           
  5576                           ;main.c: 206: iEEputc(12, IOPORTCONF.analog[1].maxh);
  5577  0920  1683               	bsf	3,5	;RP0=1, select bank3
  5578  0921  1703               	bsf	3,6	;RP1=1, select bank3
  5579  0922  081D               	movf	(_IOPORTCONF^(0+384)+13),w
  5580  0923  1283               	bcf	3,5	;RP0=0, select bank0
  5581  0924  1303               	bcf	3,6	;RP1=0, select bank0
  5582  0925  00A4               	movwf	??_SaveConfig
  5583  0926  0824               	movf	??_SaveConfig,w
  5584  0927  00A0               	movwf	iEEputc@data
  5585  0928  300C               	movlw	12
  5586  0929  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5587                           
  5588                           ;main.c: 207: iEEputc(13, IOPORTCONF.analog[1].maxl);
  5589  092E  1683               	bsf	3,5	;RP0=1, select bank3
  5590  092F  1703               	bsf	3,6	;RP1=1, select bank3
  5591  0930  081E               	movf	(_IOPORTCONF^(0+384)+14),w
  5592  0931  1283               	bcf	3,5	;RP0=0, select bank0
  5593  0932  1303               	bcf	3,6	;RP1=0, select bank0
  5594  0933  00A4               	movwf	??_SaveConfig
  5595  0934  0824               	movf	??_SaveConfig,w
  5596  0935  00A0               	movwf	iEEputc@data
  5597  0936  300D               	movlw	13
  5598  0937  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5599                           
  5600                           ;main.c: 208: iEEputc(14, IOPORTCONF.analog[1].minh);
  5601  093C  1683               	bsf	3,5	;RP0=1, select bank3
  5602  093D  1703               	bsf	3,6	;RP1=1, select bank3
  5603  093E  081F               	movf	(_IOPORTCONF^(0+384)+15),w
  5604  093F  1283               	bcf	3,5	;RP0=0, select bank0
  5605  0940  1303               	bcf	3,6	;RP1=0, select bank0
  5606  0941  00A4               	movwf	??_SaveConfig
  5607  0942  0824               	movf	??_SaveConfig,w
  5608  0943  00A0               	movwf	iEEputc@data
  5609  0944  300E               	movlw	14
  5610  0945  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5611                           
  5612                           ;main.c: 209: iEEputc(15, IOPORTCONF.analog[1].minl);
  5613  094A  1683               	bsf	3,5	;RP0=1, select bank3
  5614  094B  1703               	bsf	3,6	;RP1=1, select bank3
  5615  094C  0820               	movf	(_IOPORTCONF^(0+384)+16),w
  5616  094D  1283               	bcf	3,5	;RP0=0, select bank0
  5617  094E  1303               	bcf	3,6	;RP1=0, select bank0
  5618  094F  00A4               	movwf	??_SaveConfig
  5619  0950  0824               	movf	??_SaveConfig,w
  5620  0951  00A0               	movwf	iEEputc@data
  5621  0952  300F               	movlw	15
  5622  0953  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5623                           
  5624                           ;main.c: 210: iEEputc(16, IOPORTCONF.analog[2].maxh);
  5625  0958  1683               	bsf	3,5	;RP0=1, select bank3
  5626  0959  1703               	bsf	3,6	;RP1=1, select bank3
  5627  095A  0821               	movf	(_IOPORTCONF^(0+384)+17),w
  5628  095B  1283               	bcf	3,5	;RP0=0, select bank0
  5629  095C  1303               	bcf	3,6	;RP1=0, select bank0
  5630  095D  00A4               	movwf	??_SaveConfig
  5631  095E  0824               	movf	??_SaveConfig,w
  5632  095F  00A0               	movwf	iEEputc@data
  5633  0960  3010               	movlw	16
  5634  0961  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5635                           
  5636                           ;main.c: 211: iEEputc(17, IOPORTCONF.analog[2].maxl);
  5637  0966  1683               	bsf	3,5	;RP0=1, select bank3
  5638  0967  1703               	bsf	3,6	;RP1=1, select bank3
  5639  0968  0822               	movf	(_IOPORTCONF^(0+384)+18),w
  5640  0969  1283               	bcf	3,5	;RP0=0, select bank0
  5641  096A  1303               	bcf	3,6	;RP1=0, select bank0
  5642  096B  00A4               	movwf	??_SaveConfig
  5643  096C  0824               	movf	??_SaveConfig,w
  5644  096D  00A0               	movwf	iEEputc@data
  5645  096E  3011               	movlw	17
  5646  096F  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5647                           
  5648                           ;main.c: 212: iEEputc(18, IOPORTCONF.analog[2].minh);
  5649  0974  1683               	bsf	3,5	;RP0=1, select bank3
  5650  0975  1703               	bsf	3,6	;RP1=1, select bank3
  5651  0976  0823               	movf	(_IOPORTCONF^(0+384)+19),w
  5652  0977  1283               	bcf	3,5	;RP0=0, select bank0
  5653  0978  1303               	bcf	3,6	;RP1=0, select bank0
  5654  0979  00A4               	movwf	??_SaveConfig
  5655  097A  0824               	movf	??_SaveConfig,w
  5656  097B  00A0               	movwf	iEEputc@data
  5657  097C  3012               	movlw	18
  5658  097D  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5659                           
  5660                           ;main.c: 213: iEEputc(19, IOPORTCONF.analog[2].minl);
  5661  0982  1683               	bsf	3,5	;RP0=1, select bank3
  5662  0983  1703               	bsf	3,6	;RP1=1, select bank3
  5663  0984  0824               	movf	(_IOPORTCONF^(0+384)+20),w
  5664  0985  1283               	bcf	3,5	;RP0=0, select bank0
  5665  0986  1303               	bcf	3,6	;RP1=0, select bank0
  5666  0987  00A4               	movwf	??_SaveConfig
  5667  0988  0824               	movf	??_SaveConfig,w
  5668  0989  00A0               	movwf	iEEputc@data
  5669  098A  3013               	movlw	19
  5670  098B  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5671                           
  5672                           ;main.c: 214: iEEputc(20, IOPORTCONF.analog[3].maxh);
  5673  0990  1683               	bsf	3,5	;RP0=1, select bank3
  5674  0991  1703               	bsf	3,6	;RP1=1, select bank3
  5675  0992  0825               	movf	(_IOPORTCONF^(0+384)+21),w
  5676  0993  1283               	bcf	3,5	;RP0=0, select bank0
  5677  0994  1303               	bcf	3,6	;RP1=0, select bank0
  5678  0995  00A4               	movwf	??_SaveConfig
  5679  0996  0824               	movf	??_SaveConfig,w
  5680  0997  00A0               	movwf	iEEputc@data
  5681  0998  3014               	movlw	20
  5682  0999  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5683                           
  5684                           ;main.c: 215: iEEputc(21, IOPORTCONF.analog[3].maxl);
  5685  099E  1683               	bsf	3,5	;RP0=1, select bank3
  5686  099F  1703               	bsf	3,6	;RP1=1, select bank3
  5687  09A0  0826               	movf	(_IOPORTCONF^(0+384)+22),w
  5688  09A1  1283               	bcf	3,5	;RP0=0, select bank0
  5689  09A2  1303               	bcf	3,6	;RP1=0, select bank0
  5690  09A3  00A4               	movwf	??_SaveConfig
  5691  09A4  0824               	movf	??_SaveConfig,w
  5692  09A5  00A0               	movwf	iEEputc@data
  5693  09A6  3015               	movlw	21
  5694  09A7  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5695                           
  5696                           ;main.c: 216: iEEputc(22, IOPORTCONF.analog[3].minh);
  5697  09AC  1683               	bsf	3,5	;RP0=1, select bank3
  5698  09AD  1703               	bsf	3,6	;RP1=1, select bank3
  5699  09AE  0827               	movf	(_IOPORTCONF^(0+384)+23),w
  5700  09AF  1283               	bcf	3,5	;RP0=0, select bank0
  5701  09B0  1303               	bcf	3,6	;RP1=0, select bank0
  5702  09B1  00A4               	movwf	??_SaveConfig
  5703  09B2  0824               	movf	??_SaveConfig,w
  5704  09B3  00A0               	movwf	iEEputc@data
  5705  09B4  3016               	movlw	22
  5706  09B5  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5707                           
  5708                           ;main.c: 217: iEEputc(23, IOPORTCONF.analog[3].minl);
  5709  09BA  1683               	bsf	3,5	;RP0=1, select bank3
  5710  09BB  1703               	bsf	3,6	;RP1=1, select bank3
  5711  09BC  0828               	movf	(_IOPORTCONF^(0+384)+24),w
  5712  09BD  1283               	bcf	3,5	;RP0=0, select bank0
  5713  09BE  1303               	bcf	3,6	;RP1=0, select bank0
  5714  09BF  00A4               	movwf	??_SaveConfig
  5715  09C0  0824               	movf	??_SaveConfig,w
  5716  09C1  00A0               	movwf	iEEputc@data
  5717  09C2  3017               	movlw	23
  5718  09C3  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5719                           
  5720                           ;main.c: 218: iEEputc(24, IOPORTCONF.mascara_seguidor_an);
  5721  09C8  1683               	bsf	3,5	;RP0=1, select bank3
  5722  09C9  1703               	bsf	3,6	;RP1=1, select bank3
  5723  09CA  0829               	movf	(_IOPORTCONF^(0+384)+25),w
  5724  09CB  1283               	bcf	3,5	;RP0=0, select bank0
  5725  09CC  1303               	bcf	3,6	;RP1=0, select bank0
  5726  09CD  00A4               	movwf	??_SaveConfig
  5727  09CE  0824               	movf	??_SaveConfig,w
  5728  09CF  00A0               	movwf	iEEputc@data
  5729  09D0  3018               	movlw	24
  5730  09D1  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5731                           
  5732                           ;main.c: 219: iEEputc(25, IOPORTCONF.mascara_notif_an);
  5733  09D6  1683               	bsf	3,5	;RP0=1, select bank3
  5734  09D7  1703               	bsf	3,6	;RP1=1, select bank3
  5735  09D8  082A               	movf	(_IOPORTCONF^(0+384)+26),w
  5736  09D9  1283               	bcf	3,5	;RP0=0, select bank0
  5737  09DA  1303               	bcf	3,6	;RP1=0, select bank0
  5738  09DB  00A4               	movwf	??_SaveConfig
  5739  09DC  0824               	movf	??_SaveConfig,w
  5740  09DD  00A0               	movwf	iEEputc@data
  5741  09DE  3019               	movlw	25
  5742  09DF  160A  158A  25D1  120A  158A  	fcall	_iEEputc
  5743                           
  5744                           ;main.c: 220: iEEputc(26, IOPORTCONF.baud_rate);
  5745  09E4  1683               	bsf	3,5	;RP0=1, select bank3
  5746  09E5  1703               	bsf	3,6	;RP1=1, select bank3
  5747  09E6  082B               	movf	(_IOPORTCONF^(0+384)+27),w
  5748  09E7  1283               	bcf	3,5	;RP0=0, select bank0
  5749  09E8  1303               	bcf	3,6	;RP1=0, select bank0
  5750  09E9  00A4               	movwf	??_SaveConfig
  5751  09EA  0824               	movf	??_SaveConfig,w
  5752  09EB  00A0               	movwf	iEEputc@data
  5753  09EC  301A               	movlw	26
  5754  09ED  160A  158A  25D1   	fcall	_iEEputc
  5755  09F0  0008               	return
  5756  09F1                     __end_of_SaveConfig:	
  5757                           
  5758                           	psect	text14
  5759  1DD1                     __ptext14:	
  5760 ;; *************** function _iEEputc *****************
  5761 ;; Defined at:
  5762 ;;		line 27 in file "iee.c"
  5763 ;; Parameters:    Size  Location     Type
  5764 ;;  address         1    wreg     unsigned char 
  5765 ;;  data            1    0[BANK0 ] unsigned char 
  5766 ;; Auto vars:     Size  Location     Type
  5767 ;;  address         1    2[BANK0 ] unsigned char 
  5768 ;;  INTCON_SAVE     1    3[BANK0 ] unsigned char 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, status,2
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5778 ;;      Params:         0       1       0       0       0
  5779 ;;      Locals:         0       2       0       0       0
  5780 ;;      Temps:          0       1       0       0       0
  5781 ;;      Totals:         0       4       0       0       0
  5782 ;;Total ram usage:        4 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:    3
  5785 ;; This function calls:
  5786 ;;		Nothing
  5787 ;; This function is called by:
  5788 ;;		_SaveConfig
  5789 ;;		_SaveStatus
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           
  5794                           ;psect for function _iEEputc
  5795  1DD1                     _iEEputc:	
  5796                           
  5797                           ;incstack = 0
  5798                           ; Regs used in _iEEputc: [wreg+status,2]
  5799                           ;iEEputc@address stored from wreg
  5800  1DD1  1283               	bcf	3,5	;RP0=0, select bank0
  5801  1DD2  1303               	bcf	3,6	;RP1=0, select bank0
  5802  1DD3  00A2               	movwf	iEEputc@address
  5803                           
  5804                           ;iee.c: 29: unsigned char INTCON_SAVE;
  5805                           ;iee.c: 31: EEADR = address;
  5806  1DD4  0822               	movf	iEEputc@address,w
  5807  1DD5  1283               	bcf	3,5	;RP0=0, select bank2
  5808  1DD6  1703               	bsf	3,6	;RP1=1, select bank2
  5809  1DD7  008D               	movwf	13	;volatile
  5810                           
  5811                           ;iee.c: 32: EEDATA = data;
  5812  1DD8  1283               	bcf	3,5	;RP0=0, select bank0
  5813  1DD9  1303               	bcf	3,6	;RP1=0, select bank0
  5814  1DDA  0820               	movf	iEEputc@data,w
  5815  1DDB  1283               	bcf	3,5	;RP0=0, select bank2
  5816  1DDC  1703               	bsf	3,6	;RP1=1, select bank2
  5817  1DDD  008C               	movwf	12	;volatile
  5818                           
  5819                           ;iee.c: 34: EEPGD = 0;
  5820  1DDE  1683               	bsf	3,5	;RP0=1, select bank3
  5821  1DDF  1703               	bsf	3,6	;RP1=1, select bank3
  5822  1DE0  138C               	bcf	12,7	;volsfr
  5823                           
  5824                           ;iee.c: 36: WREN = 1;
  5825  1DE1  150C               	bsf	12,2	;volsfr
  5826                           
  5827                           ;iee.c: 38: INTCON_SAVE = INTCON;
  5828  1DE2  080B               	movf	11,w	;volatile
  5829  1DE3  1283               	bcf	3,5	;RP0=0, select bank0
  5830  1DE4  1303               	bcf	3,6	;RP1=0, select bank0
  5831  1DE5  00A1               	movwf	??_iEEputc
  5832  1DE6  0821               	movf	??_iEEputc,w
  5833  1DE7  00A3               	movwf	iEEputc@INTCON_SAVE
  5834                           
  5835                           ;iee.c: 39: INTCON = 0;
  5836  1DE8  018B               	clrf	11	;volatile
  5837                           
  5838                           ;iee.c: 41: EECON2 = 0x55;
  5839  1DE9  3055               	movlw	85
  5840  1DEA  1683               	bsf	3,5	;RP0=1, select bank3
  5841  1DEB  1703               	bsf	3,6	;RP1=1, select bank3
  5842  1DEC  008D               	movwf	13	;volsfr
  5843                           
  5844                           ;iee.c: 42: EECON2 = 0xAA;
  5845  1DED  30AA               	movlw	170
  5846  1DEE  008D               	movwf	13	;volsfr
  5847                           
  5848                           ;iee.c: 44: WR = 1;
  5849  1DEF  148C               	bsf	12,1	;volsfr
  5850                           
  5851                           ;iee.c: 45: INTCON = INTCON_SAVE;
  5852  1DF0  1283               	bcf	3,5	;RP0=0, select bank0
  5853  1DF1  1303               	bcf	3,6	;RP1=0, select bank0
  5854  1DF2  0823               	movf	iEEputc@INTCON_SAVE,w
  5855  1DF3  008B               	movwf	11	;volatile
  5856                           
  5857                           ;iee.c: 47: __nop();
  5858  1DF4  0000               	nop
  5859  1DF5                     l23:	
  5860                           ;iee.c: 49: while(EEIF == 0)
  5861                           
  5862  1DF5  1283               	bcf	3,5	;RP0=0, select bank0
  5863  1DF6  1303               	bcf	3,6	;RP1=0, select bank0
  5864  1DF7  1A0D               	btfsc	13,4	;volatile
  5865  1DF8  2DFC               	goto	l25
  5866  1DF9  0064               	clrwdt	;# 
  5867                           
  5868                           ;iee.c: 52: __nop();
  5869  1DFA  0000               	nop
  5870  1DFB  2DF5               	goto	l23
  5871  1DFC                     l25:	
  5872                           
  5873                           ;iee.c: 53: }
  5874                           ;iee.c: 55: WREN = 0;
  5875  1DFC  1683               	bsf	3,5	;RP0=1, select bank3
  5876  1DFD  1703               	bsf	3,6	;RP1=1, select bank3
  5877  1DFE  110C               	bcf	12,2	;volsfr
  5878                           
  5879                           ;iee.c: 56: EEIF = 0;
  5880  1DFF  1283               	bcf	3,5	;RP0=0, select bank0
  5881  1E00  1303               	bcf	3,6	;RP1=0, select bank0
  5882  1E01  120D               	bcf	13,4	;volatile
  5883  1E02  0008               	return
  5884  1E03                     __end_of_iEEputc:	
  5885                           
  5886                           	psect	text15
  5887  13CB                     __ptext15:	
  5888 ;; *************** function _PrintInfoScreen *****************
  5889 ;; Defined at:
  5890 ;;		line 431 in file "main.c"
  5891 ;; Parameters:    Size  Location     Type
  5892 ;;		None
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  str            19   19[BANK0 ] unsigned char [19]
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5904 ;;      Params:         0       0       0       0       0
  5905 ;;      Locals:         0      19       0       0       0
  5906 ;;      Temps:          0       2       0       0       0
  5907 ;;      Totals:         0      21       0       0       0
  5908 ;;Total ram usage:       21 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    7
  5911 ;; This function calls:
  5912 ;;		_LCDMsg
  5913 ;;		_PrintDiaSem
  5914 ;;		_PrintMes
  5915 ;;		_utoa
  5916 ;; This function is called by:
  5917 ;;		_main
  5918 ;; This function uses a non-reentrant model
  5919 ;;
  5920                           
  5921                           
  5922                           ;psect for function _PrintInfoScreen
  5923  13CB                     _PrintInfoScreen:	
  5924                           
  5925                           ;main.c: 433: char str[19];
  5926                           ;main.c: 437: PrintDiaSem(gFechaHora.fecha.dia + 1, str);
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in _PrintInfoScreen: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5930  13CB  3033               	movlw	(low (PrintInfoScreen@str| 0))& (0+255)
  5931  13CC  1283               	bcf	3,5	;RP0=0, select bank0
  5932  13CD  1303               	bcf	3,6	;RP1=0, select bank0
  5933  13CE  00B1               	movwf	??_PrintInfoScreen
  5934  13CF  0831               	movf	??_PrintInfoScreen,w
  5935  13D0  00A0               	movwf	PrintDiaSem@str
  5936  13D1  0851               	movf	_gFechaHora+2,w
  5937  13D2  3E01               	addlw	1
  5938  13D3  160A  118A  2262  160A  118A  	fcall	_PrintDiaSem
  5939                           
  5940                           ;main.c: 438: str[3] = ' ';
  5941  13D8  3020               	movlw	32
  5942  13D9  1283               	bcf	3,5	;RP0=0, select bank0
  5943  13DA  1303               	bcf	3,6	;RP1=0, select bank0
  5944  13DB  00B1               	movwf	??_PrintInfoScreen
  5945  13DC  0831               	movf	??_PrintInfoScreen,w
  5946  13DD  00B6               	movwf	PrintInfoScreen@str+3
  5947                           
  5948                           ;main.c: 439: if(gFechaHora.fecha.mes < 10)
  5949  13DE  300A               	movlw	10
  5950  13DF  0250               	subwf	_gFechaHora+1,w
  5951  13E0  1803               	skipnc
  5952  13E1  2BF3               	goto	l4247
  5953                           
  5954                           ;main.c: 440: {
  5955                           ;main.c: 441: str[4] = '0';
  5956  13E2  3030               	movlw	48
  5957  13E3  00B1               	movwf	??_PrintInfoScreen
  5958  13E4  0831               	movf	??_PrintInfoScreen,w
  5959  13E5  00B7               	movwf	PrintInfoScreen@str+4
  5960                           
  5961                           ;main.c: 442: utoa(&str[5], gFechaHora.fecha.mes, 10);
  5962  13E6  0850               	movf	_gFechaHora+1,w
  5963  13E7  00B1               	movwf	??_PrintInfoScreen
  5964  13E8  01B2               	clrf	??_PrintInfoScreen+1
  5965  13E9  0831               	movf	??_PrintInfoScreen,w
  5966  13EA  00A8               	movwf	utoa@val
  5967  13EB  0832               	movf	??_PrintInfoScreen+1,w
  5968  13EC  00A9               	movwf	utoa@val+1
  5969  13ED  300A               	movlw	10
  5970  13EE  00AA               	movwf	utoa@base
  5971  13EF  3000               	movlw	0
  5972  13F0  00AB               	movwf	utoa@base+1
  5973  13F1  3038               	movlw	(low ((PrintInfoScreen@str| 0+5)))& (0+255)
  5974  13F2  2C01               	goto	L9
  5975  13F3                     l4247:	
  5976                           ;main.c: 443: }
  5977                           
  5978                           
  5979                           ;main.c: 444: else
  5980                           ;main.c: 445: {
  5981                           ;main.c: 446: utoa(&str[4], gFechaHora.fecha.mes, 10);
  5982  13F3  1283               	bcf	3,5	;RP0=0, select bank0
  5983  13F4  1303               	bcf	3,6	;RP1=0, select bank0
  5984  13F5  0850               	movf	_gFechaHora+1,w
  5985  13F6  00B1               	movwf	??_PrintInfoScreen
  5986  13F7  01B2               	clrf	??_PrintInfoScreen+1
  5987  13F8  0831               	movf	??_PrintInfoScreen,w
  5988  13F9  00A8               	movwf	utoa@val
  5989  13FA  0832               	movf	??_PrintInfoScreen+1,w
  5990  13FB  00A9               	movwf	utoa@val+1
  5991  13FC  300A               	movlw	10
  5992  13FD  00AA               	movwf	utoa@base
  5993  13FE  3000               	movlw	0
  5994  13FF  00AB               	movwf	utoa@base+1
  5995  1400  3037               	movlw	(low ((PrintInfoScreen@str| 0+4)))& (0+255)
  5996  1401                     L9:	
  5997  1401  160A  158A  2794  160A  118A  	fcall	_utoa
  5998                           
  5999                           ;main.c: 447: }
  6000                           ;main.c: 448: str[6] = '-';
  6001  1406  302D               	movlw	45
  6002  1407  1283               	bcf	3,5	;RP0=0, select bank0
  6003  1408  1303               	bcf	3,6	;RP1=0, select bank0
  6004  1409  00B1               	movwf	??_PrintInfoScreen
  6005  140A  0831               	movf	??_PrintInfoScreen,w
  6006  140B  00B9               	movwf	PrintInfoScreen@str+6
  6007                           
  6008                           ;main.c: 449: PrintMes(gFechaHora.fecha.mes + 1, &str[7]);
  6009  140C  303A               	movlw	(low ((PrintInfoScreen@str| 0+7)))& (0+255)
  6010  140D  00B1               	movwf	??_PrintInfoScreen
  6011  140E  0831               	movf	??_PrintInfoScreen,w
  6012  140F  00A0               	movwf	PrintMes@str
  6013  1410  0850               	movf	_gFechaHora+1,w
  6014  1411  3E01               	addlw	1
  6015  1412  160A  118A  257E  160A  118A  	fcall	_PrintMes
  6016                           
  6017                           ;main.c: 450: str[10] = ' ';
  6018  1417  3020               	movlw	32
  6019  1418  1283               	bcf	3,5	;RP0=0, select bank0
  6020  1419  1303               	bcf	3,6	;RP1=0, select bank0
  6021  141A  00B1               	movwf	??_PrintInfoScreen
  6022  141B  0831               	movf	??_PrintInfoScreen,w
  6023  141C  00BD               	movwf	PrintInfoScreen@str+10
  6024                           
  6025                           ;main.c: 451: str[11] = ' ';
  6026  141D  3020               	movlw	32
  6027  141E  00B1               	movwf	??_PrintInfoScreen
  6028  141F  0831               	movf	??_PrintInfoScreen,w
  6029  1420  00BE               	movwf	PrintInfoScreen@str+11
  6030                           
  6031                           ;main.c: 452: str[12] = ' ';
  6032  1421  3020               	movlw	32
  6033  1422  00B1               	movwf	??_PrintInfoScreen
  6034  1423  0831               	movf	??_PrintInfoScreen,w
  6035  1424  00BF               	movwf	PrintInfoScreen@str+12
  6036                           
  6037                           ;main.c: 453: if(gFechaHora.hora.horas < 10)
  6038  1425  300A               	movlw	10
  6039  1426  0253               	subwf	_gFechaHora+4,w
  6040  1427  1803               	skipnc
  6041  1428  2C3A               	goto	l4257
  6042                           
  6043                           ;main.c: 454: {
  6044                           ;main.c: 455: str[13] = '0';
  6045  1429  3030               	movlw	48
  6046  142A  00B1               	movwf	??_PrintInfoScreen
  6047  142B  0831               	movf	??_PrintInfoScreen,w
  6048  142C  00C0               	movwf	PrintInfoScreen@str+13
  6049                           
  6050                           ;main.c: 456: utoa(&str[14], gFechaHora.hora.horas, 10);
  6051  142D  0853               	movf	_gFechaHora+4,w
  6052  142E  00B1               	movwf	??_PrintInfoScreen
  6053  142F  01B2               	clrf	??_PrintInfoScreen+1
  6054  1430  0831               	movf	??_PrintInfoScreen,w
  6055  1431  00A8               	movwf	utoa@val
  6056  1432  0832               	movf	??_PrintInfoScreen+1,w
  6057  1433  00A9               	movwf	utoa@val+1
  6058  1434  300A               	movlw	10
  6059  1435  00AA               	movwf	utoa@base
  6060  1436  3000               	movlw	0
  6061  1437  00AB               	movwf	utoa@base+1
  6062  1438  3041               	movlw	(low ((PrintInfoScreen@str| 0+14)))& (0+255)
  6063  1439  2C48               	goto	L10
  6064  143A                     l4257:	
  6065                           ;main.c: 457: }
  6066                           
  6067                           
  6068                           ;main.c: 458: else
  6069                           ;main.c: 459: {
  6070                           ;main.c: 460: utoa(&str[13], gFechaHora.hora.horas, 10);
  6071  143A  1283               	bcf	3,5	;RP0=0, select bank0
  6072  143B  1303               	bcf	3,6	;RP1=0, select bank0
  6073  143C  0853               	movf	_gFechaHora+4,w
  6074  143D  00B1               	movwf	??_PrintInfoScreen
  6075  143E  01B2               	clrf	??_PrintInfoScreen+1
  6076  143F  0831               	movf	??_PrintInfoScreen,w
  6077  1440  00A8               	movwf	utoa@val
  6078  1441  0832               	movf	??_PrintInfoScreen+1,w
  6079  1442  00A9               	movwf	utoa@val+1
  6080  1443  300A               	movlw	10
  6081  1444  00AA               	movwf	utoa@base
  6082  1445  3000               	movlw	0
  6083  1446  00AB               	movwf	utoa@base+1
  6084  1447  3040               	movlw	(low ((PrintInfoScreen@str| 0+13)))& (0+255)
  6085  1448                     L10:	
  6086  1448  160A  158A  2794  160A  118A  	fcall	_utoa
  6087                           
  6088                           ;main.c: 461: }
  6089                           ;main.c: 462: str[15] = ':';
  6090  144D  303A               	movlw	58
  6091  144E  1283               	bcf	3,5	;RP0=0, select bank0
  6092  144F  1303               	bcf	3,6	;RP1=0, select bank0
  6093  1450  00B1               	movwf	??_PrintInfoScreen
  6094  1451  0831               	movf	??_PrintInfoScreen,w
  6095  1452  00C2               	movwf	PrintInfoScreen@str+15
  6096                           
  6097                           ;main.c: 463: if(gFechaHora.hora.minutos < 10)
  6098  1453  300A               	movlw	10
  6099  1454  0254               	subwf	_gFechaHora+5,w
  6100  1455  1803               	skipnc
  6101  1456  2C68               	goto	l4267
  6102                           
  6103                           ;main.c: 464: {
  6104                           ;main.c: 465: str[16] = '0';
  6105  1457  3030               	movlw	48
  6106  1458  00B1               	movwf	??_PrintInfoScreen
  6107  1459  0831               	movf	??_PrintInfoScreen,w
  6108  145A  00C3               	movwf	PrintInfoScreen@str+16
  6109                           
  6110                           ;main.c: 466: utoa(&str[17], gFechaHora.hora.minutos, 10);
  6111  145B  0854               	movf	_gFechaHora+5,w
  6112  145C  00B1               	movwf	??_PrintInfoScreen
  6113  145D  01B2               	clrf	??_PrintInfoScreen+1
  6114  145E  0831               	movf	??_PrintInfoScreen,w
  6115  145F  00A8               	movwf	utoa@val
  6116  1460  0832               	movf	??_PrintInfoScreen+1,w
  6117  1461  00A9               	movwf	utoa@val+1
  6118  1462  300A               	movlw	10
  6119  1463  00AA               	movwf	utoa@base
  6120  1464  3000               	movlw	0
  6121  1465  00AB               	movwf	utoa@base+1
  6122  1466  3044               	movlw	(low ((PrintInfoScreen@str| 0+17)))& (0+255)
  6123  1467  2C76               	goto	L11
  6124  1468                     l4267:	
  6125                           ;main.c: 467: }
  6126                           
  6127                           
  6128                           ;main.c: 468: else
  6129                           ;main.c: 469: {
  6130                           ;main.c: 470: utoa(&str[16], gFechaHora.hora.minutos, 10);
  6131  1468  1283               	bcf	3,5	;RP0=0, select bank0
  6132  1469  1303               	bcf	3,6	;RP1=0, select bank0
  6133  146A  0854               	movf	_gFechaHora+5,w
  6134  146B  00B1               	movwf	??_PrintInfoScreen
  6135  146C  01B2               	clrf	??_PrintInfoScreen+1
  6136  146D  0831               	movf	??_PrintInfoScreen,w
  6137  146E  00A8               	movwf	utoa@val
  6138  146F  0832               	movf	??_PrintInfoScreen+1,w
  6139  1470  00A9               	movwf	utoa@val+1
  6140  1471  300A               	movlw	10
  6141  1472  00AA               	movwf	utoa@base
  6142  1473  3000               	movlw	0
  6143  1474  00AB               	movwf	utoa@base+1
  6144  1475  3043               	movlw	(low ((PrintInfoScreen@str| 0+16)))& (0+255)
  6145  1476                     L11:	
  6146  1476  160A  158A  2794  160A  118A  	fcall	_utoa
  6147                           
  6148                           ;main.c: 471: }
  6149                           ;main.c: 472: str[18] = '\0';
  6150  147B  1283               	bcf	3,5	;RP0=0, select bank0
  6151  147C  1303               	bcf	3,6	;RP1=0, select bank0
  6152  147D  01C5               	clrf	PrintInfoScreen@str+18
  6153                           
  6154                           ;main.c: 473: LCDMsg(1, 2, str);
  6155  147E  3002               	movlw	2
  6156  147F  00B1               	movwf	??_PrintInfoScreen
  6157  1480  0831               	movf	??_PrintInfoScreen,w
  6158  1481  00A8               	movwf	LCDMsg@columna
  6159  1482  3033               	movlw	(low (PrintInfoScreen@str| 0))& (0+255)
  6160  1483  00A9               	movwf	LCDMsg@msg
  6161  1484  3000               	movlw	0
  6162  1485  00AA               	movwf	LCDMsg@msg+1
  6163  1486  3001               	movlw	1
  6164  1487  160A  118A  2004   	fcall	_LCDMsg
  6165  148A  0008               	return
  6166  148B                     __end_of_PrintInfoScreen:	
  6167                           
  6168                           	psect	text16
  6169  1F94                     __ptext16:	
  6170 ;; *************** function _utoa *****************
  6171 ;; Defined at:
  6172 ;;		line 17 in file "/opt/microchip/xc8/v1.44/sources/common/itoa.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;  buf             1    wreg     PTR unsigned char 
  6175 ;;		 -> PrintInfoScreen@str(19), 
  6176 ;;  val             2    8[BANK0 ] unsigned int 
  6177 ;;  base            2   10[BANK0 ] int 
  6178 ;; Auto vars:     Size  Location     Type
  6179 ;;  buf             1   16[BANK0 ] PTR unsigned char 
  6180 ;;		 -> PrintInfoScreen@str(19), 
  6181 ;;  v               2   13[BANK0 ] unsigned int 
  6182 ;;  c               1   15[BANK0 ] unsigned char 
  6183 ;; Return value:  Size  Location     Type
  6184 ;;                  1    wreg      PTR unsigned char 
  6185 ;; Registers used:
  6186 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6187 ;; Tracked objects:
  6188 ;;		On entry : 0/0
  6189 ;;		On exit  : 0/0
  6190 ;;		Unchanged: 0/0
  6191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6192 ;;      Params:         0       4       0       0       0
  6193 ;;      Locals:         0       4       0       0       0
  6194 ;;      Temps:          0       1       0       0       0
  6195 ;;      Totals:         0       9       0       0       0
  6196 ;;Total ram usage:        9 bytes
  6197 ;; Hardware stack levels used:    1
  6198 ;; Hardware stack levels required when called:    4
  6199 ;; This function calls:
  6200 ;;		___lwdiv
  6201 ;;		___lwmod
  6202 ;; This function is called by:
  6203 ;;		_PrintInfoScreen
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _utoa
  6209  1F94                     _utoa:	
  6210                           
  6211                           ;incstack = 0
  6212                           ; Regs used in _utoa: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6213                           ;utoa@buf stored from wreg
  6214  1F94  1283               	bcf	3,5	;RP0=0, select bank0
  6215  1F95  1303               	bcf	3,6	;RP1=0, select bank0
  6216  1F96  00B0               	movwf	utoa@buf
  6217  1F97  0829               	movf	utoa@val+1,w
  6218  1F98  00AE               	movwf	utoa@v+1
  6219  1F99  0828               	movf	utoa@val,w
  6220  1F9A  00AD               	movwf	utoa@v
  6221  1F9B                     l3667:	
  6222  1F9B  082B               	movf	utoa@base+1,w
  6223  1F9C  00A1               	movwf	___lwdiv@divisor+1
  6224  1F9D  082A               	movf	utoa@base,w
  6225  1F9E  00A0               	movwf	___lwdiv@divisor
  6226  1F9F  082E               	movf	utoa@v+1,w
  6227  1FA0  00A3               	movwf	___lwdiv@dividend+1
  6228  1FA1  082D               	movf	utoa@v,w
  6229  1FA2  00A2               	movwf	___lwdiv@dividend
  6230  1FA3  160A  158A  26AA  160A  158A  	fcall	___lwdiv
  6231  1FA8  1283               	bcf	3,5	;RP0=0, select bank0
  6232  1FA9  1303               	bcf	3,6	;RP1=0, select bank0
  6233  1FAA  0821               	movf	?___lwdiv+1,w
  6234  1FAB  00AE               	movwf	utoa@v+1
  6235  1FAC  0820               	movf	?___lwdiv,w
  6236  1FAD  00AD               	movwf	utoa@v
  6237  1FAE  3001               	movlw	1
  6238  1FAF  00AC               	movwf	??_utoa
  6239  1FB0  082C               	movf	??_utoa,w
  6240  1FB1  07B0               	addwf	utoa@buf,f
  6241  1FB2  082D               	movf	utoa@v,w
  6242  1FB3  042E               	iorwf	utoa@v+1,w
  6243  1FB4  1D03               	btfss	3,2
  6244  1FB5  2F9B               	goto	l3667
  6245  1FB6  0830               	movf	utoa@buf,w
  6246  1FB7  0084               	movwf	4
  6247  1FB8  1383               	bcf	3,7	;select IRP bank0
  6248  1FB9  0180               	clrf	0
  6249  1FBA  3001               	movlw	1
  6250  1FBB  02B0               	subwf	utoa@buf,f
  6251  1FBC                     l3677:	
  6252  1FBC  082B               	movf	utoa@base+1,w
  6253  1FBD  00A1               	movwf	___lwmod@divisor+1
  6254  1FBE  082A               	movf	utoa@base,w
  6255  1FBF  00A0               	movwf	___lwmod@divisor
  6256  1FC0  0829               	movf	utoa@val+1,w
  6257  1FC1  00A3               	movwf	___lwmod@dividend+1
  6258  1FC2  0828               	movf	utoa@val,w
  6259  1FC3  00A2               	movwf	___lwmod@dividend
  6260  1FC4  160A  158A  2603  160A  158A  	fcall	___lwmod
  6261  1FC9  1283               	bcf	3,5	;RP0=0, select bank0
  6262  1FCA  1303               	bcf	3,6	;RP1=0, select bank0
  6263  1FCB  0820               	movf	?___lwmod,w
  6264  1FCC  00AC               	movwf	??_utoa
  6265  1FCD  082C               	movf	??_utoa,w
  6266  1FCE  00AF               	movwf	utoa@c
  6267  1FCF  082B               	movf	utoa@base+1,w
  6268  1FD0  00A1               	movwf	___lwdiv@divisor+1
  6269  1FD1  082A               	movf	utoa@base,w
  6270  1FD2  00A0               	movwf	___lwdiv@divisor
  6271  1FD3  0829               	movf	utoa@val+1,w
  6272  1FD4  00A3               	movwf	___lwdiv@dividend+1
  6273  1FD5  0828               	movf	utoa@val,w
  6274  1FD6  00A2               	movwf	___lwdiv@dividend
  6275  1FD7  160A  158A  26AA  160A  158A  	fcall	___lwdiv
  6276  1FDC  1283               	bcf	3,5	;RP0=0, select bank0
  6277  1FDD  1303               	bcf	3,6	;RP1=0, select bank0
  6278  1FDE  0821               	movf	?___lwdiv+1,w
  6279  1FDF  00A9               	movwf	utoa@val+1
  6280  1FE0  0820               	movf	?___lwdiv,w
  6281  1FE1  00A8               	movwf	utoa@val
  6282  1FE2  300A               	movlw	10
  6283  1FE3  022F               	subwf	utoa@c,w
  6284  1FE4  1C03               	skipc
  6285  1FE5  2FEA               	goto	l1180
  6286  1FE6  3007               	movlw	7
  6287  1FE7  00AC               	movwf	??_utoa
  6288  1FE8  082C               	movf	??_utoa,w
  6289  1FE9  07AF               	addwf	utoa@c,f
  6290  1FEA                     l1180:	
  6291  1FEA  3030               	movlw	48
  6292  1FEB  00AC               	movwf	??_utoa
  6293  1FEC  082C               	movf	??_utoa,w
  6294  1FED  07AF               	addwf	utoa@c,f
  6295  1FEE  082F               	movf	utoa@c,w
  6296  1FEF  00AC               	movwf	??_utoa
  6297  1FF0  0830               	movf	utoa@buf,w
  6298  1FF1  0084               	movwf	4
  6299  1FF2  082C               	movf	??_utoa,w
  6300  1FF3  1383               	bcf	3,7	;select IRP bank0
  6301  1FF4  0080               	movwf	0
  6302  1FF5  3001               	movlw	1
  6303  1FF6  02B0               	subwf	utoa@buf,f
  6304  1FF7  0828               	movf	utoa@val,w
  6305  1FF8  0429               	iorwf	utoa@val+1,w
  6306  1FF9  1D03               	btfss	3,2
  6307  1FFA  2FBC               	goto	l3677
  6308                           
  6309                           ;	Return value of _utoa is never used
  6310  1FFB  3001               	movlw	1
  6311  1FFC  00AC               	movwf	??_utoa
  6312  1FFD  082C               	movf	??_utoa,w
  6313  1FFE  07B0               	addwf	utoa@buf,f
  6314  1FFF  0008               	return
  6315  2000                     __end_of_utoa:	
  6316                           
  6317                           	psect	text17
  6318  1E03                     __ptext17:	
  6319 ;; *************** function ___lwmod *****************
  6320 ;; Defined at:
  6321 ;;		line 6 in file "/opt/microchip/xc8/v1.44/sources/common/lwmod.c"
  6322 ;; Parameters:    Size  Location     Type
  6323 ;;  divisor         2    0[BANK0 ] unsigned int 
  6324 ;;  dividend        2    2[BANK0 ] unsigned int 
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  counter         1    5[BANK0 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  2    0[BANK0 ] unsigned int 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6336 ;;      Params:         0       4       0       0       0
  6337 ;;      Locals:         0       1       0       0       0
  6338 ;;      Temps:          0       1       0       0       0
  6339 ;;      Totals:         0       6       0       0       0
  6340 ;;Total ram usage:        6 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    3
  6343 ;; This function calls:
  6344 ;;		Nothing
  6345 ;; This function is called by:
  6346 ;;		_utoa
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           
  6351                           ;psect for function ___lwmod
  6352  1E03                     ___lwmod:	
  6353                           
  6354                           ;incstack = 0
  6355                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6356  1E03  1283               	bcf	3,5	;RP0=0, select bank0
  6357  1E04  1303               	bcf	3,6	;RP1=0, select bank0
  6358  1E05  0820               	movf	___lwmod@divisor,w
  6359  1E06  0421               	iorwf	___lwmod@divisor+1,w
  6360  1E07  1903               	btfsc	3,2
  6361  1E08  2E32               	goto	l3545
  6362  1E09  01A5               	clrf	___lwmod@counter
  6363  1E0A  0AA5               	incf	___lwmod@counter,f
  6364  1E0B                     l3535:	
  6365  1E0B  1BA1               	btfsc	___lwmod@divisor+1,7
  6366  1E0C  2E19               	goto	l3537
  6367  1E0D  3001               	movlw	1
  6368  1E0E                     u3005:	
  6369  1E0E  1003               	clrc
  6370  1E0F  0DA0               	rlf	___lwmod@divisor,f
  6371  1E10  0DA1               	rlf	___lwmod@divisor+1,f
  6372  1E11  3EFF               	addlw	-1
  6373  1E12  1D03               	skipz
  6374  1E13  2E0E               	goto	u3005
  6375  1E14  3001               	movlw	1
  6376  1E15  00A4               	movwf	??___lwmod
  6377  1E16  0824               	movf	??___lwmod,w
  6378  1E17  07A5               	addwf	___lwmod@counter,f
  6379  1E18  2E0B               	goto	l3535
  6380  1E19                     l3537:	
  6381  1E19  0821               	movf	___lwmod@divisor+1,w
  6382  1E1A  0223               	subwf	___lwmod@dividend+1,w
  6383  1E1B  1D03               	skipz
  6384  1E1C  2E1F               	goto	u3025
  6385  1E1D  0820               	movf	___lwmod@divisor,w
  6386  1E1E  0222               	subwf	___lwmod@dividend,w
  6387  1E1F                     u3025:	
  6388  1E1F  1C03               	skipc
  6389  1E20  2E27               	goto	l3541
  6390  1E21  0820               	movf	___lwmod@divisor,w
  6391  1E22  02A2               	subwf	___lwmod@dividend,f
  6392  1E23  0821               	movf	___lwmod@divisor+1,w
  6393  1E24  1C03               	skipc
  6394  1E25  03A3               	decf	___lwmod@dividend+1,f
  6395  1E26  02A3               	subwf	___lwmod@dividend+1,f
  6396  1E27                     l3541:	
  6397  1E27  3001               	movlw	1
  6398  1E28                     u3035:	
  6399  1E28  1003               	clrc
  6400  1E29  0CA1               	rrf	___lwmod@divisor+1,f
  6401  1E2A  0CA0               	rrf	___lwmod@divisor,f
  6402  1E2B  3EFF               	addlw	-1
  6403  1E2C  1D03               	skipz
  6404  1E2D  2E28               	goto	u3035
  6405  1E2E  3001               	movlw	1
  6406  1E2F  02A5               	subwf	___lwmod@counter,f
  6407  1E30  1D03               	btfss	3,2
  6408  1E31  2E19               	goto	l3537
  6409  1E32                     l3545:	
  6410  1E32  0823               	movf	___lwmod@dividend+1,w
  6411  1E33  00A1               	movwf	?___lwmod+1
  6412  1E34  0822               	movf	___lwmod@dividend,w
  6413  1E35  00A0               	movwf	?___lwmod
  6414  1E36  0008               	return
  6415  1E37                     __end_of___lwmod:	
  6416                           
  6417                           	psect	text18
  6418  1EAA                     __ptext18:	
  6419 ;; *************** function ___lwdiv *****************
  6420 ;; Defined at:
  6421 ;;		line 6 in file "/opt/microchip/xc8/v1.44/sources/common/lwdiv.c"
  6422 ;; Parameters:    Size  Location     Type
  6423 ;;  divisor         2    0[BANK0 ] unsigned int 
  6424 ;;  dividend        2    2[BANK0 ] unsigned int 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  quotient        2    5[BANK0 ] unsigned int 
  6427 ;;  counter         1    7[BANK0 ] unsigned char 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;                  2    0[BANK0 ] unsigned int 
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, status,0
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6437 ;;      Params:         0       4       0       0       0
  6438 ;;      Locals:         0       3       0       0       0
  6439 ;;      Temps:          0       1       0       0       0
  6440 ;;      Totals:         0       8       0       0       0
  6441 ;;Total ram usage:        8 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    3
  6444 ;; This function calls:
  6445 ;;		Nothing
  6446 ;; This function is called by:
  6447 ;;		_utoa
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           
  6452                           ;psect for function ___lwdiv
  6453  1EAA                     ___lwdiv:	
  6454                           
  6455                           ;incstack = 0
  6456                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6457  1EAA  1283               	bcf	3,5	;RP0=0, select bank0
  6458  1EAB  1303               	bcf	3,6	;RP1=0, select bank0
  6459  1EAC  01A5               	clrf	___lwdiv@quotient
  6460  1EAD  01A6               	clrf	___lwdiv@quotient+1
  6461  1EAE  0820               	movf	___lwdiv@divisor,w
  6462  1EAF  0421               	iorwf	___lwdiv@divisor+1,w
  6463  1EB0  1903               	btfsc	3,2
  6464  1EB1  2EE3               	goto	l3523
  6465  1EB2  01A7               	clrf	___lwdiv@counter
  6466  1EB3  0AA7               	incf	___lwdiv@counter,f
  6467  1EB4                     l3511:	
  6468  1EB4  1BA1               	btfsc	___lwdiv@divisor+1,7
  6469  1EB5  2EC2               	goto	l3513
  6470  1EB6  3001               	movlw	1
  6471  1EB7                     u2935:	
  6472  1EB7  1003               	clrc
  6473  1EB8  0DA0               	rlf	___lwdiv@divisor,f
  6474  1EB9  0DA1               	rlf	___lwdiv@divisor+1,f
  6475  1EBA  3EFF               	addlw	-1
  6476  1EBB  1D03               	skipz
  6477  1EBC  2EB7               	goto	u2935
  6478  1EBD  3001               	movlw	1
  6479  1EBE  00A4               	movwf	??___lwdiv
  6480  1EBF  0824               	movf	??___lwdiv,w
  6481  1EC0  07A7               	addwf	___lwdiv@counter,f
  6482  1EC1  2EB4               	goto	l3511
  6483  1EC2                     l3513:	
  6484  1EC2  3001               	movlw	1
  6485  1EC3                     u2955:	
  6486  1EC3  1003               	clrc
  6487  1EC4  0DA5               	rlf	___lwdiv@quotient,f
  6488  1EC5  0DA6               	rlf	___lwdiv@quotient+1,f
  6489  1EC6  3EFF               	addlw	-1
  6490  1EC7  1D03               	skipz
  6491  1EC8  2EC3               	goto	u2955
  6492  1EC9  0821               	movf	___lwdiv@divisor+1,w
  6493  1ECA  0223               	subwf	___lwdiv@dividend+1,w
  6494  1ECB  1D03               	skipz
  6495  1ECC  2ECF               	goto	u2965
  6496  1ECD  0820               	movf	___lwdiv@divisor,w
  6497  1ECE  0222               	subwf	___lwdiv@dividend,w
  6498  1ECF                     u2965:	
  6499  1ECF  1C03               	skipc
  6500  1ED0  2ED8               	goto	l3519
  6501  1ED1  0820               	movf	___lwdiv@divisor,w
  6502  1ED2  02A2               	subwf	___lwdiv@dividend,f
  6503  1ED3  0821               	movf	___lwdiv@divisor+1,w
  6504  1ED4  1C03               	skipc
  6505  1ED5  03A3               	decf	___lwdiv@dividend+1,f
  6506  1ED6  02A3               	subwf	___lwdiv@dividend+1,f
  6507  1ED7  1425               	bsf	___lwdiv@quotient,0
  6508  1ED8                     l3519:	
  6509  1ED8  3001               	movlw	1
  6510  1ED9                     u2975:	
  6511  1ED9  1003               	clrc
  6512  1EDA  0CA1               	rrf	___lwdiv@divisor+1,f
  6513  1EDB  0CA0               	rrf	___lwdiv@divisor,f
  6514  1EDC  3EFF               	addlw	-1
  6515  1EDD  1D03               	skipz
  6516  1EDE  2ED9               	goto	u2975
  6517  1EDF  3001               	movlw	1
  6518  1EE0  02A7               	subwf	___lwdiv@counter,f
  6519  1EE1  1D03               	btfss	3,2
  6520  1EE2  2EC2               	goto	l3513
  6521  1EE3                     l3523:	
  6522  1EE3  0826               	movf	___lwdiv@quotient+1,w
  6523  1EE4  00A1               	movwf	?___lwdiv+1
  6524  1EE5  0825               	movf	___lwdiv@quotient,w
  6525  1EE6  00A0               	movwf	?___lwdiv
  6526  1EE7  0008               	return
  6527  1EE8                     __end_of___lwdiv:	
  6528                           
  6529                           	psect	text19
  6530  157E                     __ptext19:	
  6531 ;; *************** function _PrintMes *****************
  6532 ;; Defined at:
  6533 ;;		line 364 in file "main.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  mes             1    wreg     unsigned char 
  6536 ;;  str             1    0[BANK0 ] PTR unsigned char 
  6537 ;;		 -> PrintInfoScreen@str(19), 
  6538 ;; Auto vars:     Size  Location     Type
  6539 ;;  mes             1    2[BANK0 ] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6549 ;;      Params:         0       1       0       0       0
  6550 ;;      Locals:         0       1       0       0       0
  6551 ;;      Temps:          0       1       0       0       0
  6552 ;;      Totals:         0       3       0       0       0
  6553 ;;Total ram usage:        3 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    3
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_PrintInfoScreen
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           
  6564                           ;psect for function _PrintMes
  6565  157E                     _PrintMes:	
  6566                           
  6567                           ;incstack = 0
  6568                           ; Regs used in _PrintMes: [wreg-fsr0h+status,2+status,0]
  6569                           ;PrintMes@mes stored from wreg
  6570  157E  1283               	bcf	3,5	;RP0=0, select bank0
  6571  157F  1303               	bcf	3,6	;RP1=0, select bank0
  6572  1580  00A2               	movwf	PrintMes@mes
  6573                           
  6574                           ;main.c: 366: switch(mes)
  6575  1581  2E7E               	goto	l3663
  6576  1582                     l3611:	
  6577                           ;main.c: 367: {
  6578                           ;main.c: 368: case 1:
  6579                           
  6580                           
  6581                           ;main.c: 369: str[0] = 'E';
  6582  1582  3045               	movlw	69
  6583  1583  00A1               	movwf	??_PrintMes
  6584  1584  0820               	movf	PrintMes@str,w
  6585  1585  0084               	movwf	4
  6586  1586  0821               	movf	??_PrintMes,w
  6587  1587  1383               	bcf	3,7	;select IRP bank0
  6588  1588  0080               	movwf	0
  6589                           
  6590                           ;main.c: 370: str[1] = 'n';
  6591  1589  306E               	movlw	110
  6592  158A  00A1               	movwf	??_PrintMes
  6593  158B  0A20               	incf	PrintMes@str,w
  6594  158C  0084               	movwf	4
  6595  158D  0821               	movf	??_PrintMes,w
  6596  158E  0080               	movwf	0
  6597                           
  6598                           ;main.c: 371: str[2] = 'e';
  6599  158F  3065               	movlw	101
  6600  1590  00A1               	movwf	??_PrintMes
  6601  1591  0820               	movf	PrintMes@str,w
  6602  1592  3E02               	addlw	2
  6603  1593  0084               	movwf	4
  6604  1594  0821               	movf	??_PrintMes,w
  6605  1595  0080               	movwf	0
  6606                           
  6607                           ;main.c: 372: break;
  6608  1596  0008               	return
  6609  1597                     l3617:	
  6610                           ;main.c: 373: case 2:
  6611                           
  6612                           
  6613                           ;main.c: 374: str[0] = 'F';
  6614  1597  3046               	movlw	70
  6615  1598  00A1               	movwf	??_PrintMes
  6616  1599  0820               	movf	PrintMes@str,w
  6617  159A  0084               	movwf	4
  6618  159B  0821               	movf	??_PrintMes,w
  6619  159C  1383               	bcf	3,7	;select IRP bank0
  6620  159D  0080               	movwf	0
  6621                           
  6622                           ;main.c: 375: str[1] = 'e';
  6623  159E  3065               	movlw	101
  6624  159F  00A1               	movwf	??_PrintMes
  6625  15A0  0A20               	incf	PrintMes@str,w
  6626  15A1  0084               	movwf	4
  6627  15A2  0821               	movf	??_PrintMes,w
  6628  15A3  0080               	movwf	0
  6629                           
  6630                           ;main.c: 376: str[2] = 'b';
  6631  15A4  3062               	movlw	98
  6632  15A5  00A1               	movwf	??_PrintMes
  6633  15A6  0820               	movf	PrintMes@str,w
  6634  15A7  3E02               	addlw	2
  6635  15A8  0084               	movwf	4
  6636  15A9  0821               	movf	??_PrintMes,w
  6637  15AA  0080               	movwf	0
  6638                           
  6639                           ;main.c: 377: break;
  6640  15AB  0008               	return
  6641  15AC                     l3621:	
  6642                           ;main.c: 378: case 3:
  6643                           
  6644                           
  6645                           ;main.c: 379: str[0] = 'M';
  6646  15AC  304D               	movlw	77
  6647  15AD  00A1               	movwf	??_PrintMes
  6648  15AE  0820               	movf	PrintMes@str,w
  6649  15AF  0084               	movwf	4
  6650  15B0  0821               	movf	??_PrintMes,w
  6651  15B1  1383               	bcf	3,7	;select IRP bank0
  6652  15B2  0080               	movwf	0
  6653                           
  6654                           ;main.c: 380: str[1] = 'a';
  6655  15B3  3061               	movlw	97
  6656  15B4  00A1               	movwf	??_PrintMes
  6657  15B5  0A20               	incf	PrintMes@str,w
  6658  15B6  0084               	movwf	4
  6659  15B7  0821               	movf	??_PrintMes,w
  6660  15B8  0080               	movwf	0
  6661                           
  6662                           ;main.c: 381: str[2] = 'r';
  6663  15B9  3072               	movlw	114
  6664  15BA  00A1               	movwf	??_PrintMes
  6665  15BB  0820               	movf	PrintMes@str,w
  6666  15BC  3E02               	addlw	2
  6667  15BD  0084               	movwf	4
  6668  15BE  0821               	movf	??_PrintMes,w
  6669  15BF  0080               	movwf	0
  6670                           
  6671                           ;main.c: 382: break;
  6672  15C0  0008               	return
  6673  15C1                     l3625:	
  6674                           ;main.c: 383: case 4:
  6675                           
  6676                           
  6677                           ;main.c: 384: str[0] = 'A';
  6678  15C1  3041               	movlw	65
  6679  15C2  00A1               	movwf	??_PrintMes
  6680  15C3  0820               	movf	PrintMes@str,w
  6681  15C4  0084               	movwf	4
  6682  15C5  0821               	movf	??_PrintMes,w
  6683  15C6  1383               	bcf	3,7	;select IRP bank0
  6684  15C7  0080               	movwf	0
  6685                           
  6686                           ;main.c: 385: str[1] = 'b';
  6687  15C8  3062               	movlw	98
  6688  15C9  00A1               	movwf	??_PrintMes
  6689  15CA  0A20               	incf	PrintMes@str,w
  6690  15CB  0084               	movwf	4
  6691  15CC  0821               	movf	??_PrintMes,w
  6692  15CD  0080               	movwf	0
  6693                           
  6694                           ;main.c: 386: str[2] = 'r';
  6695  15CE  3072               	movlw	114
  6696  15CF  00A1               	movwf	??_PrintMes
  6697  15D0  0820               	movf	PrintMes@str,w
  6698  15D1  3E02               	addlw	2
  6699  15D2  0084               	movwf	4
  6700  15D3  0821               	movf	??_PrintMes,w
  6701  15D4  0080               	movwf	0
  6702                           
  6703                           ;main.c: 387: break;
  6704  15D5  0008               	return
  6705  15D6                     l3629:	
  6706                           ;main.c: 388: case 5:
  6707                           
  6708                           
  6709                           ;main.c: 389: str[0] = 'M';
  6710  15D6  304D               	movlw	77
  6711  15D7  00A1               	movwf	??_PrintMes
  6712  15D8  0820               	movf	PrintMes@str,w
  6713  15D9  0084               	movwf	4
  6714  15DA  0821               	movf	??_PrintMes,w
  6715  15DB  1383               	bcf	3,7	;select IRP bank0
  6716  15DC  0080               	movwf	0
  6717                           
  6718                           ;main.c: 390: str[1] = 'a';
  6719  15DD  3061               	movlw	97
  6720  15DE  00A1               	movwf	??_PrintMes
  6721  15DF  0A20               	incf	PrintMes@str,w
  6722  15E0  0084               	movwf	4
  6723  15E1  0821               	movf	??_PrintMes,w
  6724  15E2  0080               	movwf	0
  6725                           
  6726                           ;main.c: 391: str[2] = 'y';
  6727  15E3  3079               	movlw	121
  6728  15E4  00A1               	movwf	??_PrintMes
  6729  15E5  0820               	movf	PrintMes@str,w
  6730  15E6  3E02               	addlw	2
  6731  15E7  0084               	movwf	4
  6732  15E8  0821               	movf	??_PrintMes,w
  6733  15E9  0080               	movwf	0
  6734                           
  6735                           ;main.c: 392: break;
  6736  15EA  0008               	return
  6737  15EB                     l3633:	
  6738                           ;main.c: 393: case 6:
  6739                           
  6740                           
  6741                           ;main.c: 394: str[0] = 'J';
  6742  15EB  304A               	movlw	74
  6743  15EC  00A1               	movwf	??_PrintMes
  6744  15ED  0820               	movf	PrintMes@str,w
  6745  15EE  0084               	movwf	4
  6746  15EF  0821               	movf	??_PrintMes,w
  6747  15F0  1383               	bcf	3,7	;select IRP bank0
  6748  15F1  0080               	movwf	0
  6749                           
  6750                           ;main.c: 395: str[1] = 'u';
  6751  15F2  3075               	movlw	117
  6752  15F3  00A1               	movwf	??_PrintMes
  6753  15F4  0A20               	incf	PrintMes@str,w
  6754  15F5  0084               	movwf	4
  6755  15F6  0821               	movf	??_PrintMes,w
  6756  15F7  0080               	movwf	0
  6757                           
  6758                           ;main.c: 396: str[2] = 'n';
  6759  15F8  306E               	movlw	110
  6760  15F9  00A1               	movwf	??_PrintMes
  6761  15FA  0820               	movf	PrintMes@str,w
  6762  15FB  3E02               	addlw	2
  6763  15FC  0084               	movwf	4
  6764  15FD  0821               	movf	??_PrintMes,w
  6765  15FE  0080               	movwf	0
  6766                           
  6767                           ;main.c: 397: break;
  6768  15FF  0008               	return
  6769  1600                     l3637:	
  6770                           ;main.c: 398: case 7:
  6771                           
  6772                           
  6773                           ;main.c: 399: str[0] = 'J';
  6774  1600  304A               	movlw	74
  6775  1601  00A1               	movwf	??_PrintMes
  6776  1602  0820               	movf	PrintMes@str,w
  6777  1603  0084               	movwf	4
  6778  1604  0821               	movf	??_PrintMes,w
  6779  1605  1383               	bcf	3,7	;select IRP bank0
  6780  1606  0080               	movwf	0
  6781                           
  6782                           ;main.c: 400: str[1] = 'u';
  6783  1607  3075               	movlw	117
  6784  1608  00A1               	movwf	??_PrintMes
  6785  1609  0A20               	incf	PrintMes@str,w
  6786  160A  0084               	movwf	4
  6787  160B  0821               	movf	??_PrintMes,w
  6788  160C  0080               	movwf	0
  6789                           
  6790                           ;main.c: 401: str[2] = 'l';
  6791  160D  306C               	movlw	108
  6792  160E  00A1               	movwf	??_PrintMes
  6793  160F  0820               	movf	PrintMes@str,w
  6794  1610  3E02               	addlw	2
  6795  1611  0084               	movwf	4
  6796  1612  0821               	movf	??_PrintMes,w
  6797  1613  0080               	movwf	0
  6798                           
  6799                           ;main.c: 402: break;
  6800  1614  0008               	return
  6801  1615                     l3641:	
  6802                           ;main.c: 403: case 8:
  6803                           
  6804                           
  6805                           ;main.c: 404: str[0] = 'A';
  6806  1615  3041               	movlw	65
  6807  1616  00A1               	movwf	??_PrintMes
  6808  1617  0820               	movf	PrintMes@str,w
  6809  1618  0084               	movwf	4
  6810  1619  0821               	movf	??_PrintMes,w
  6811  161A  1383               	bcf	3,7	;select IRP bank0
  6812  161B  0080               	movwf	0
  6813                           
  6814                           ;main.c: 405: str[1] = 'g';
  6815  161C  3067               	movlw	103
  6816  161D  00A1               	movwf	??_PrintMes
  6817  161E  0A20               	incf	PrintMes@str,w
  6818  161F  0084               	movwf	4
  6819  1620  0821               	movf	??_PrintMes,w
  6820  1621  0080               	movwf	0
  6821                           
  6822                           ;main.c: 406: str[2] = 'o';
  6823  1622  306F               	movlw	111
  6824  1623  00A1               	movwf	??_PrintMes
  6825  1624  0820               	movf	PrintMes@str,w
  6826  1625  3E02               	addlw	2
  6827  1626  0084               	movwf	4
  6828  1627  0821               	movf	??_PrintMes,w
  6829  1628  0080               	movwf	0
  6830                           
  6831                           ;main.c: 407: break;
  6832  1629  0008               	return
  6833  162A                     l3645:	
  6834                           ;main.c: 408: case 9:
  6835                           
  6836                           
  6837                           ;main.c: 409: str[0] = 'S';
  6838  162A  3053               	movlw	83
  6839  162B  00A1               	movwf	??_PrintMes
  6840  162C  0820               	movf	PrintMes@str,w
  6841  162D  0084               	movwf	4
  6842  162E  0821               	movf	??_PrintMes,w
  6843  162F  1383               	bcf	3,7	;select IRP bank0
  6844  1630  0080               	movwf	0
  6845                           
  6846                           ;main.c: 410: str[1] = 'e';
  6847  1631  3065               	movlw	101
  6848  1632  00A1               	movwf	??_PrintMes
  6849  1633  0A20               	incf	PrintMes@str,w
  6850  1634  0084               	movwf	4
  6851  1635  0821               	movf	??_PrintMes,w
  6852  1636  0080               	movwf	0
  6853                           
  6854                           ;main.c: 411: str[2] = 'p';
  6855  1637  3070               	movlw	112
  6856  1638  00A1               	movwf	??_PrintMes
  6857  1639  0820               	movf	PrintMes@str,w
  6858  163A  3E02               	addlw	2
  6859  163B  0084               	movwf	4
  6860  163C  0821               	movf	??_PrintMes,w
  6861  163D  0080               	movwf	0
  6862                           
  6863                           ;main.c: 412: break;
  6864  163E  0008               	return
  6865  163F                     l3649:	
  6866                           ;main.c: 413: case 10:
  6867                           
  6868                           
  6869                           ;main.c: 414: str[0] = 'O';
  6870  163F  304F               	movlw	79
  6871  1640  00A1               	movwf	??_PrintMes
  6872  1641  0820               	movf	PrintMes@str,w
  6873  1642  0084               	movwf	4
  6874  1643  0821               	movf	??_PrintMes,w
  6875  1644  1383               	bcf	3,7	;select IRP bank0
  6876  1645  0080               	movwf	0
  6877                           
  6878                           ;main.c: 415: str[1] = 'c';
  6879  1646  3063               	movlw	99
  6880  1647  00A1               	movwf	??_PrintMes
  6881  1648  0A20               	incf	PrintMes@str,w
  6882  1649  0084               	movwf	4
  6883  164A  0821               	movf	??_PrintMes,w
  6884  164B  0080               	movwf	0
  6885                           
  6886                           ;main.c: 416: str[2] = 't';
  6887  164C  3074               	movlw	116
  6888  164D  00A1               	movwf	??_PrintMes
  6889  164E  0820               	movf	PrintMes@str,w
  6890  164F  3E02               	addlw	2
  6891  1650  0084               	movwf	4
  6892  1651  0821               	movf	??_PrintMes,w
  6893  1652  0080               	movwf	0
  6894                           
  6895                           ;main.c: 417: break;
  6896  1653  0008               	return
  6897  1654                     l3653:	
  6898                           ;main.c: 418: case 11:
  6899                           
  6900                           
  6901                           ;main.c: 419: str[0] = 'N';
  6902  1654  304E               	movlw	78
  6903  1655  00A1               	movwf	??_PrintMes
  6904  1656  0820               	movf	PrintMes@str,w
  6905  1657  0084               	movwf	4
  6906  1658  0821               	movf	??_PrintMes,w
  6907  1659  1383               	bcf	3,7	;select IRP bank0
  6908  165A  0080               	movwf	0
  6909                           
  6910                           ;main.c: 420: str[1] = 'o';
  6911  165B  306F               	movlw	111
  6912  165C  00A1               	movwf	??_PrintMes
  6913  165D  0A20               	incf	PrintMes@str,w
  6914  165E  0084               	movwf	4
  6915  165F  0821               	movf	??_PrintMes,w
  6916  1660  0080               	movwf	0
  6917                           
  6918                           ;main.c: 421: str[2] = 'v';
  6919  1661  3076               	movlw	118
  6920  1662  00A1               	movwf	??_PrintMes
  6921  1663  0820               	movf	PrintMes@str,w
  6922  1664  3E02               	addlw	2
  6923  1665  0084               	movwf	4
  6924  1666  0821               	movf	??_PrintMes,w
  6925  1667  0080               	movwf	0
  6926                           
  6927                           ;main.c: 422: break;
  6928  1668  0008               	return
  6929  1669                     l3657:	
  6930                           ;main.c: 423: case 12:
  6931                           
  6932                           
  6933                           ;main.c: 424: str[0] = 'D';
  6934  1669  3044               	movlw	68
  6935  166A  00A1               	movwf	??_PrintMes
  6936  166B  0820               	movf	PrintMes@str,w
  6937  166C  0084               	movwf	4
  6938  166D  0821               	movf	??_PrintMes,w
  6939  166E  1383               	bcf	3,7	;select IRP bank0
  6940  166F  0080               	movwf	0
  6941                           
  6942                           ;main.c: 425: str[1] = 'i';
  6943  1670  3069               	movlw	105
  6944  1671  00A1               	movwf	??_PrintMes
  6945  1672  0A20               	incf	PrintMes@str,w
  6946  1673  0084               	movwf	4
  6947  1674  0821               	movf	??_PrintMes,w
  6948  1675  0080               	movwf	0
  6949                           
  6950                           ;main.c: 426: str[2] = 'c';
  6951  1676  3063               	movlw	99
  6952  1677  00A1               	movwf	??_PrintMes
  6953  1678  0820               	movf	PrintMes@str,w
  6954  1679  3E02               	addlw	2
  6955  167A  0084               	movwf	4
  6956  167B  0821               	movf	??_PrintMes,w
  6957  167C  0080               	movwf	0
  6958                           
  6959                           ;main.c: 428: }
  6960                           
  6961                           ;main.c: 427: break;
  6962  167D  0008               	return
  6963  167E                     l3663:	
  6964  167E  0822               	movf	PrintMes@mes,w
  6965                           
  6966                           ; Switch size 1, requested type "space"
  6967                           ; Number of cases is 12, Range of values is 1 to 12
  6968                           ; switch strategies available:
  6969                           ; Name         Instructions Cycles
  6970                           ; simple_byte           37    19 (average)
  6971                           ; direct_byte           47    11 (fixed)
  6972                           ; jumptable            263     9 (fixed)
  6973                           ;	Chosen strategy is simple_byte
  6974  167F  3A01               	xorlw	1	; case 1
  6975  1680  1903               	skipnz
  6976  1681  2D82               	goto	l3611
  6977  1682  3A03               	xorlw	3	; case 2
  6978  1683  1903               	skipnz
  6979  1684  2D97               	goto	l3617
  6980  1685  3A01               	xorlw	1	; case 3
  6981  1686  1903               	skipnz
  6982  1687  2DAC               	goto	l3621
  6983  1688  3A07               	xorlw	7	; case 4
  6984  1689  1903               	skipnz
  6985  168A  2DC1               	goto	l3625
  6986  168B  3A01               	xorlw	1	; case 5
  6987  168C  1903               	skipnz
  6988  168D  2DD6               	goto	l3629
  6989  168E  3A03               	xorlw	3	; case 6
  6990  168F  1903               	skipnz
  6991  1690  2DEB               	goto	l3633
  6992  1691  3A01               	xorlw	1	; case 7
  6993  1692  1903               	skipnz
  6994  1693  2E00               	goto	l3637
  6995  1694  3A0F               	xorlw	15	; case 8
  6996  1695  1903               	skipnz
  6997  1696  2E15               	goto	l3641
  6998  1697  3A01               	xorlw	1	; case 9
  6999  1698  1903               	skipnz
  7000  1699  2E2A               	goto	l3645
  7001  169A  3A03               	xorlw	3	; case 10
  7002  169B  1903               	skipnz
  7003  169C  2E3F               	goto	l3649
  7004  169D  3A01               	xorlw	1	; case 11
  7005  169E  1903               	skipnz
  7006  169F  2E54               	goto	l3653
  7007  16A0  3A07               	xorlw	7	; case 12
  7008  16A1  1903               	skipnz
  7009  16A2  2E69               	goto	l3657
  7010  16A3  2EA4               	goto	l224
  7011  16A4                     l224:	
  7012  16A4  0008               	return
  7013  16A5                     __end_of_PrintMes:	
  7014                           
  7015                           	psect	text20
  7016  1262                     __ptext20:	
  7017 ;; *************** function _PrintDiaSem *****************
  7018 ;; Defined at:
  7019 ;;		line 322 in file "main.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  dia             1    wreg     unsigned char 
  7022 ;;  str             1    0[BANK0 ] PTR unsigned char 
  7023 ;;		 -> PrintInfoScreen@str(19), 
  7024 ;; Auto vars:     Size  Location     Type
  7025 ;;  dia             1    2[BANK0 ] unsigned char 
  7026 ;; Return value:  Size  Location     Type
  7027 ;;                  1    wreg      void 
  7028 ;; Registers used:
  7029 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7030 ;; Tracked objects:
  7031 ;;		On entry : 0/0
  7032 ;;		On exit  : 0/0
  7033 ;;		Unchanged: 0/0
  7034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7035 ;;      Params:         0       1       0       0       0
  7036 ;;      Locals:         0       1       0       0       0
  7037 ;;      Temps:          0       1       0       0       0
  7038 ;;      Totals:         0       3       0       0       0
  7039 ;;Total ram usage:        3 bytes
  7040 ;; Hardware stack levels used:    1
  7041 ;; Hardware stack levels required when called:    3
  7042 ;; This function calls:
  7043 ;;		Nothing
  7044 ;; This function is called by:
  7045 ;;		_PrintInfoScreen
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           
  7050                           ;psect for function _PrintDiaSem
  7051  1262                     _PrintDiaSem:	
  7052                           
  7053                           ;incstack = 0
  7054                           ; Regs used in _PrintDiaSem: [wreg-fsr0h+status,2+status,0]
  7055                           ;PrintDiaSem@dia stored from wreg
  7056  1262  1283               	bcf	3,5	;RP0=0, select bank0
  7057  1263  1303               	bcf	3,6	;RP1=0, select bank0
  7058  1264  00A2               	movwf	PrintDiaSem@dia
  7059                           
  7060                           ;main.c: 324: switch(dia)
  7061  1265  2AF9               	goto	l3607
  7062  1266                     l3575:	
  7063                           ;main.c: 325: {
  7064                           ;main.c: 326: case 1:
  7065                           
  7066                           
  7067                           ;main.c: 327: str[0] = 'L';
  7068  1266  304C               	movlw	76
  7069  1267  00A1               	movwf	??_PrintDiaSem
  7070  1268  0820               	movf	PrintDiaSem@str,w
  7071  1269  0084               	movwf	4
  7072  126A  0821               	movf	??_PrintDiaSem,w
  7073  126B  1383               	bcf	3,7	;select IRP bank0
  7074  126C  0080               	movwf	0
  7075                           
  7076                           ;main.c: 328: str[1] = 'u';
  7077  126D  3075               	movlw	117
  7078  126E  00A1               	movwf	??_PrintDiaSem
  7079  126F  0A20               	incf	PrintDiaSem@str,w
  7080  1270  0084               	movwf	4
  7081  1271  0821               	movf	??_PrintDiaSem,w
  7082  1272  0080               	movwf	0
  7083                           
  7084                           ;main.c: 329: str[2] = 'n';
  7085  1273  306E               	movlw	110
  7086  1274  00A1               	movwf	??_PrintDiaSem
  7087  1275  0820               	movf	PrintDiaSem@str,w
  7088  1276  3E02               	addlw	2
  7089  1277  0084               	movwf	4
  7090  1278  0821               	movf	??_PrintDiaSem,w
  7091  1279  0080               	movwf	0
  7092                           
  7093                           ;main.c: 330: break;
  7094  127A  0008               	return
  7095  127B                     l3581:	
  7096                           ;main.c: 331: case 2:
  7097                           
  7098                           
  7099                           ;main.c: 332: str[0] = 'M';
  7100  127B  304D               	movlw	77
  7101  127C  00A1               	movwf	??_PrintDiaSem
  7102  127D  0820               	movf	PrintDiaSem@str,w
  7103  127E  0084               	movwf	4
  7104  127F  0821               	movf	??_PrintDiaSem,w
  7105  1280  1383               	bcf	3,7	;select IRP bank0
  7106  1281  0080               	movwf	0
  7107                           
  7108                           ;main.c: 333: str[1] = 'a';
  7109  1282  3061               	movlw	97
  7110  1283  00A1               	movwf	??_PrintDiaSem
  7111  1284  0A20               	incf	PrintDiaSem@str,w
  7112  1285  0084               	movwf	4
  7113  1286  0821               	movf	??_PrintDiaSem,w
  7114  1287  0080               	movwf	0
  7115                           
  7116                           ;main.c: 334: str[2] = 'r';
  7117  1288  3072               	movlw	114
  7118  1289  00A1               	movwf	??_PrintDiaSem
  7119  128A  0820               	movf	PrintDiaSem@str,w
  7120  128B  3E02               	addlw	2
  7121  128C  0084               	movwf	4
  7122  128D  0821               	movf	??_PrintDiaSem,w
  7123  128E  0080               	movwf	0
  7124                           
  7125                           ;main.c: 335: break;
  7126  128F  0008               	return
  7127  1290                     l3585:	
  7128                           ;main.c: 336: case 3:
  7129                           
  7130                           
  7131                           ;main.c: 337: str[0] = 'M';
  7132  1290  304D               	movlw	77
  7133  1291  00A1               	movwf	??_PrintDiaSem
  7134  1292  0820               	movf	PrintDiaSem@str,w
  7135  1293  0084               	movwf	4
  7136  1294  0821               	movf	??_PrintDiaSem,w
  7137  1295  1383               	bcf	3,7	;select IRP bank0
  7138  1296  0080               	movwf	0
  7139                           
  7140                           ;main.c: 338: str[1] = 'i';
  7141  1297  3069               	movlw	105
  7142  1298  00A1               	movwf	??_PrintDiaSem
  7143  1299  0A20               	incf	PrintDiaSem@str,w
  7144  129A  0084               	movwf	4
  7145  129B  0821               	movf	??_PrintDiaSem,w
  7146  129C  0080               	movwf	0
  7147                           
  7148                           ;main.c: 339: str[2] = 'e';
  7149  129D  3065               	movlw	101
  7150  129E  00A1               	movwf	??_PrintDiaSem
  7151  129F  0820               	movf	PrintDiaSem@str,w
  7152  12A0  3E02               	addlw	2
  7153  12A1  0084               	movwf	4
  7154  12A2  0821               	movf	??_PrintDiaSem,w
  7155  12A3  0080               	movwf	0
  7156                           
  7157                           ;main.c: 340: break;
  7158  12A4  0008               	return
  7159  12A5                     l3589:	
  7160                           ;main.c: 341: case 4:
  7161                           
  7162                           
  7163                           ;main.c: 342: str[0] = 'J';
  7164  12A5  304A               	movlw	74
  7165  12A6  00A1               	movwf	??_PrintDiaSem
  7166  12A7  0820               	movf	PrintDiaSem@str,w
  7167  12A8  0084               	movwf	4
  7168  12A9  0821               	movf	??_PrintDiaSem,w
  7169  12AA  1383               	bcf	3,7	;select IRP bank0
  7170  12AB  0080               	movwf	0
  7171                           
  7172                           ;main.c: 343: str[1] = 'u';
  7173  12AC  3075               	movlw	117
  7174  12AD  00A1               	movwf	??_PrintDiaSem
  7175  12AE  0A20               	incf	PrintDiaSem@str,w
  7176  12AF  0084               	movwf	4
  7177  12B0  0821               	movf	??_PrintDiaSem,w
  7178  12B1  0080               	movwf	0
  7179                           
  7180                           ;main.c: 344: str[2] = 'e';
  7181  12B2  3065               	movlw	101
  7182  12B3  00A1               	movwf	??_PrintDiaSem
  7183  12B4  0820               	movf	PrintDiaSem@str,w
  7184  12B5  3E02               	addlw	2
  7185  12B6  0084               	movwf	4
  7186  12B7  0821               	movf	??_PrintDiaSem,w
  7187  12B8  0080               	movwf	0
  7188                           
  7189                           ;main.c: 345: break;
  7190  12B9  0008               	return
  7191  12BA                     l3593:	
  7192                           ;main.c: 346: case 5:
  7193                           
  7194                           
  7195                           ;main.c: 347: str[0] = 'V';
  7196  12BA  3056               	movlw	86
  7197  12BB  00A1               	movwf	??_PrintDiaSem
  7198  12BC  0820               	movf	PrintDiaSem@str,w
  7199  12BD  0084               	movwf	4
  7200  12BE  0821               	movf	??_PrintDiaSem,w
  7201  12BF  1383               	bcf	3,7	;select IRP bank0
  7202  12C0  0080               	movwf	0
  7203                           
  7204                           ;main.c: 348: str[1] = 'i';
  7205  12C1  3069               	movlw	105
  7206  12C2  00A1               	movwf	??_PrintDiaSem
  7207  12C3  0A20               	incf	PrintDiaSem@str,w
  7208  12C4  0084               	movwf	4
  7209  12C5  0821               	movf	??_PrintDiaSem,w
  7210  12C6  0080               	movwf	0
  7211                           
  7212                           ;main.c: 349: str[2] = 'e';
  7213  12C7  3065               	movlw	101
  7214  12C8  00A1               	movwf	??_PrintDiaSem
  7215  12C9  0820               	movf	PrintDiaSem@str,w
  7216  12CA  3E02               	addlw	2
  7217  12CB  0084               	movwf	4
  7218  12CC  0821               	movf	??_PrintDiaSem,w
  7219  12CD  0080               	movwf	0
  7220                           
  7221                           ;main.c: 350: break;
  7222  12CE  0008               	return
  7223  12CF                     l3597:	
  7224                           ;main.c: 351: case 6:
  7225                           
  7226                           
  7227                           ;main.c: 352: str[0] = 'S';
  7228  12CF  3053               	movlw	83
  7229  12D0  00A1               	movwf	??_PrintDiaSem
  7230  12D1  0820               	movf	PrintDiaSem@str,w
  7231  12D2  0084               	movwf	4
  7232  12D3  0821               	movf	??_PrintDiaSem,w
  7233  12D4  1383               	bcf	3,7	;select IRP bank0
  7234  12D5  0080               	movwf	0
  7235                           
  7236                           ;main.c: 353: str[1] = 'a';
  7237  12D6  3061               	movlw	97
  7238  12D7  00A1               	movwf	??_PrintDiaSem
  7239  12D8  0A20               	incf	PrintDiaSem@str,w
  7240  12D9  0084               	movwf	4
  7241  12DA  0821               	movf	??_PrintDiaSem,w
  7242  12DB  0080               	movwf	0
  7243                           
  7244                           ;main.c: 354: str[2] = 'b';
  7245  12DC  3062               	movlw	98
  7246  12DD  00A1               	movwf	??_PrintDiaSem
  7247  12DE  0820               	movf	PrintDiaSem@str,w
  7248  12DF  3E02               	addlw	2
  7249  12E0  0084               	movwf	4
  7250  12E1  0821               	movf	??_PrintDiaSem,w
  7251  12E2  0080               	movwf	0
  7252                           
  7253                           ;main.c: 355: break;
  7254  12E3  0008               	return
  7255  12E4                     l3601:	
  7256                           ;main.c: 356: case 7:
  7257                           
  7258                           
  7259                           ;main.c: 357: str[0] = 'D';
  7260  12E4  3044               	movlw	68
  7261  12E5  00A1               	movwf	??_PrintDiaSem
  7262  12E6  0820               	movf	PrintDiaSem@str,w
  7263  12E7  0084               	movwf	4
  7264  12E8  0821               	movf	??_PrintDiaSem,w
  7265  12E9  1383               	bcf	3,7	;select IRP bank0
  7266  12EA  0080               	movwf	0
  7267                           
  7268                           ;main.c: 358: str[1] = 'o';
  7269  12EB  306F               	movlw	111
  7270  12EC  00A1               	movwf	??_PrintDiaSem
  7271  12ED  0A20               	incf	PrintDiaSem@str,w
  7272  12EE  0084               	movwf	4
  7273  12EF  0821               	movf	??_PrintDiaSem,w
  7274  12F0  0080               	movwf	0
  7275                           
  7276                           ;main.c: 359: str[2] = 'm';
  7277  12F1  306D               	movlw	109
  7278  12F2  00A1               	movwf	??_PrintDiaSem
  7279  12F3  0820               	movf	PrintDiaSem@str,w
  7280  12F4  3E02               	addlw	2
  7281  12F5  0084               	movwf	4
  7282  12F6  0821               	movf	??_PrintDiaSem,w
  7283  12F7  0080               	movwf	0
  7284                           
  7285                           ;main.c: 361: }
  7286                           
  7287                           ;main.c: 360: break;
  7288  12F8  0008               	return
  7289  12F9                     l3607:	
  7290  12F9  0822               	movf	PrintDiaSem@dia,w
  7291                           
  7292                           ; Switch size 1, requested type "space"
  7293                           ; Number of cases is 7, Range of values is 1 to 7
  7294                           ; switch strategies available:
  7295                           ; Name         Instructions Cycles
  7296                           ; simple_byte           22    12 (average)
  7297                           ; direct_byte           32    11 (fixed)
  7298                           ; jumptable            263     9 (fixed)
  7299                           ;	Chosen strategy is simple_byte
  7300  12FA  3A01               	xorlw	1	; case 1
  7301  12FB  1903               	skipnz
  7302  12FC  2A66               	goto	l3575
  7303  12FD  3A03               	xorlw	3	; case 2
  7304  12FE  1903               	skipnz
  7305  12FF  2A7B               	goto	l3581
  7306  1300  3A01               	xorlw	1	; case 3
  7307  1301  1903               	skipnz
  7308  1302  2A90               	goto	l3585
  7309  1303  3A07               	xorlw	7	; case 4
  7310  1304  1903               	skipnz
  7311  1305  2AA5               	goto	l3589
  7312  1306  3A01               	xorlw	1	; case 5
  7313  1307  1903               	skipnz
  7314  1308  2ABA               	goto	l3593
  7315  1309  3A03               	xorlw	3	; case 6
  7316  130A  1903               	skipnz
  7317  130B  2ACF               	goto	l3597
  7318  130C  3A01               	xorlw	1	; case 7
  7319  130D  1903               	skipnz
  7320  130E  2AE4               	goto	l3601
  7321  130F  2B10               	goto	l207
  7322  1310                     l207:	
  7323  1310  0008               	return
  7324  1311                     __end_of_PrintDiaSem:	
  7325                           
  7326                           	psect	text21
  7327  1004                     __ptext21:	
  7328 ;; *************** function _LCDMsg *****************
  7329 ;; Defined at:
  7330 ;;		line 140 in file "lcd.c"
  7331 ;; Parameters:    Size  Location     Type
  7332 ;;  linea           1    wreg     unsigned char 
  7333 ;;  columna         1    8[BANK0 ] unsigned char 
  7334 ;;  msg             2    9[BANK0 ] PTR const unsigned char 
  7335 ;;		 -> STR_2(19), STR_1(18), SerialMsg.xData(10), SerialMsg(16), 
  7336 ;;		 -> PrintInfoScreen@str(19), 
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  linea           1   12[BANK0 ] unsigned char 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7348 ;;      Params:         0       3       0       0       0
  7349 ;;      Locals:         0       1       0       0       0
  7350 ;;      Temps:          0       1       0       0       0
  7351 ;;      Totals:         0       5       0       0       0
  7352 ;;Total ram usage:        5 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    6
  7355 ;; This function calls:
  7356 ;;		_LCDGoto
  7357 ;;		_LCDSend
  7358 ;; This function is called by:
  7359 ;;		_PrintInfoScreen
  7360 ;;		_main
  7361 ;; This function uses a non-reentrant model
  7362 ;;
  7363                           
  7364                           
  7365                           ;psect for function _LCDMsg
  7366  1004                     _LCDMsg:	
  7367                           
  7368                           ;incstack = 0
  7369 ;; using string table level
  7370                           ; Regs used in _LCDMsg: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7371                           ;LCDMsg@linea stored from wreg
  7372  1004  1283               	bcf	3,5	;RP0=0, select bank0
  7373  1005  1303               	bcf	3,6	;RP1=0, select bank0
  7374  1006  00AC               	movwf	LCDMsg@linea
  7375                           
  7376                           ;lcd.c: 142: if( !LCD_Ok) return;
  7377  1007  1C7A               	btfss	_LCD_Ok/(0+8),_LCD_Ok& (0+7)
  7378  1008  0008               	return
  7379                           
  7380                           ;lcd.c: 144: LCDGoto(linea, columna);
  7381  1009  0828               	movf	LCDMsg@columna,w
  7382  100A  00AB               	movwf	??_LCDMsg
  7383  100B  082B               	movf	??_LCDMsg,w
  7384  100C  00A6               	movwf	LCDGoto@col
  7385  100D  082C               	movf	LCDMsg@linea,w
  7386  100E  160A  158A  26E8  160A  118A  	fcall	_LCDGoto
  7387  1013                     l3707:	
  7388                           ;lcd.c: 145: while(*msg && columna <= 20)
  7389                           
  7390  1013  1283               	bcf	3,5	;RP0=0, select bank0
  7391  1014  1303               	bcf	3,6	;RP1=0, select bank0
  7392  1015  082A               	movf	LCDMsg@msg+1,w
  7393  1016  00FF               	movwf	127
  7394  1017  0829               	movf	LCDMsg@msg,w
  7395  1018  0084               	movwf	4
  7396  1019  160A  158A  2000  160A  118A  	fcall	stringtab
  7397  101E  3A00               	xorlw	0
  7398  101F  1903               	skipnz
  7399  1020  0008               	return
  7400  1021  3015               	movlw	21
  7401  1022  0228               	subwf	LCDMsg@columna,w
  7402  1023  1803               	btfsc	3,0
  7403  1024  0008               	return
  7404                           
  7405                           ;lcd.c: 146: {
  7406                           ;lcd.c: 147: if(LCDSend((unsigned char)(*msg), 0))
  7407  1025  1283               	bcf	3,5	;RP0=0, select bank0
  7408  1026  1303               	bcf	3,6	;RP1=0, select bank0
  7409  1027  01A1               	clrf	LCDSend@cmd
  7410  1028  082A               	movf	LCDMsg@msg+1,w
  7411  1029  00FF               	movwf	127
  7412  102A  0829               	movf	LCDMsg@msg,w
  7413  102B  0084               	movwf	4
  7414  102C  160A  158A  2000  160A  118A  	fcall	stringtab
  7415  1031  160A  118A  21C2  160A  118A  	fcall	_LCDSend
  7416  1036  3A00               	xorlw	0
  7417  1037  1903               	skipnz
  7418  1038  283B               	goto	l763
  7419                           
  7420                           ;lcd.c: 148: {
  7421                           ;lcd.c: 149: LCD_Ok = 0;
  7422  1039  107A               	bcf	_LCD_Ok/(0+8),_LCD_Ok& (0+7)
  7423                           
  7424                           ;lcd.c: 150: break;
  7425  103A  0008               	return
  7426  103B                     l763:	
  7427                           
  7428                           ;lcd.c: 151: }
  7429                           ;lcd.c: 152: msg++;
  7430  103B  3001               	movlw	1
  7431  103C  1283               	bcf	3,5	;RP0=0, select bank0
  7432  103D  1303               	bcf	3,6	;RP1=0, select bank0
  7433  103E  07A9               	addwf	LCDMsg@msg,f
  7434  103F  1803               	skipnc
  7435  1040  0AAA               	incf	LCDMsg@msg+1,f
  7436                           
  7437                           ;lcd.c: 153: columna++;
  7438  1041  3001               	movlw	1
  7439  1042  00AB               	movwf	??_LCDMsg
  7440  1043  082B               	movf	??_LCDMsg,w
  7441  1044  07A8               	addwf	LCDMsg@columna,f
  7442  1045  2813               	goto	l3707
  7443  1046                     __end_of_LCDMsg:	
  7444                           
  7445                           	psect	text22
  7446  1EE8                     __ptext22:	
  7447 ;; *************** function _LCDGoto *****************
  7448 ;; Defined at:
  7449 ;;		line 327 in file "lcd.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  line            1    wreg     unsigned char 
  7452 ;;  col             1    6[BANK0 ] unsigned char 
  7453 ;; Auto vars:     Size  Location     Type
  7454 ;;  line            1    7[BANK0 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      void 
  7457 ;; Registers used:
  7458 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7464 ;;      Params:         0       1       0       0       0
  7465 ;;      Locals:         0       1       0       0       0
  7466 ;;      Temps:          0       0       0       0       0
  7467 ;;      Totals:         0       2       0       0       0
  7468 ;;Total ram usage:        2 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    5
  7471 ;; This function calls:
  7472 ;;		_LCDSend
  7473 ;; This function is called by:
  7474 ;;		_LCDMsg
  7475 ;; This function uses a non-reentrant model
  7476 ;;
  7477                           
  7478                           
  7479                           ;psect for function _LCDGoto
  7480  1EE8                     _LCDGoto:	
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in _LCDGoto: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7484                           ;LCDGoto@line stored from wreg
  7485  1EE8  1283               	bcf	3,5	;RP0=0, select bank0
  7486  1EE9  1303               	bcf	3,6	;RP1=0, select bank0
  7487  1EEA  00A7               	movwf	LCDGoto@line
  7488                           
  7489                           ;lcd.c: 329: if(line < 1 || line > 4) return;
  7490  1EEB  0827               	movf	LCDGoto@line,w
  7491  1EEC  1903               	btfsc	3,2
  7492  1EED  0008               	return
  7493  1EEE  3005               	movlw	5
  7494  1EEF  0227               	subwf	LCDGoto@line,w
  7495  1EF0  1803               	btfsc	3,0
  7496  1EF1  0008               	return
  7497                           
  7498                           ;lcd.c: 330: if(col < 1 || col > 20) return;
  7499  1EF2  0826               	movf	LCDGoto@col,w
  7500  1EF3  1903               	btfsc	3,2
  7501  1EF4  0008               	return
  7502  1EF5  3015               	movlw	21
  7503  1EF6  0226               	subwf	LCDGoto@col,w
  7504  1EF7  1803               	btfsc	3,0
  7505  1EF8  0008               	return
  7506  1EF9  2F20               	goto	l3499
  7507  1EFA                     l3489:	
  7508                           ;lcd.c: 332: {
  7509                           ;lcd.c: 333: case 1:
  7510                           
  7511                           ;lcd.c: 331: switch(line)
  7512                           
  7513                           
  7514                           ;lcd.c: 334: LCDSend(0x80 + 0x00 + col - 1, 1);
  7515  1EFA  01A1               	clrf	LCDSend@cmd
  7516  1EFB  0AA1               	incf	LCDSend@cmd,f
  7517  1EFC  0826               	movf	LCDGoto@col,w
  7518  1EFD  3E7F               	addlw	127
  7519  1EFE  160A  118A  21C2   	fcall	_LCDSend
  7520                           
  7521                           ;lcd.c: 335: break;
  7522  1F01  0008               	return
  7523  1F02                     l3491:	
  7524                           ;lcd.c: 336: case 2:
  7525                           
  7526                           
  7527                           ;lcd.c: 337: LCDSend(0x80 + 0x40 + col - 1, 1);
  7528  1F02  1283               	bcf	3,5	;RP0=0, select bank0
  7529  1F03  1303               	bcf	3,6	;RP1=0, select bank0
  7530  1F04  01A1               	clrf	LCDSend@cmd
  7531  1F05  0AA1               	incf	LCDSend@cmd,f
  7532  1F06  0826               	movf	LCDGoto@col,w
  7533  1F07  3EBF               	addlw	191
  7534  1F08  160A  118A  21C2   	fcall	_LCDSend
  7535                           
  7536                           ;lcd.c: 338: break;
  7537  1F0B  0008               	return
  7538  1F0C                     l3493:	
  7539                           ;lcd.c: 339: case 3:
  7540                           
  7541                           
  7542                           ;lcd.c: 340: LCDSend(0x80 + 0x14 + col - 1, 1);
  7543  1F0C  1283               	bcf	3,5	;RP0=0, select bank0
  7544  1F0D  1303               	bcf	3,6	;RP1=0, select bank0
  7545  1F0E  01A1               	clrf	LCDSend@cmd
  7546  1F0F  0AA1               	incf	LCDSend@cmd,f
  7547  1F10  0826               	movf	LCDGoto@col,w
  7548  1F11  3E93               	addlw	147
  7549  1F12  160A  118A  21C2   	fcall	_LCDSend
  7550                           
  7551                           ;lcd.c: 341: break;
  7552  1F15  0008               	return
  7553  1F16                     l3495:	
  7554                           ;lcd.c: 342: case 4:
  7555                           
  7556                           
  7557                           ;lcd.c: 343: LCDSend(0x80 + 0x54 + col - 1, 1);
  7558  1F16  1283               	bcf	3,5	;RP0=0, select bank0
  7559  1F17  1303               	bcf	3,6	;RP1=0, select bank0
  7560  1F18  01A1               	clrf	LCDSend@cmd
  7561  1F19  0AA1               	incf	LCDSend@cmd,f
  7562  1F1A  0826               	movf	LCDGoto@col,w
  7563  1F1B  3ED3               	addlw	211
  7564  1F1C  160A  118A  21C2   	fcall	_LCDSend
  7565                           
  7566                           ;lcd.c: 345: }
  7567                           
  7568                           ;lcd.c: 344: break;
  7569  1F1F  0008               	return
  7570  1F20                     l3499:	
  7571  1F20  1283               	bcf	3,5	;RP0=0, select bank0
  7572  1F21  1303               	bcf	3,6	;RP1=0, select bank0
  7573  1F22  0827               	movf	LCDGoto@line,w
  7574                           
  7575                           ; Switch size 1, requested type "space"
  7576                           ; Number of cases is 4, Range of values is 1 to 4
  7577                           ; switch strategies available:
  7578                           ; Name         Instructions Cycles
  7579                           ; simple_byte           13     7 (average)
  7580                           ; direct_byte           23    11 (fixed)
  7581                           ; jumptable            263     9 (fixed)
  7582                           ;	Chosen strategy is simple_byte
  7583  1F23  3A01               	xorlw	1	; case 1
  7584  1F24  1903               	skipnz
  7585  1F25  2EFA               	goto	l3489
  7586  1F26  3A03               	xorlw	3	; case 2
  7587  1F27  1903               	skipnz
  7588  1F28  2F02               	goto	l3491
  7589  1F29  3A01               	xorlw	1	; case 3
  7590  1F2A  1903               	skipnz
  7591  1F2B  2F0C               	goto	l3493
  7592  1F2C  3A07               	xorlw	7	; case 4
  7593  1F2D  1903               	skipnz
  7594  1F2E  2F16               	goto	l3495
  7595  1F2F  2F30               	goto	l782
  7596  1F30                     l782:	
  7597  1F30  0008               	return
  7598  1F31                     __end_of_LCDGoto:	
  7599                           
  7600                           	psect	text23
  7601  07FE                     __ptext23:	
  7602 ;; *************** function _PerifTimer1s *****************
  7603 ;; Defined at:
  7604 ;;		line 74 in file "perif.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		None
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7618 ;;      Params:         0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0
  7621 ;;      Totals:         0       0       0       0       0
  7622 ;;Total ram usage:        0 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    3
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _PerifTimer1s
  7634  07FE                     _PerifTimer1s:	
  7635                           
  7636                           ;incstack = 0
  7637                           ; Regs used in _PerifTimer1s: []
  7638  07FE  0008               	return
  7639  07FF                     __end_of_PerifTimer1s:	
  7640                           
  7641                           	psect	text24
  7642  1D72                     __ptext24:	
  7643 ;; *************** function _PerifTimer10ms *****************
  7644 ;; Defined at:
  7645 ;;		line 46 in file "perif.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;                  1    wreg      void 
  7652 ;; Registers used:
  7653 ;;		wreg, status,2, status,0
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7659 ;;      Params:         0       0       0       0       0
  7660 ;;      Locals:         0       0       0       0       0
  7661 ;;      Temps:          0       1       0       0       0
  7662 ;;      Totals:         0       1       0       0       0
  7663 ;;Total ram usage:        1 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    3
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_main
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           
  7674                           ;psect for function _PerifTimer10ms
  7675  1D72                     _PerifTimer10ms:	
  7676                           
  7677                           ;perif.c: 48: if(PerifBeepOn)
  7678                           
  7679                           ;incstack = 0
  7680                           ; Regs used in _PerifTimer10ms: [wreg+status,2+status,0]
  7681  1D72  1683               	bsf	3,5	;RP0=1, select bank1
  7682  1D73  1303               	bcf	3,6	;RP1=0, select bank1
  7683  1D74  0864               	movf	_PerifBeepOn^(0+128),w
  7684  1D75  1903               	btfsc	3,2
  7685  1D76  2D89               	goto	l4627
  7686                           
  7687                           ;perif.c: 49: {
  7688                           ;perif.c: 50: PerifBeepOn--;
  7689  1D77  3001               	movlw	1
  7690  1D78  02E4               	subwf	_PerifBeepOn^(0+128),f
  7691                           
  7692                           ;perif.c: 51: if( !PerifBeepOn)
  7693  1D79  0864               	movf	_PerifBeepOn^(0+128),w
  7694  1D7A  1D03               	btfss	3,2
  7695  1D7B  0008               	return
  7696                           
  7697                           ;perif.c: 52: {
  7698                           ;perif.c: 53: PORTE &= 0b11111101;
  7699  1D7C  30FD               	movlw	253
  7700  1D7D  1283               	bcf	3,5	;RP0=0, select bank0
  7701  1D7E  1303               	bcf	3,6	;RP1=0, select bank0
  7702  1D7F  00A0               	movwf	??_PerifTimer10ms
  7703  1D80  0820               	movf	??_PerifTimer10ms,w
  7704  1D81  0589               	andwf	9,f	;volatile
  7705                           
  7706                           ;perif.c: 54: PerifBeepOff = 30;
  7707  1D82  301E               	movlw	30
  7708  1D83  00A0               	movwf	??_PerifTimer10ms
  7709  1D84  0820               	movf	??_PerifTimer10ms,w
  7710  1D85  1683               	bsf	3,5	;RP0=1, select bank1
  7711  1D86  1303               	bcf	3,6	;RP1=0, select bank1
  7712  1D87  00E3               	movwf	_PerifBeepOff^(0+128)
  7713                           
  7714                           ;perif.c: 55: }
  7715                           ;perif.c: 56: }
  7716  1D88  0008               	return
  7717  1D89                     l4627:	
  7718                           
  7719                           ;perif.c: 57: else if(PerifBeepOff)
  7720  1D89  0863               	movf	_PerifBeepOff^(0+128),w
  7721  1D8A  1903               	btfsc	3,2
  7722  1D8B  0008               	return
  7723                           
  7724                           ;perif.c: 58: {
  7725                           ;perif.c: 59: PerifBeepOff--;
  7726  1D8C  3001               	movlw	1
  7727  1D8D  02E3               	subwf	_PerifBeepOff^(0+128),f
  7728                           
  7729                           ;perif.c: 60: if( !PerifBeepOff)
  7730  1D8E  0863               	movf	_PerifBeepOff^(0+128),w
  7731  1D8F  1D03               	btfss	3,2
  7732  1D90  0008               	return
  7733                           
  7734                           ;perif.c: 61: {
  7735                           ;perif.c: 62: PerifBeepCount--;
  7736  1D91  3001               	movlw	1
  7737  1D92  02E5               	subwf	_PerifBeepCount^(0+128),f
  7738                           
  7739                           ;perif.c: 63: if(PerifBeepCount)
  7740  1D93  0865               	movf	_PerifBeepCount^(0+128),w
  7741  1D94  1903               	btfsc	3,2
  7742  1D95  0008               	return
  7743                           
  7744                           ;perif.c: 64: {
  7745                           ;perif.c: 65: PORTE |= 0b00000010;
  7746  1D96  1283               	bcf	3,5	;RP0=0, select bank0
  7747  1D97  1303               	bcf	3,6	;RP1=0, select bank0
  7748  1D98  1489               	bsf	9,1	;volatile
  7749                           
  7750                           ;perif.c: 66: PerifBeepOn = 5;
  7751  1D99  3005               	movlw	5
  7752  1D9A  00A0               	movwf	??_PerifTimer10ms
  7753  1D9B  0820               	movf	??_PerifTimer10ms,w
  7754  1D9C  1683               	bsf	3,5	;RP0=1, select bank1
  7755  1D9D  1303               	bcf	3,6	;RP1=0, select bank1
  7756  1D9E  00E4               	movwf	_PerifBeepOn^(0+128)
  7757  1D9F  0008               	return
  7758  1DA0                     __end_of_PerifTimer10ms:	
  7759                           
  7760                           	psect	text25
  7761  07FF                     __ptext25:	
  7762 ;; *************** function _PerifTask *****************
  7763 ;; Defined at:
  7764 ;;		line 41 in file "perif.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;		None
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		None
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7778 ;;      Params:         0       0       0       0       0
  7779 ;;      Locals:         0       0       0       0       0
  7780 ;;      Temps:          0       0       0       0       0
  7781 ;;      Totals:         0       0       0       0       0
  7782 ;;Total ram usage:        0 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    3
  7785 ;; This function calls:
  7786 ;;		Nothing
  7787 ;; This function is called by:
  7788 ;;		_main
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           
  7793                           ;psect for function _PerifTask
  7794  07FF                     _PerifTask:	
  7795                           
  7796                           ;incstack = 0
  7797                           ; Regs used in _PerifTask: []
  7798  07FF  0008               	return
  7799  0800                     __end_of_PerifTask:	
  7800                           
  7801                           	psect	text26
  7802  1C8C                     __ptext26:	
  7803 ;; *************** function _PerifInit *****************
  7804 ;; Defined at:
  7805 ;;		line 33 in file "perif.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;		None
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;		None
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		status,2
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7819 ;;      Params:         0       0       0       0       0
  7820 ;;      Locals:         0       0       0       0       0
  7821 ;;      Temps:          0       0       0       0       0
  7822 ;;      Totals:         0       0       0       0       0
  7823 ;;Total ram usage:        0 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; Hardware stack levels required when called:    3
  7826 ;; This function calls:
  7827 ;;		Nothing
  7828 ;; This function is called by:
  7829 ;;		_main
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function _PerifInit
  7835  1C8C                     _PerifInit:	
  7836                           
  7837                           ;perif.c: 35: RE1 = 0;
  7838                           
  7839                           ;incstack = 0
  7840                           ; Regs used in _PerifInit: [status,2]
  7841  1C8C  1283               	bcf	3,5	;RP0=0, select bank0
  7842  1C8D  1303               	bcf	3,6	;RP1=0, select bank0
  7843  1C8E  1089               	bcf	9,1	;volatile
  7844                           
  7845                           ;perif.c: 36: PerifBeepCount = 0;
  7846  1C8F  1683               	bsf	3,5	;RP0=1, select bank1
  7847  1C90  1303               	bcf	3,6	;RP1=0, select bank1
  7848  1C91  01E5               	clrf	_PerifBeepCount^(0+128)
  7849                           
  7850                           ;perif.c: 37: PerifBeepOn = 0;
  7851  1C92  01E4               	clrf	_PerifBeepOn^(0+128)
  7852                           
  7853                           ;perif.c: 38: PerifBeepOff = 0;
  7854  1C93  01E3               	clrf	_PerifBeepOff^(0+128)
  7855  1C94  0008               	return
  7856  1C95                     __end_of_PerifInit:	
  7857                           
  7858                           	psect	text27
  7859  09F1                     __ptext27:	
  7860 ;; *************** function _LoadStatus *****************
  7861 ;; Defined at:
  7862 ;;		line 223 in file "main.c"
  7863 ;; Parameters:    Size  Location     Type
  7864 ;;		None
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;		None
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      void 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, pclath, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7876 ;;      Params:         0       0       0       0       0
  7877 ;;      Locals:         0       0       0       0       0
  7878 ;;      Temps:          0       1       0       0       0
  7879 ;;      Totals:         0       1       0       0       0
  7880 ;;Total ram usage:        1 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    4
  7883 ;; This function calls:
  7884 ;;		_iEEgetc
  7885 ;; This function is called by:
  7886 ;;		_main
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           
  7891                           ;psect for function _LoadStatus
  7892  09F1                     _LoadStatus:	
  7893                           
  7894                           ;main.c: 226: if(iEEgetc(128) != 0xA5)
  7895                           
  7896                           ;incstack = 0
  7897                           ; Regs used in _LoadStatus: [wreg+status,2+pclath+cstack]
  7898  09F1  3080               	movlw	128
  7899  09F2  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  7900  09F7  3AA5               	xorlw	165
  7901  09F8  1903               	skipnz
  7902  09F9  2A15               	goto	l4217
  7903                           
  7904                           ;main.c: 227: {
  7905                           ;main.c: 228: IOPORT.io[0].status = 0;
  7906  09FA  1683               	bsf	3,5	;RP0=1, select bank1
  7907  09FB  1303               	bcf	3,6	;RP1=0, select bank1
  7908  09FC  01A0               	clrf	_IOPORT^(0+128)
  7909                           
  7910                           ;main.c: 229: IOPORT.io[1].status = 0;
  7911  09FD  01A3               	clrf	(_IOPORT^(0+128)+3)
  7912                           
  7913                           ;main.c: 230: IOPORT.io[2].status = 0;
  7914  09FE  01A6               	clrf	(_IOPORT^(0+128)+6)
  7915                           
  7916                           ;main.c: 231: IOPORT.io[3].status = 0;
  7917  09FF  01A9               	clrf	(_IOPORT^(0+128)+9)
  7918                           
  7919                           ;main.c: 232: IOPORT.analog[0].alarm = 0;
  7920  0A00  01AC               	clrf	(_IOPORT^(0+128)+12)
  7921                           
  7922                           ;main.c: 233: IOPORT.analog[1].alarm = 0;
  7923  0A01  01B0               	clrf	(_IOPORT^(0+128)+16)
  7924                           
  7925                           ;main.c: 234: IOPORT.analog[2].alarm = 0;
  7926  0A02  01B4               	clrf	(_IOPORT^(0+128)+20)
  7927                           
  7928                           ;main.c: 235: IOPORT.analog[3].alarm = 0;
  7929  0A03  01B8               	clrf	(_IOPORT^(0+128)+24)
  7930                           
  7931                           ;main.c: 236: IOPORT.pulse[0] = 0;
  7932  0A04  01BC               	clrf	(_IOPORT^(0+128)+28)
  7933                           
  7934                           ;main.c: 237: IOPORT.pulse[1] = 0;
  7935  0A05  01BD               	clrf	(_IOPORT^(0+128)+29)
  7936                           
  7937                           ;main.c: 238: IOPORT.pulse[2] = 0;
  7938  0A06  01BE               	clrf	(_IOPORT^(0+128)+30)
  7939                           
  7940                           ;main.c: 239: IOPORT.pulse[3] = 0;
  7941  0A07  01BF               	clrf	(_IOPORT^(0+128)+31)
  7942                           
  7943                           ;main.c: 240: IOPORT.pulse[4] = 0;
  7944  0A08  01C0               	clrf	(_IOPORT^(0+128)+32)
  7945                           
  7946                           ;main.c: 241: IOPORT.pulse[5] = 0;
  7947  0A09  01C1               	clrf	(_IOPORT^(0+128)+33)
  7948                           
  7949                           ;main.c: 242: IOPORT.pulse[6] = 0;
  7950  0A0A  01C2               	clrf	(_IOPORT^(0+128)+34)
  7951                           
  7952                           ;main.c: 243: IOPORT.pulse[7] = 0;
  7953  0A0B  01C3               	clrf	(_IOPORT^(0+128)+35)
  7954                           
  7955                           ;main.c: 244: IOPORT.pulse[8] = 0;
  7956  0A0C  01C4               	clrf	(_IOPORT^(0+128)+36)
  7957                           
  7958                           ;main.c: 245: IOPORT.pulse[9] = 0;
  7959  0A0D  01C5               	clrf	(_IOPORT^(0+128)+37)
  7960                           
  7961                           ;main.c: 246: IOPORT.pulse[0] = 0;
  7962  0A0E  01BC               	clrf	(_IOPORT^(0+128)+28)
  7963                           
  7964                           ;main.c: 247: IOPORT.pulse[1] = 0;
  7965  0A0F  01BD               	clrf	(_IOPORT^(0+128)+29)
  7966                           
  7967                           ;main.c: 248: IOPORT.pulse[2] = 0;
  7968  0A10  01BE               	clrf	(_IOPORT^(0+128)+30)
  7969                           
  7970                           ;main.c: 249: IOPORT.pulse[3] = 0;
  7971  0A11  01BF               	clrf	(_IOPORT^(0+128)+31)
  7972                           
  7973                           ;main.c: 250: IOPORT.pulse[4] = 0;
  7974  0A12  01C0               	clrf	(_IOPORT^(0+128)+32)
  7975                           
  7976                           ;main.c: 251: IOPORT.pulse[5] = 0;
  7977  0A13  01C1               	clrf	(_IOPORT^(0+128)+33)
  7978                           
  7979                           ;main.c: 252: }
  7980  0A14  2B4D               	goto	l4219
  7981  0A15                     l4217:	
  7982                           
  7983                           ;main.c: 253: else
  7984                           ;main.c: 254: {
  7985                           ;main.c: 255: IOPORT.io[0].status = iEEgetc(129);
  7986  0A15  3081               	movlw	129
  7987  0A16  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  7988  0A1B  1283               	bcf	3,5	;RP0=0, select bank0
  7989  0A1C  1303               	bcf	3,6	;RP1=0, select bank0
  7990  0A1D  00A1               	movwf	??_LoadStatus
  7991  0A1E  0821               	movf	??_LoadStatus,w
  7992  0A1F  1683               	bsf	3,5	;RP0=1, select bank1
  7993  0A20  1303               	bcf	3,6	;RP1=0, select bank1
  7994  0A21  00A0               	movwf	_IOPORT^(0+128)
  7995                           
  7996                           ;main.c: 256: IOPORT.io[1].status = iEEgetc(130);
  7997  0A22  3082               	movlw	130
  7998  0A23  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  7999  0A28  1283               	bcf	3,5	;RP0=0, select bank0
  8000  0A29  1303               	bcf	3,6	;RP1=0, select bank0
  8001  0A2A  00A1               	movwf	??_LoadStatus
  8002  0A2B  0821               	movf	??_LoadStatus,w
  8003  0A2C  1683               	bsf	3,5	;RP0=1, select bank1
  8004  0A2D  1303               	bcf	3,6	;RP1=0, select bank1
  8005  0A2E  00A3               	movwf	(_IOPORT^(0+128)+3)
  8006                           
  8007                           ;main.c: 257: IOPORT.io[2].status = iEEgetc(131);
  8008  0A2F  3083               	movlw	131
  8009  0A30  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8010  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  8011  0A36  1303               	bcf	3,6	;RP1=0, select bank0
  8012  0A37  00A1               	movwf	??_LoadStatus
  8013  0A38  0821               	movf	??_LoadStatus,w
  8014  0A39  1683               	bsf	3,5	;RP0=1, select bank1
  8015  0A3A  1303               	bcf	3,6	;RP1=0, select bank1
  8016  0A3B  00A6               	movwf	(_IOPORT^(0+128)+6)
  8017                           
  8018                           ;main.c: 258: IOPORT.io[3].status = iEEgetc(132);
  8019  0A3C  3084               	movlw	132
  8020  0A3D  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8021  0A42  1283               	bcf	3,5	;RP0=0, select bank0
  8022  0A43  1303               	bcf	3,6	;RP1=0, select bank0
  8023  0A44  00A1               	movwf	??_LoadStatus
  8024  0A45  0821               	movf	??_LoadStatus,w
  8025  0A46  1683               	bsf	3,5	;RP0=1, select bank1
  8026  0A47  1303               	bcf	3,6	;RP1=0, select bank1
  8027  0A48  00A9               	movwf	(_IOPORT^(0+128)+9)
  8028                           
  8029                           ;main.c: 259: IOPORT.analog[0].alarm = iEEgetc(133);
  8030  0A49  3085               	movlw	133
  8031  0A4A  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8032  0A4F  1283               	bcf	3,5	;RP0=0, select bank0
  8033  0A50  1303               	bcf	3,6	;RP1=0, select bank0
  8034  0A51  00A1               	movwf	??_LoadStatus
  8035  0A52  0821               	movf	??_LoadStatus,w
  8036  0A53  1683               	bsf	3,5	;RP0=1, select bank1
  8037  0A54  1303               	bcf	3,6	;RP1=0, select bank1
  8038  0A55  00AC               	movwf	(_IOPORT^(0+128)+12)
  8039                           
  8040                           ;main.c: 260: IOPORT.analog[1].alarm = iEEgetc(134);
  8041  0A56  3086               	movlw	134
  8042  0A57  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8043  0A5C  1283               	bcf	3,5	;RP0=0, select bank0
  8044  0A5D  1303               	bcf	3,6	;RP1=0, select bank0
  8045  0A5E  00A1               	movwf	??_LoadStatus
  8046  0A5F  0821               	movf	??_LoadStatus,w
  8047  0A60  1683               	bsf	3,5	;RP0=1, select bank1
  8048  0A61  1303               	bcf	3,6	;RP1=0, select bank1
  8049  0A62  00B0               	movwf	(_IOPORT^(0+128)+16)
  8050                           
  8051                           ;main.c: 261: IOPORT.analog[2].alarm = iEEgetc(135);
  8052  0A63  3087               	movlw	135
  8053  0A64  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8054  0A69  1283               	bcf	3,5	;RP0=0, select bank0
  8055  0A6A  1303               	bcf	3,6	;RP1=0, select bank0
  8056  0A6B  00A1               	movwf	??_LoadStatus
  8057  0A6C  0821               	movf	??_LoadStatus,w
  8058  0A6D  1683               	bsf	3,5	;RP0=1, select bank1
  8059  0A6E  1303               	bcf	3,6	;RP1=0, select bank1
  8060  0A6F  00B4               	movwf	(_IOPORT^(0+128)+20)
  8061                           
  8062                           ;main.c: 262: IOPORT.analog[3].alarm = iEEgetc(136);
  8063  0A70  3088               	movlw	136
  8064  0A71  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8065  0A76  1283               	bcf	3,5	;RP0=0, select bank0
  8066  0A77  1303               	bcf	3,6	;RP1=0, select bank0
  8067  0A78  00A1               	movwf	??_LoadStatus
  8068  0A79  0821               	movf	??_LoadStatus,w
  8069  0A7A  1683               	bsf	3,5	;RP0=1, select bank1
  8070  0A7B  1303               	bcf	3,6	;RP1=0, select bank1
  8071  0A7C  00B8               	movwf	(_IOPORT^(0+128)+24)
  8072                           
  8073                           ;main.c: 263: IOPORT.pulse[0] = iEEgetc(137);
  8074  0A7D  3089               	movlw	137
  8075  0A7E  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8076  0A83  1283               	bcf	3,5	;RP0=0, select bank0
  8077  0A84  1303               	bcf	3,6	;RP1=0, select bank0
  8078  0A85  00A1               	movwf	??_LoadStatus
  8079  0A86  0821               	movf	??_LoadStatus,w
  8080  0A87  1683               	bsf	3,5	;RP0=1, select bank1
  8081  0A88  1303               	bcf	3,6	;RP1=0, select bank1
  8082  0A89  00BC               	movwf	(_IOPORT^(0+128)+28)
  8083                           
  8084                           ;main.c: 264: IOPORT.pulse[1] = iEEgetc(138);
  8085  0A8A  308A               	movlw	138
  8086  0A8B  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8087  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  8088  0A91  1303               	bcf	3,6	;RP1=0, select bank0
  8089  0A92  00A1               	movwf	??_LoadStatus
  8090  0A93  0821               	movf	??_LoadStatus,w
  8091  0A94  1683               	bsf	3,5	;RP0=1, select bank1
  8092  0A95  1303               	bcf	3,6	;RP1=0, select bank1
  8093  0A96  00BD               	movwf	(_IOPORT^(0+128)+29)
  8094                           
  8095                           ;main.c: 265: IOPORT.pulse[2] = iEEgetc(139);
  8096  0A97  308B               	movlw	139
  8097  0A98  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8098  0A9D  1283               	bcf	3,5	;RP0=0, select bank0
  8099  0A9E  1303               	bcf	3,6	;RP1=0, select bank0
  8100  0A9F  00A1               	movwf	??_LoadStatus
  8101  0AA0  0821               	movf	??_LoadStatus,w
  8102  0AA1  1683               	bsf	3,5	;RP0=1, select bank1
  8103  0AA2  1303               	bcf	3,6	;RP1=0, select bank1
  8104  0AA3  00BE               	movwf	(_IOPORT^(0+128)+30)
  8105                           
  8106                           ;main.c: 266: IOPORT.pulse[3] = iEEgetc(140);
  8107  0AA4  308C               	movlw	140
  8108  0AA5  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8109  0AAA  1283               	bcf	3,5	;RP0=0, select bank0
  8110  0AAB  1303               	bcf	3,6	;RP1=0, select bank0
  8111  0AAC  00A1               	movwf	??_LoadStatus
  8112  0AAD  0821               	movf	??_LoadStatus,w
  8113  0AAE  1683               	bsf	3,5	;RP0=1, select bank1
  8114  0AAF  1303               	bcf	3,6	;RP1=0, select bank1
  8115  0AB0  00BF               	movwf	(_IOPORT^(0+128)+31)
  8116                           
  8117                           ;main.c: 267: IOPORT.pulse[4] = iEEgetc(141);
  8118  0AB1  308D               	movlw	141
  8119  0AB2  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8120  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
  8121  0AB8  1303               	bcf	3,6	;RP1=0, select bank0
  8122  0AB9  00A1               	movwf	??_LoadStatus
  8123  0ABA  0821               	movf	??_LoadStatus,w
  8124  0ABB  1683               	bsf	3,5	;RP0=1, select bank1
  8125  0ABC  1303               	bcf	3,6	;RP1=0, select bank1
  8126  0ABD  00C0               	movwf	(_IOPORT^(0+128)+32)
  8127                           
  8128                           ;main.c: 268: IOPORT.pulse[5] = iEEgetc(142);
  8129  0ABE  308E               	movlw	142
  8130  0ABF  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8131  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  8132  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  8133  0AC6  00A1               	movwf	??_LoadStatus
  8134  0AC7  0821               	movf	??_LoadStatus,w
  8135  0AC8  1683               	bsf	3,5	;RP0=1, select bank1
  8136  0AC9  1303               	bcf	3,6	;RP1=0, select bank1
  8137  0ACA  00C1               	movwf	(_IOPORT^(0+128)+33)
  8138                           
  8139                           ;main.c: 269: IOPORT.pulse[6] = iEEgetc(143);
  8140  0ACB  308F               	movlw	143
  8141  0ACC  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8142  0AD1  1283               	bcf	3,5	;RP0=0, select bank0
  8143  0AD2  1303               	bcf	3,6	;RP1=0, select bank0
  8144  0AD3  00A1               	movwf	??_LoadStatus
  8145  0AD4  0821               	movf	??_LoadStatus,w
  8146  0AD5  1683               	bsf	3,5	;RP0=1, select bank1
  8147  0AD6  1303               	bcf	3,6	;RP1=0, select bank1
  8148  0AD7  00C2               	movwf	(_IOPORT^(0+128)+34)
  8149                           
  8150                           ;main.c: 270: IOPORT.pulse[7] = iEEgetc(144);
  8151  0AD8  3090               	movlw	144
  8152  0AD9  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8153  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
  8154  0ADF  1303               	bcf	3,6	;RP1=0, select bank0
  8155  0AE0  00A1               	movwf	??_LoadStatus
  8156  0AE1  0821               	movf	??_LoadStatus,w
  8157  0AE2  1683               	bsf	3,5	;RP0=1, select bank1
  8158  0AE3  1303               	bcf	3,6	;RP1=0, select bank1
  8159  0AE4  00C3               	movwf	(_IOPORT^(0+128)+35)
  8160                           
  8161                           ;main.c: 271: IOPORT.pulse[8] = iEEgetc(145);
  8162  0AE5  3091               	movlw	145
  8163  0AE6  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8164  0AEB  1283               	bcf	3,5	;RP0=0, select bank0
  8165  0AEC  1303               	bcf	3,6	;RP1=0, select bank0
  8166  0AED  00A1               	movwf	??_LoadStatus
  8167  0AEE  0821               	movf	??_LoadStatus,w
  8168  0AEF  1683               	bsf	3,5	;RP0=1, select bank1
  8169  0AF0  1303               	bcf	3,6	;RP1=0, select bank1
  8170  0AF1  00C4               	movwf	(_IOPORT^(0+128)+36)
  8171                           
  8172                           ;main.c: 272: IOPORT.pulse[9] = iEEgetc(146);
  8173  0AF2  3092               	movlw	146
  8174  0AF3  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8175  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
  8176  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
  8177  0AFA  00A1               	movwf	??_LoadStatus
  8178  0AFB  0821               	movf	??_LoadStatus,w
  8179  0AFC  1683               	bsf	3,5	;RP0=1, select bank1
  8180  0AFD  1303               	bcf	3,6	;RP1=0, select bank1
  8181  0AFE  00C5               	movwf	(_IOPORT^(0+128)+37)
  8182                           
  8183                           ;main.c: 273: IOPORT.pulse[0] = iEEgetc(147);
  8184  0AFF  3093               	movlw	147
  8185  0B00  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8186  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  8187  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  8188  0B07  00A1               	movwf	??_LoadStatus
  8189  0B08  0821               	movf	??_LoadStatus,w
  8190  0B09  1683               	bsf	3,5	;RP0=1, select bank1
  8191  0B0A  1303               	bcf	3,6	;RP1=0, select bank1
  8192  0B0B  00BC               	movwf	(_IOPORT^(0+128)+28)
  8193                           
  8194                           ;main.c: 274: IOPORT.pulse[1] = iEEgetc(148);
  8195  0B0C  3094               	movlw	148
  8196  0B0D  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8197  0B12  1283               	bcf	3,5	;RP0=0, select bank0
  8198  0B13  1303               	bcf	3,6	;RP1=0, select bank0
  8199  0B14  00A1               	movwf	??_LoadStatus
  8200  0B15  0821               	movf	??_LoadStatus,w
  8201  0B16  1683               	bsf	3,5	;RP0=1, select bank1
  8202  0B17  1303               	bcf	3,6	;RP1=0, select bank1
  8203  0B18  00BD               	movwf	(_IOPORT^(0+128)+29)
  8204                           
  8205                           ;main.c: 275: IOPORT.pulse[2] = iEEgetc(149);
  8206  0B19  3095               	movlw	149
  8207  0B1A  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8208  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  8209  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  8210  0B21  00A1               	movwf	??_LoadStatus
  8211  0B22  0821               	movf	??_LoadStatus,w
  8212  0B23  1683               	bsf	3,5	;RP0=1, select bank1
  8213  0B24  1303               	bcf	3,6	;RP1=0, select bank1
  8214  0B25  00BE               	movwf	(_IOPORT^(0+128)+30)
  8215                           
  8216                           ;main.c: 276: IOPORT.pulse[3] = iEEgetc(150);
  8217  0B26  3096               	movlw	150
  8218  0B27  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8219  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  8220  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  8221  0B2E  00A1               	movwf	??_LoadStatus
  8222  0B2F  0821               	movf	??_LoadStatus,w
  8223  0B30  1683               	bsf	3,5	;RP0=1, select bank1
  8224  0B31  1303               	bcf	3,6	;RP1=0, select bank1
  8225  0B32  00BF               	movwf	(_IOPORT^(0+128)+31)
  8226                           
  8227                           ;main.c: 277: IOPORT.pulse[4] = iEEgetc(151);
  8228  0B33  3097               	movlw	151
  8229  0B34  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8230  0B39  1283               	bcf	3,5	;RP0=0, select bank0
  8231  0B3A  1303               	bcf	3,6	;RP1=0, select bank0
  8232  0B3B  00A1               	movwf	??_LoadStatus
  8233  0B3C  0821               	movf	??_LoadStatus,w
  8234  0B3D  1683               	bsf	3,5	;RP0=1, select bank1
  8235  0B3E  1303               	bcf	3,6	;RP1=0, select bank1
  8236  0B3F  00C0               	movwf	(_IOPORT^(0+128)+32)
  8237                           
  8238                           ;main.c: 278: IOPORT.pulse[5] = iEEgetc(152);
  8239  0B40  3098               	movlw	152
  8240  0B41  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8241  0B46  1283               	bcf	3,5	;RP0=0, select bank0
  8242  0B47  1303               	bcf	3,6	;RP1=0, select bank0
  8243  0B48  00A1               	movwf	??_LoadStatus
  8244  0B49  0821               	movf	??_LoadStatus,w
  8245  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
  8246  0B4B  1303               	bcf	3,6	;RP1=0, select bank1
  8247  0B4C  00C1               	movwf	(_IOPORT^(0+128)+33)
  8248  0B4D                     l4219:	
  8249                           
  8250                           ;main.c: 279: }
  8251                           ;main.c: 281: IOPORT.io[0].last_status = ~IOPORT.io[0].status;
  8252  0B4D  0920               	comf	_IOPORT^(0+128),w
  8253  0B4E  1283               	bcf	3,5	;RP0=0, select bank0
  8254  0B4F  1303               	bcf	3,6	;RP1=0, select bank0
  8255  0B50  00A1               	movwf	??_LoadStatus
  8256  0B51  0821               	movf	??_LoadStatus,w
  8257  0B52  1683               	bsf	3,5	;RP0=1, select bank1
  8258  0B53  1303               	bcf	3,6	;RP1=0, select bank1
  8259  0B54  00A1               	movwf	(_IOPORT^(0+128)+1)
  8260                           
  8261                           ;main.c: 282: IOPORT.io[1].last_status = ~IOPORT.io[1].status;
  8262  0B55  0923               	comf	(_IOPORT^(0+128)+3),w
  8263  0B56  1283               	bcf	3,5	;RP0=0, select bank0
  8264  0B57  1303               	bcf	3,6	;RP1=0, select bank0
  8265  0B58  00A1               	movwf	??_LoadStatus
  8266  0B59  0821               	movf	??_LoadStatus,w
  8267  0B5A  1683               	bsf	3,5	;RP0=1, select bank1
  8268  0B5B  1303               	bcf	3,6	;RP1=0, select bank1
  8269  0B5C  00A4               	movwf	(_IOPORT^(0+128)+4)
  8270                           
  8271                           ;main.c: 283: IOPORT.analog[0].last_alarm = ~IOPORT.analog[0].alarm;
  8272  0B5D  092C               	comf	(_IOPORT^(0+128)+12),w
  8273  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
  8274  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
  8275  0B60  00A1               	movwf	??_LoadStatus
  8276  0B61  0821               	movf	??_LoadStatus,w
  8277  0B62  1683               	bsf	3,5	;RP0=1, select bank1
  8278  0B63  1303               	bcf	3,6	;RP1=0, select bank1
  8279  0B64  00AD               	movwf	(_IOPORT^(0+128)+13)
  8280                           
  8281                           ;main.c: 284: IOPORT.analog[1].last_alarm = ~IOPORT.analog[1].alarm;
  8282  0B65  0930               	comf	(_IOPORT^(0+128)+16),w
  8283  0B66  1283               	bcf	3,5	;RP0=0, select bank0
  8284  0B67  1303               	bcf	3,6	;RP1=0, select bank0
  8285  0B68  00A1               	movwf	??_LoadStatus
  8286  0B69  0821               	movf	??_LoadStatus,w
  8287  0B6A  1683               	bsf	3,5	;RP0=1, select bank1
  8288  0B6B  1303               	bcf	3,6	;RP1=0, select bank1
  8289  0B6C  00B1               	movwf	(_IOPORT^(0+128)+17)
  8290                           
  8291                           ;main.c: 285: IOPORT.analog[2].last_alarm = ~IOPORT.analog[2].alarm;
  8292  0B6D  0934               	comf	(_IOPORT^(0+128)+20),w
  8293  0B6E  1283               	bcf	3,5	;RP0=0, select bank0
  8294  0B6F  1303               	bcf	3,6	;RP1=0, select bank0
  8295  0B70  00A1               	movwf	??_LoadStatus
  8296  0B71  0821               	movf	??_LoadStatus,w
  8297  0B72  1683               	bsf	3,5	;RP0=1, select bank1
  8298  0B73  1303               	bcf	3,6	;RP1=0, select bank1
  8299  0B74  00B5               	movwf	(_IOPORT^(0+128)+21)
  8300                           
  8301                           ;main.c: 286: IOPORT.analog[3].last_alarm = ~IOPORT.analog[3].alarm;
  8302  0B75  0938               	comf	(_IOPORT^(0+128)+24),w
  8303  0B76  1283               	bcf	3,5	;RP0=0, select bank0
  8304  0B77  1303               	bcf	3,6	;RP1=0, select bank0
  8305  0B78  00A1               	movwf	??_LoadStatus
  8306  0B79  0821               	movf	??_LoadStatus,w
  8307  0B7A  1683               	bsf	3,5	;RP0=1, select bank1
  8308  0B7B  1303               	bcf	3,6	;RP1=0, select bank1
  8309  0B7C  00B9               	movwf	(_IOPORT^(0+128)+25)
  8310                           
  8311                           ;main.c: 288: IOPORT.io[2].last_status = ~IOPORT.io[2].status;
  8312  0B7D  0926               	comf	(_IOPORT^(0+128)+6),w
  8313  0B7E  1283               	bcf	3,5	;RP0=0, select bank0
  8314  0B7F  1303               	bcf	3,6	;RP1=0, select bank0
  8315  0B80  00A1               	movwf	??_LoadStatus
  8316  0B81  0821               	movf	??_LoadStatus,w
  8317  0B82  1683               	bsf	3,5	;RP0=1, select bank1
  8318  0B83  1303               	bcf	3,6	;RP1=0, select bank1
  8319  0B84  00A7               	movwf	(_IOPORT^(0+128)+7)
  8320                           
  8321                           ;main.c: 289: IOPORT.io[3].last_status = ~IOPORT.io[3].status;
  8322  0B85  0929               	comf	(_IOPORT^(0+128)+9),w
  8323  0B86  1283               	bcf	3,5	;RP0=0, select bank0
  8324  0B87  1303               	bcf	3,6	;RP1=0, select bank0
  8325  0B88  00A1               	movwf	??_LoadStatus
  8326  0B89  0821               	movf	??_LoadStatus,w
  8327  0B8A  1683               	bsf	3,5	;RP0=1, select bank1
  8328  0B8B  1303               	bcf	3,6	;RP1=0, select bank1
  8329  0B8C  00AA               	movwf	(_IOPORT^(0+128)+10)
  8330  0B8D  0008               	return
  8331  0B8E                     __end_of_LoadStatus:	
  8332                           
  8333                           	psect	text28
  8334  0B8E                     __ptext28:	
  8335 ;; *************** function _LoadConfig *****************
  8336 ;; Defined at:
  8337 ;;		line 126 in file "main.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;		None
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, status,2, pclath, cstack
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8351 ;;      Params:         0       0       0       0       0
  8352 ;;      Locals:         0       0       0       0       0
  8353 ;;      Temps:          0       1       0       0       0
  8354 ;;      Totals:         0       1       0       0       0
  8355 ;;Total ram usage:        1 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    4
  8358 ;; This function calls:
  8359 ;;		_iEEgetc
  8360 ;; This function is called by:
  8361 ;;		_main
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _LoadConfig
  8367  0B8E                     _LoadConfig:	
  8368                           
  8369                           ;main.c: 129: if(iEEgetc(0) != 0x5A)
  8370                           
  8371                           ;incstack = 0
  8372                           ; Regs used in _LoadConfig: [wreg+status,2+pclath+cstack]
  8373  0B8E  3000               	movlw	0
  8374  0B8F  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8375  0B94  3A5A               	xorlw	90
  8376  0B95  1903               	skipnz
  8377  0B96  2C18               	goto	l4209
  8378                           
  8379                           ;main.c: 130: {
  8380                           ;main.c: 132: IOPORTCONF.hw_address = 0xFE;;
  8381  0B97  30FE               	movlw	254
  8382  0B98  1283               	bcf	3,5	;RP0=0, select bank0
  8383  0B99  1303               	bcf	3,6	;RP1=0, select bank0
  8384  0B9A  00A1               	movwf	??_LoadConfig
  8385  0B9B  0821               	movf	??_LoadConfig,w
  8386  0B9C  1683               	bsf	3,5	;RP0=1, select bank3
  8387  0B9D  1703               	bsf	3,6	;RP1=1, select bank3
  8388  0B9E  0090               	movwf	_IOPORTCONF^(0+384)
  8389                           
  8390                           ;main.c: 133: IOPORTCONF.io[0].mascara_seguidor = 0x00;
  8391  0B9F  0191               	clrf	(_IOPORTCONF^(0+384)+1)
  8392                           
  8393                           ;main.c: 134: IOPORTCONF.io[0].mascara_notif = 0xff;
  8394  0BA0  30FF               	movlw	255
  8395  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  8396  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  8397  0BA3  00A1               	movwf	??_LoadConfig
  8398  0BA4  0821               	movf	??_LoadConfig,w
  8399  0BA5  1683               	bsf	3,5	;RP0=1, select bank3
  8400  0BA6  1703               	bsf	3,6	;RP1=1, select bank3
  8401  0BA7  0092               	movwf	(_IOPORTCONF^(0+384)+2)
  8402                           
  8403                           ;main.c: 135: IOPORTCONF.io[1].mascara_seguidor = 0x00;
  8404  0BA8  0193               	clrf	(_IOPORTCONF^(0+384)+3)
  8405                           
  8406                           ;main.c: 136: IOPORTCONF.io[1].mascara_notif = 0xff;
  8407  0BA9  30FF               	movlw	255
  8408  0BAA  1283               	bcf	3,5	;RP0=0, select bank0
  8409  0BAB  1303               	bcf	3,6	;RP1=0, select bank0
  8410  0BAC  00A1               	movwf	??_LoadConfig
  8411  0BAD  0821               	movf	??_LoadConfig,w
  8412  0BAE  1683               	bsf	3,5	;RP0=1, select bank3
  8413  0BAF  1703               	bsf	3,6	;RP1=1, select bank3
  8414  0BB0  0094               	movwf	(_IOPORTCONF^(0+384)+4)
  8415                           
  8416                           ;main.c: 137: IOPORTCONF.io[2].mascara_notif = 0xff;
  8417  0BB1  30FF               	movlw	255
  8418  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  8419  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  8420  0BB4  00A1               	movwf	??_LoadConfig
  8421  0BB5  0821               	movf	??_LoadConfig,w
  8422  0BB6  1683               	bsf	3,5	;RP0=1, select bank3
  8423  0BB7  1703               	bsf	3,6	;RP1=1, select bank3
  8424  0BB8  0096               	movwf	(_IOPORTCONF^(0+384)+6)
  8425                           
  8426                           ;main.c: 138: IOPORTCONF.io[3].mascara_notif = 0xff;
  8427  0BB9  30FF               	movlw	255
  8428  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
  8429  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
  8430  0BBC  00A1               	movwf	??_LoadConfig
  8431  0BBD  0821               	movf	??_LoadConfig,w
  8432  0BBE  1683               	bsf	3,5	;RP0=1, select bank3
  8433  0BBF  1703               	bsf	3,6	;RP1=1, select bank3
  8434  0BC0  0098               	movwf	(_IOPORTCONF^(0+384)+8)
  8435                           
  8436                           ;main.c: 139: IOPORTCONF.analog[0].maxh = 0x03;
  8437  0BC1  3003               	movlw	3
  8438  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  8439  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  8440  0BC4  00A1               	movwf	??_LoadConfig
  8441  0BC5  0821               	movf	??_LoadConfig,w
  8442  0BC6  1683               	bsf	3,5	;RP0=1, select bank3
  8443  0BC7  1703               	bsf	3,6	;RP1=1, select bank3
  8444  0BC8  0099               	movwf	(_IOPORTCONF^(0+384)+9)
  8445                           
  8446                           ;main.c: 140: IOPORTCONF.analog[0].maxl = 0xFF;
  8447  0BC9  30FF               	movlw	255
  8448  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
  8449  0BCB  1303               	bcf	3,6	;RP1=0, select bank0
  8450  0BCC  00A1               	movwf	??_LoadConfig
  8451  0BCD  0821               	movf	??_LoadConfig,w
  8452  0BCE  1683               	bsf	3,5	;RP0=1, select bank3
  8453  0BCF  1703               	bsf	3,6	;RP1=1, select bank3
  8454  0BD0  009A               	movwf	(_IOPORTCONF^(0+384)+10)
  8455                           
  8456                           ;main.c: 141: IOPORTCONF.analog[0].minh = 0x00;
  8457  0BD1  019B               	clrf	(_IOPORTCONF^(0+384)+11)
  8458                           
  8459                           ;main.c: 142: IOPORTCONF.analog[0].minl = 0x00;
  8460  0BD2  019C               	clrf	(_IOPORTCONF^(0+384)+12)
  8461                           
  8462                           ;main.c: 143: IOPORTCONF.analog[1].maxh = 0x03;
  8463  0BD3  3003               	movlw	3
  8464  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
  8465  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
  8466  0BD6  00A1               	movwf	??_LoadConfig
  8467  0BD7  0821               	movf	??_LoadConfig,w
  8468  0BD8  1683               	bsf	3,5	;RP0=1, select bank3
  8469  0BD9  1703               	bsf	3,6	;RP1=1, select bank3
  8470  0BDA  009D               	movwf	(_IOPORTCONF^(0+384)+13)
  8471                           
  8472                           ;main.c: 144: IOPORTCONF.analog[1].maxl = 0xFF;
  8473  0BDB  30FF               	movlw	255
  8474  0BDC  1283               	bcf	3,5	;RP0=0, select bank0
  8475  0BDD  1303               	bcf	3,6	;RP1=0, select bank0
  8476  0BDE  00A1               	movwf	??_LoadConfig
  8477  0BDF  0821               	movf	??_LoadConfig,w
  8478  0BE0  1683               	bsf	3,5	;RP0=1, select bank3
  8479  0BE1  1703               	bsf	3,6	;RP1=1, select bank3
  8480  0BE2  009E               	movwf	(_IOPORTCONF^(0+384)+14)
  8481                           
  8482                           ;main.c: 145: IOPORTCONF.analog[1].minh = 0x00;
  8483  0BE3  019F               	clrf	(_IOPORTCONF^(0+384)+15)
  8484                           
  8485                           ;main.c: 146: IOPORTCONF.analog[1].minl = 0x00;
  8486  0BE4  01A0               	clrf	(_IOPORTCONF^(0+384)+16)
  8487                           
  8488                           ;main.c: 147: IOPORTCONF.analog[2].maxh = 0x03;
  8489  0BE5  3003               	movlw	3
  8490  0BE6  1283               	bcf	3,5	;RP0=0, select bank0
  8491  0BE7  1303               	bcf	3,6	;RP1=0, select bank0
  8492  0BE8  00A1               	movwf	??_LoadConfig
  8493  0BE9  0821               	movf	??_LoadConfig,w
  8494  0BEA  1683               	bsf	3,5	;RP0=1, select bank3
  8495  0BEB  1703               	bsf	3,6	;RP1=1, select bank3
  8496  0BEC  00A1               	movwf	(_IOPORTCONF^(0+384)+17)
  8497                           
  8498                           ;main.c: 148: IOPORTCONF.analog[2].maxl = 0xFF;
  8499  0BED  30FF               	movlw	255
  8500  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  8501  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  8502  0BF0  00A1               	movwf	??_LoadConfig
  8503  0BF1  0821               	movf	??_LoadConfig,w
  8504  0BF2  1683               	bsf	3,5	;RP0=1, select bank3
  8505  0BF3  1703               	bsf	3,6	;RP1=1, select bank3
  8506  0BF4  00A2               	movwf	(_IOPORTCONF^(0+384)+18)
  8507                           
  8508                           ;main.c: 149: IOPORTCONF.analog[2].minh = 0x00;
  8509  0BF5  01A3               	clrf	(_IOPORTCONF^(0+384)+19)
  8510                           
  8511                           ;main.c: 150: IOPORTCONF.analog[2].minl = 0x00;
  8512  0BF6  01A4               	clrf	(_IOPORTCONF^(0+384)+20)
  8513                           
  8514                           ;main.c: 151: IOPORTCONF.analog[3].maxh = 0x03;
  8515  0BF7  3003               	movlw	3
  8516  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  8517  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  8518  0BFA  00A1               	movwf	??_LoadConfig
  8519  0BFB  0821               	movf	??_LoadConfig,w
  8520  0BFC  1683               	bsf	3,5	;RP0=1, select bank3
  8521  0BFD  1703               	bsf	3,6	;RP1=1, select bank3
  8522  0BFE  00A5               	movwf	(_IOPORTCONF^(0+384)+21)
  8523                           
  8524                           ;main.c: 152: IOPORTCONF.analog[3].maxl = 0xFF;
  8525  0BFF  30FF               	movlw	255
  8526  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  8527  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  8528  0C02  00A1               	movwf	??_LoadConfig
  8529  0C03  0821               	movf	??_LoadConfig,w
  8530  0C04  1683               	bsf	3,5	;RP0=1, select bank3
  8531  0C05  1703               	bsf	3,6	;RP1=1, select bank3
  8532  0C06  00A6               	movwf	(_IOPORTCONF^(0+384)+22)
  8533                           
  8534                           ;main.c: 153: IOPORTCONF.analog[3].minh = 0x00;
  8535  0C07  01A7               	clrf	(_IOPORTCONF^(0+384)+23)
  8536                           
  8537                           ;main.c: 154: IOPORTCONF.analog[3].minl = 0x00;
  8538  0C08  01A8               	clrf	(_IOPORTCONF^(0+384)+24)
  8539                           
  8540                           ;main.c: 155: IOPORTCONF.mascara_seguidor_an = 0x00;
  8541  0C09  01A9               	clrf	(_IOPORTCONF^(0+384)+25)
  8542                           
  8543                           ;main.c: 156: IOPORTCONF.mascara_notif_an = 0x00;
  8544  0C0A  01AA               	clrf	(_IOPORTCONF^(0+384)+26)
  8545                           
  8546                           ;main.c: 157: IOPORTCONF.baud_rate = 0x17;;
  8547  0C0B  3017               	movlw	23
  8548  0C0C  1283               	bcf	3,5	;RP0=0, select bank0
  8549  0C0D  1303               	bcf	3,6	;RP1=0, select bank0
  8550  0C0E  00A1               	movwf	??_LoadConfig
  8551  0C0F  0821               	movf	??_LoadConfig,w
  8552  0C10  1683               	bsf	3,5	;RP0=1, select bank3
  8553  0C11  1703               	bsf	3,6	;RP1=1, select bank3
  8554  0C12  00AB               	movwf	(_IOPORTCONF^(0+384)+27)
  8555                           
  8556                           ;main.c: 158: SaveConfigTimer = 1;
  8557  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  8558  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  8559  0C15  01D8               	clrf	_SaveConfigTimer
  8560  0C16  0AD8               	incf	_SaveConfigTimer,f
  8561                           
  8562                           ;main.c: 159: }
  8563  0C17  0008               	return
  8564  0C18                     l4209:	
  8565                           
  8566                           ;main.c: 160: else
  8567                           ;main.c: 161: {
  8568                           ;main.c: 163: IOPORTCONF.hw_address = iEEgetc(1);
  8569  0C18  3001               	movlw	1
  8570  0C19  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8571  0C1E  1283               	bcf	3,5	;RP0=0, select bank0
  8572  0C1F  1303               	bcf	3,6	;RP1=0, select bank0
  8573  0C20  00A1               	movwf	??_LoadConfig
  8574  0C21  0821               	movf	??_LoadConfig,w
  8575  0C22  1683               	bsf	3,5	;RP0=1, select bank3
  8576  0C23  1703               	bsf	3,6	;RP1=1, select bank3
  8577  0C24  0090               	movwf	_IOPORTCONF^(0+384)
  8578                           
  8579                           ;main.c: 164: IOPORTCONF.io[0].mascara_seguidor = iEEgetc(2);
  8580  0C25  3002               	movlw	2
  8581  0C26  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8582  0C2B  1283               	bcf	3,5	;RP0=0, select bank0
  8583  0C2C  1303               	bcf	3,6	;RP1=0, select bank0
  8584  0C2D  00A1               	movwf	??_LoadConfig
  8585  0C2E  0821               	movf	??_LoadConfig,w
  8586  0C2F  1683               	bsf	3,5	;RP0=1, select bank3
  8587  0C30  1703               	bsf	3,6	;RP1=1, select bank3
  8588  0C31  0091               	movwf	(_IOPORTCONF^(0+384)+1)
  8589                           
  8590                           ;main.c: 165: IOPORTCONF.io[0].mascara_notif = iEEgetc(3);
  8591  0C32  3003               	movlw	3
  8592  0C33  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8593  0C38  1283               	bcf	3,5	;RP0=0, select bank0
  8594  0C39  1303               	bcf	3,6	;RP1=0, select bank0
  8595  0C3A  00A1               	movwf	??_LoadConfig
  8596  0C3B  0821               	movf	??_LoadConfig,w
  8597  0C3C  1683               	bsf	3,5	;RP0=1, select bank3
  8598  0C3D  1703               	bsf	3,6	;RP1=1, select bank3
  8599  0C3E  0092               	movwf	(_IOPORTCONF^(0+384)+2)
  8600                           
  8601                           ;main.c: 166: IOPORTCONF.io[1].mascara_seguidor = iEEgetc(4);
  8602  0C3F  3004               	movlw	4
  8603  0C40  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8604  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  8605  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  8606  0C47  00A1               	movwf	??_LoadConfig
  8607  0C48  0821               	movf	??_LoadConfig,w
  8608  0C49  1683               	bsf	3,5	;RP0=1, select bank3
  8609  0C4A  1703               	bsf	3,6	;RP1=1, select bank3
  8610  0C4B  0093               	movwf	(_IOPORTCONF^(0+384)+3)
  8611                           
  8612                           ;main.c: 167: IOPORTCONF.io[1].mascara_notif = iEEgetc(5);
  8613  0C4C  3005               	movlw	5
  8614  0C4D  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8615  0C52  1283               	bcf	3,5	;RP0=0, select bank0
  8616  0C53  1303               	bcf	3,6	;RP1=0, select bank0
  8617  0C54  00A1               	movwf	??_LoadConfig
  8618  0C55  0821               	movf	??_LoadConfig,w
  8619  0C56  1683               	bsf	3,5	;RP0=1, select bank3
  8620  0C57  1703               	bsf	3,6	;RP1=1, select bank3
  8621  0C58  0094               	movwf	(_IOPORTCONF^(0+384)+4)
  8622                           
  8623                           ;main.c: 168: IOPORTCONF.io[2].mascara_notif = iEEgetc(6);
  8624  0C59  3006               	movlw	6
  8625  0C5A  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8626  0C5F  1283               	bcf	3,5	;RP0=0, select bank0
  8627  0C60  1303               	bcf	3,6	;RP1=0, select bank0
  8628  0C61  00A1               	movwf	??_LoadConfig
  8629  0C62  0821               	movf	??_LoadConfig,w
  8630  0C63  1683               	bsf	3,5	;RP0=1, select bank3
  8631  0C64  1703               	bsf	3,6	;RP1=1, select bank3
  8632  0C65  0096               	movwf	(_IOPORTCONF^(0+384)+6)
  8633                           
  8634                           ;main.c: 169: IOPORTCONF.io[3].mascara_notif = iEEgetc(7);
  8635  0C66  3007               	movlw	7
  8636  0C67  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8637  0C6C  1283               	bcf	3,5	;RP0=0, select bank0
  8638  0C6D  1303               	bcf	3,6	;RP1=0, select bank0
  8639  0C6E  00A1               	movwf	??_LoadConfig
  8640  0C6F  0821               	movf	??_LoadConfig,w
  8641  0C70  1683               	bsf	3,5	;RP0=1, select bank3
  8642  0C71  1703               	bsf	3,6	;RP1=1, select bank3
  8643  0C72  0098               	movwf	(_IOPORTCONF^(0+384)+8)
  8644                           
  8645                           ;main.c: 170: IOPORTCONF.analog[0].maxh = iEEgetc(8);
  8646  0C73  3008               	movlw	8
  8647  0C74  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8648  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  8649  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  8650  0C7B  00A1               	movwf	??_LoadConfig
  8651  0C7C  0821               	movf	??_LoadConfig,w
  8652  0C7D  1683               	bsf	3,5	;RP0=1, select bank3
  8653  0C7E  1703               	bsf	3,6	;RP1=1, select bank3
  8654  0C7F  0099               	movwf	(_IOPORTCONF^(0+384)+9)
  8655                           
  8656                           ;main.c: 171: IOPORTCONF.analog[0].maxl = iEEgetc(9);
  8657  0C80  3009               	movlw	9
  8658  0C81  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8659  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  8660  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  8661  0C88  00A1               	movwf	??_LoadConfig
  8662  0C89  0821               	movf	??_LoadConfig,w
  8663  0C8A  1683               	bsf	3,5	;RP0=1, select bank3
  8664  0C8B  1703               	bsf	3,6	;RP1=1, select bank3
  8665  0C8C  009A               	movwf	(_IOPORTCONF^(0+384)+10)
  8666                           
  8667                           ;main.c: 172: IOPORTCONF.analog[0].minh = iEEgetc(10);
  8668  0C8D  300A               	movlw	10
  8669  0C8E  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8670  0C93  1283               	bcf	3,5	;RP0=0, select bank0
  8671  0C94  1303               	bcf	3,6	;RP1=0, select bank0
  8672  0C95  00A1               	movwf	??_LoadConfig
  8673  0C96  0821               	movf	??_LoadConfig,w
  8674  0C97  1683               	bsf	3,5	;RP0=1, select bank3
  8675  0C98  1703               	bsf	3,6	;RP1=1, select bank3
  8676  0C99  009B               	movwf	(_IOPORTCONF^(0+384)+11)
  8677                           
  8678                           ;main.c: 173: IOPORTCONF.analog[0].minl = iEEgetc(11);
  8679  0C9A  300B               	movlw	11
  8680  0C9B  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8681  0CA0  1283               	bcf	3,5	;RP0=0, select bank0
  8682  0CA1  1303               	bcf	3,6	;RP1=0, select bank0
  8683  0CA2  00A1               	movwf	??_LoadConfig
  8684  0CA3  0821               	movf	??_LoadConfig,w
  8685  0CA4  1683               	bsf	3,5	;RP0=1, select bank3
  8686  0CA5  1703               	bsf	3,6	;RP1=1, select bank3
  8687  0CA6  009C               	movwf	(_IOPORTCONF^(0+384)+12)
  8688                           
  8689                           ;main.c: 174: IOPORTCONF.analog[1].maxh = iEEgetc(12);
  8690  0CA7  300C               	movlw	12
  8691  0CA8  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8692  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  8693  0CAE  1303               	bcf	3,6	;RP1=0, select bank0
  8694  0CAF  00A1               	movwf	??_LoadConfig
  8695  0CB0  0821               	movf	??_LoadConfig,w
  8696  0CB1  1683               	bsf	3,5	;RP0=1, select bank3
  8697  0CB2  1703               	bsf	3,6	;RP1=1, select bank3
  8698  0CB3  009D               	movwf	(_IOPORTCONF^(0+384)+13)
  8699                           
  8700                           ;main.c: 175: IOPORTCONF.analog[1].maxl = iEEgetc(13);
  8701  0CB4  300D               	movlw	13
  8702  0CB5  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8703  0CBA  1283               	bcf	3,5	;RP0=0, select bank0
  8704  0CBB  1303               	bcf	3,6	;RP1=0, select bank0
  8705  0CBC  00A1               	movwf	??_LoadConfig
  8706  0CBD  0821               	movf	??_LoadConfig,w
  8707  0CBE  1683               	bsf	3,5	;RP0=1, select bank3
  8708  0CBF  1703               	bsf	3,6	;RP1=1, select bank3
  8709  0CC0  009E               	movwf	(_IOPORTCONF^(0+384)+14)
  8710                           
  8711                           ;main.c: 176: IOPORTCONF.analog[1].minh = iEEgetc(14);
  8712  0CC1  300E               	movlw	14
  8713  0CC2  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8714  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  8715  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  8716  0CC9  00A1               	movwf	??_LoadConfig
  8717  0CCA  0821               	movf	??_LoadConfig,w
  8718  0CCB  1683               	bsf	3,5	;RP0=1, select bank3
  8719  0CCC  1703               	bsf	3,6	;RP1=1, select bank3
  8720  0CCD  009F               	movwf	(_IOPORTCONF^(0+384)+15)
  8721                           
  8722                           ;main.c: 177: IOPORTCONF.analog[1].minl = iEEgetc(15);
  8723  0CCE  300F               	movlw	15
  8724  0CCF  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8725  0CD4  1283               	bcf	3,5	;RP0=0, select bank0
  8726  0CD5  1303               	bcf	3,6	;RP1=0, select bank0
  8727  0CD6  00A1               	movwf	??_LoadConfig
  8728  0CD7  0821               	movf	??_LoadConfig,w
  8729  0CD8  1683               	bsf	3,5	;RP0=1, select bank3
  8730  0CD9  1703               	bsf	3,6	;RP1=1, select bank3
  8731  0CDA  00A0               	movwf	(_IOPORTCONF^(0+384)+16)
  8732                           
  8733                           ;main.c: 178: IOPORTCONF.analog[2].maxh = iEEgetc(16);
  8734  0CDB  3010               	movlw	16
  8735  0CDC  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8736  0CE1  1283               	bcf	3,5	;RP0=0, select bank0
  8737  0CE2  1303               	bcf	3,6	;RP1=0, select bank0
  8738  0CE3  00A1               	movwf	??_LoadConfig
  8739  0CE4  0821               	movf	??_LoadConfig,w
  8740  0CE5  1683               	bsf	3,5	;RP0=1, select bank3
  8741  0CE6  1703               	bsf	3,6	;RP1=1, select bank3
  8742  0CE7  00A1               	movwf	(_IOPORTCONF^(0+384)+17)
  8743                           
  8744                           ;main.c: 179: IOPORTCONF.analog[2].maxl = iEEgetc(17);
  8745  0CE8  3011               	movlw	17
  8746  0CE9  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8747  0CEE  1283               	bcf	3,5	;RP0=0, select bank0
  8748  0CEF  1303               	bcf	3,6	;RP1=0, select bank0
  8749  0CF0  00A1               	movwf	??_LoadConfig
  8750  0CF1  0821               	movf	??_LoadConfig,w
  8751  0CF2  1683               	bsf	3,5	;RP0=1, select bank3
  8752  0CF3  1703               	bsf	3,6	;RP1=1, select bank3
  8753  0CF4  00A2               	movwf	(_IOPORTCONF^(0+384)+18)
  8754                           
  8755                           ;main.c: 180: IOPORTCONF.analog[2].minh = iEEgetc(18);
  8756  0CF5  3012               	movlw	18
  8757  0CF6  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8758  0CFB  1283               	bcf	3,5	;RP0=0, select bank0
  8759  0CFC  1303               	bcf	3,6	;RP1=0, select bank0
  8760  0CFD  00A1               	movwf	??_LoadConfig
  8761  0CFE  0821               	movf	??_LoadConfig,w
  8762  0CFF  1683               	bsf	3,5	;RP0=1, select bank3
  8763  0D00  1703               	bsf	3,6	;RP1=1, select bank3
  8764  0D01  00A3               	movwf	(_IOPORTCONF^(0+384)+19)
  8765                           
  8766                           ;main.c: 181: IOPORTCONF.analog[2].minl = iEEgetc(19);
  8767  0D02  3013               	movlw	19
  8768  0D03  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8769  0D08  1283               	bcf	3,5	;RP0=0, select bank0
  8770  0D09  1303               	bcf	3,6	;RP1=0, select bank0
  8771  0D0A  00A1               	movwf	??_LoadConfig
  8772  0D0B  0821               	movf	??_LoadConfig,w
  8773  0D0C  1683               	bsf	3,5	;RP0=1, select bank3
  8774  0D0D  1703               	bsf	3,6	;RP1=1, select bank3
  8775  0D0E  00A4               	movwf	(_IOPORTCONF^(0+384)+20)
  8776                           
  8777                           ;main.c: 182: IOPORTCONF.analog[3].maxh = iEEgetc(20);
  8778  0D0F  3014               	movlw	20
  8779  0D10  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8780  0D15  1283               	bcf	3,5	;RP0=0, select bank0
  8781  0D16  1303               	bcf	3,6	;RP1=0, select bank0
  8782  0D17  00A1               	movwf	??_LoadConfig
  8783  0D18  0821               	movf	??_LoadConfig,w
  8784  0D19  1683               	bsf	3,5	;RP0=1, select bank3
  8785  0D1A  1703               	bsf	3,6	;RP1=1, select bank3
  8786  0D1B  00A5               	movwf	(_IOPORTCONF^(0+384)+21)
  8787                           
  8788                           ;main.c: 183: IOPORTCONF.analog[3].maxl = iEEgetc(21);
  8789  0D1C  3015               	movlw	21
  8790  0D1D  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8791  0D22  1283               	bcf	3,5	;RP0=0, select bank0
  8792  0D23  1303               	bcf	3,6	;RP1=0, select bank0
  8793  0D24  00A1               	movwf	??_LoadConfig
  8794  0D25  0821               	movf	??_LoadConfig,w
  8795  0D26  1683               	bsf	3,5	;RP0=1, select bank3
  8796  0D27  1703               	bsf	3,6	;RP1=1, select bank3
  8797  0D28  00A6               	movwf	(_IOPORTCONF^(0+384)+22)
  8798                           
  8799                           ;main.c: 184: IOPORTCONF.analog[3].minh = iEEgetc(22);
  8800  0D29  3016               	movlw	22
  8801  0D2A  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8802  0D2F  1283               	bcf	3,5	;RP0=0, select bank0
  8803  0D30  1303               	bcf	3,6	;RP1=0, select bank0
  8804  0D31  00A1               	movwf	??_LoadConfig
  8805  0D32  0821               	movf	??_LoadConfig,w
  8806  0D33  1683               	bsf	3,5	;RP0=1, select bank3
  8807  0D34  1703               	bsf	3,6	;RP1=1, select bank3
  8808  0D35  00A7               	movwf	(_IOPORTCONF^(0+384)+23)
  8809                           
  8810                           ;main.c: 185: IOPORTCONF.analog[3].minl = iEEgetc(23);
  8811  0D36  3017               	movlw	23
  8812  0D37  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8813  0D3C  1283               	bcf	3,5	;RP0=0, select bank0
  8814  0D3D  1303               	bcf	3,6	;RP1=0, select bank0
  8815  0D3E  00A1               	movwf	??_LoadConfig
  8816  0D3F  0821               	movf	??_LoadConfig,w
  8817  0D40  1683               	bsf	3,5	;RP0=1, select bank3
  8818  0D41  1703               	bsf	3,6	;RP1=1, select bank3
  8819  0D42  00A8               	movwf	(_IOPORTCONF^(0+384)+24)
  8820                           
  8821                           ;main.c: 186: IOPORTCONF.mascara_seguidor_an = iEEgetc(24);
  8822  0D43  3018               	movlw	24
  8823  0D44  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8824  0D49  1283               	bcf	3,5	;RP0=0, select bank0
  8825  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
  8826  0D4B  00A1               	movwf	??_LoadConfig
  8827  0D4C  0821               	movf	??_LoadConfig,w
  8828  0D4D  1683               	bsf	3,5	;RP0=1, select bank3
  8829  0D4E  1703               	bsf	3,6	;RP1=1, select bank3
  8830  0D4F  00A9               	movwf	(_IOPORTCONF^(0+384)+25)
  8831                           
  8832                           ;main.c: 187: IOPORTCONF.mascara_notif_an = iEEgetc(25);
  8833  0D50  3019               	movlw	25
  8834  0D51  160A  158A  24BF  120A  158A  	fcall	_iEEgetc
  8835  0D56  1283               	bcf	3,5	;RP0=0, select bank0
  8836  0D57  1303               	bcf	3,6	;RP1=0, select bank0
  8837  0D58  00A1               	movwf	??_LoadConfig
  8838  0D59  0821               	movf	??_LoadConfig,w
  8839  0D5A  1683               	bsf	3,5	;RP0=1, select bank3
  8840  0D5B  1703               	bsf	3,6	;RP1=1, select bank3
  8841  0D5C  00AA               	movwf	(_IOPORTCONF^(0+384)+26)
  8842                           
  8843                           ;main.c: 188: IOPORTCONF.baud_rate = iEEgetc(26);
  8844  0D5D  301A               	movlw	26
  8845  0D5E  160A  158A  24BF   	fcall	_iEEgetc
  8846  0D61  1283               	bcf	3,5	;RP0=0, select bank0
  8847  0D62  1303               	bcf	3,6	;RP1=0, select bank0
  8848  0D63  00A1               	movwf	??_LoadConfig
  8849  0D64  0821               	movf	??_LoadConfig,w
  8850  0D65  1683               	bsf	3,5	;RP0=1, select bank3
  8851  0D66  1703               	bsf	3,6	;RP1=1, select bank3
  8852  0D67  00AB               	movwf	(_IOPORTCONF^(0+384)+27)
  8853  0D68  0008               	return
  8854  0D69                     __end_of_LoadConfig:	
  8855                           
  8856                           	psect	text29
  8857  1CBF                     __ptext29:	
  8858 ;; *************** function _iEEgetc *****************
  8859 ;; Defined at:
  8860 ;;		line 61 in file "iee.c"
  8861 ;; Parameters:    Size  Location     Type
  8862 ;;  address         1    wreg     unsigned char 
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;  address         1    0[BANK0 ] unsigned char 
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      unsigned char 
  8867 ;; Registers used:
  8868 ;;		wreg
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8874 ;;      Params:         0       0       0       0       0
  8875 ;;      Locals:         0       1       0       0       0
  8876 ;;      Temps:          0       0       0       0       0
  8877 ;;      Totals:         0       1       0       0       0
  8878 ;;Total ram usage:        1 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    3
  8881 ;; This function calls:
  8882 ;;		Nothing
  8883 ;; This function is called by:
  8884 ;;		_LoadConfig
  8885 ;;		_LoadStatus
  8886 ;; This function uses a non-reentrant model
  8887 ;;
  8888                           
  8889                           
  8890                           ;psect for function _iEEgetc
  8891  1CBF                     _iEEgetc:	
  8892                           
  8893                           ;incstack = 0
  8894                           ; Regs used in _iEEgetc: [wreg]
  8895                           ;iEEgetc@address stored from wreg
  8896  1CBF  1283               	bcf	3,5	;RP0=0, select bank0
  8897  1CC0  1303               	bcf	3,6	;RP1=0, select bank0
  8898  1CC1  00A0               	movwf	iEEgetc@address
  8899                           
  8900                           ;iee.c: 63: EEADR = address;
  8901  1CC2  0820               	movf	iEEgetc@address,w
  8902  1CC3  1283               	bcf	3,5	;RP0=0, select bank2
  8903  1CC4  1703               	bsf	3,6	;RP1=1, select bank2
  8904  1CC5  008D               	movwf	13	;volatile
  8905                           
  8906                           ;iee.c: 66: EECON1bits.RD = 1;
  8907  1CC6  1683               	bsf	3,5	;RP0=1, select bank3
  8908  1CC7  1703               	bsf	3,6	;RP1=1, select bank3
  8909  1CC8  140C               	bsf	12,0	;volsfr
  8910                           
  8911                           ;iee.c: 67: return EEDATA;
  8912  1CC9  1283               	bcf	3,5	;RP0=0, select bank2
  8913  1CCA  1703               	bsf	3,6	;RP1=1, select bank2
  8914  1CCB  080C               	movf	12,w	;volatile
  8915  1CCC  0008               	return
  8916  1CCD                     __end_of_iEEgetc:	
  8917                           
  8918                           	psect	text30
  8919  148B                     __ptext30:	
  8920 ;; *************** function _LCDInit *****************
  8921 ;; Defined at:
  8922 ;;		line 47 in file "lcd.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;		None
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;		None
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, status,2, status,0, pclath, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8936 ;;      Params:         0       0       0       0       0
  8937 ;;      Locals:         0       0       0       0       0
  8938 ;;      Temps:          0       2       0       0       0
  8939 ;;      Totals:         0       2       0       0       0
  8940 ;;Total ram usage:        2 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    5
  8943 ;; This function calls:
  8944 ;;		_LCDBusInput
  8945 ;;		_LCDBusOutput
  8946 ;;		_LCDSend
  8947 ;; This function is called by:
  8948 ;;		_main
  8949 ;; This function uses a non-reentrant model
  8950 ;;
  8951                           
  8952                           
  8953                           ;psect for function _LCDInit
  8954  148B                     _LCDInit:	
  8955                           
  8956                           ;lcd.c: 49: LCD_Ok = 0;
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  8960  148B  107A               	bcf	_LCD_Ok/(0+8),_LCD_Ok& (0+7)
  8961                           
  8962                           ;lcd.c: 52: LCDBusInput();
  8963  148C  160A  158A  247A  160A  118A  	fcall	_LCDBusInput
  8964                           
  8965                           ;lcd.c: 53: ( TRISB &= ((0b00000001 << 1)^0xff) );
  8966  1491  30FD               	movlw	253
  8967  1492  1283               	bcf	3,5	;RP0=0, select bank0
  8968  1493  1303               	bcf	3,6	;RP1=0, select bank0
  8969  1494  00A6               	movwf	??_LCDInit
  8970  1495  0826               	movf	??_LCDInit,w
  8971  1496  1683               	bsf	3,5	;RP0=1, select bank1
  8972  1497  1303               	bcf	3,6	;RP1=0, select bank1
  8973  1498  0586               	andwf	6,f	;volatile
  8974                           
  8975                           ;lcd.c: 54: ( TRISB &= ((0b00000001 << 3)^0xff) );
  8976  1499  30F7               	movlw	247
  8977  149A  1283               	bcf	3,5	;RP0=0, select bank0
  8978  149B  1303               	bcf	3,6	;RP1=0, select bank0
  8979  149C  00A6               	movwf	??_LCDInit
  8980  149D  0826               	movf	??_LCDInit,w
  8981  149E  1683               	bsf	3,5	;RP0=1, select bank1
  8982  149F  1303               	bcf	3,6	;RP1=0, select bank1
  8983  14A0  0586               	andwf	6,f	;volatile
  8984                           
  8985                           ;lcd.c: 55: ( TRISB &= ((0b00000001 << 2)^0xff) );
  8986  14A1  30FB               	movlw	251
  8987  14A2  1283               	bcf	3,5	;RP0=0, select bank0
  8988  14A3  1303               	bcf	3,6	;RP1=0, select bank0
  8989  14A4  00A6               	movwf	??_LCDInit
  8990  14A5  0826               	movf	??_LCDInit,w
  8991  14A6  1683               	bsf	3,5	;RP0=1, select bank1
  8992  14A7  1303               	bcf	3,6	;RP1=0, select bank1
  8993  14A8  0586               	andwf	6,f	;volatile
  8994                           
  8995                           ;lcd.c: 58: _delay((unsigned long)((50)*(3686400/4000.0)));
  8996  14A9  303C               	movlw	60
  8997  14AA  1283               	bcf	3,5	;RP0=0, select bank0
  8998  14AB  1303               	bcf	3,6	;RP1=0, select bank0
  8999  14AC  00A7               	movwf	??_LCDInit+1
  9000  14AD  30D6               	movlw	214
  9001  14AE  00A6               	movwf	??_LCDInit
  9002  14AF                     u5707:	
  9003  14AF  0BA6               	decfsz	??_LCDInit,f
  9004  14B0  2CAF               	goto	u5707
  9005  14B1  0BA7               	decfsz	??_LCDInit+1,f
  9006  14B2  2CAF               	goto	u5707
  9007  14B3  0000               	nop
  9008                           
  9009                           ;lcd.c: 59: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9010  14B4  30FD               	movlw	253
  9011  14B5  1283               	bcf	3,5	;RP0=0, select bank0
  9012  14B6  1303               	bcf	3,6	;RP1=0, select bank0
  9013  14B7  00A6               	movwf	??_LCDInit
  9014  14B8  0826               	movf	??_LCDInit,w
  9015  14B9  0586               	andwf	6,f	;volatile
  9016                           
  9017                           ;lcd.c: 60: ( PORTB &= ((0b00000001 << 2)^0xff) );
  9018  14BA  30FB               	movlw	251
  9019  14BB  00A6               	movwf	??_LCDInit
  9020  14BC  0826               	movf	??_LCDInit,w
  9021  14BD  0586               	andwf	6,f	;volatile
  9022                           
  9023                           ;lcd.c: 61: ( PORTB &= ((0b00000001 << 3)^0xff) );
  9024  14BE  30F7               	movlw	247
  9025  14BF  00A6               	movwf	??_LCDInit
  9026  14C0  0826               	movf	??_LCDInit,w
  9027  14C1  0586               	andwf	6,f	;volatile
  9028                           
  9029                           ;lcd.c: 63: LCDBusOutput();
  9030  14C2  160A  158A  2483  160A  118A  	fcall	_LCDBusOutput
  9031                           
  9032                           ;lcd.c: 65: ( PORTD &= ((0b00000001 << 7)^0xff) );
  9033  14C7  307F               	movlw	127
  9034  14C8  1283               	bcf	3,5	;RP0=0, select bank0
  9035  14C9  1303               	bcf	3,6	;RP1=0, select bank0
  9036  14CA  00A6               	movwf	??_LCDInit
  9037  14CB  0826               	movf	??_LCDInit,w
  9038  14CC  0588               	andwf	8,f	;volatile
  9039                           
  9040                           ;lcd.c: 66: ( PORTD &= ((0b00000001 << 6)^0xff) );
  9041  14CD  30BF               	movlw	191
  9042  14CE  00A6               	movwf	??_LCDInit
  9043  14CF  0826               	movf	??_LCDInit,w
  9044  14D0  0588               	andwf	8,f	;volatile
  9045                           
  9046                           ;lcd.c: 67: ( PORTD |= (0b00000001 << 5) );
  9047  14D1  1688               	bsf	8,5	;volatile
  9048                           
  9049                           ;lcd.c: 68: ( PORTD |= (0b00000001 << 4) );
  9050  14D2  1608               	bsf	8,4	;volatile
  9051                           
  9052                           ;lcd.c: 79: ( PORTB |= (0b00000001 << 1) );
  9053  14D3  1486               	bsf	6,1	;volatile
  9054                           
  9055                           ;lcd.c: 80: __nop(); __nop(); __nop();
  9056  14D4  0000               	nop
  9057  14D5  0000               	nop
  9058  14D6  0000               	nop
  9059                           
  9060                           ;lcd.c: 81: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9061  14D7  30FD               	movlw	253
  9062  14D8  1283               	bcf	3,5	;RP0=0, select bank0
  9063  14D9  1303               	bcf	3,6	;RP1=0, select bank0
  9064  14DA  00A6               	movwf	??_LCDInit
  9065  14DB  0826               	movf	??_LCDInit,w
  9066  14DC  0586               	andwf	6,f	;volatile
  9067                           
  9068                           ;lcd.c: 82: _delay((unsigned long)((5)*(3686400/4000.0)));
  9069  14DD  3006               	movlw	6
  9070  14DE  1283               	bcf	3,5	;RP0=0, select bank0
  9071  14DF  1303               	bcf	3,6	;RP1=0, select bank0
  9072  14E0  00A7               	movwf	??_LCDInit+1
  9073  14E1  30FA               	movlw	250
  9074  14E2  00A6               	movwf	??_LCDInit
  9075  14E3                     u5717:	
  9076  14E3  0BA6               	decfsz	??_LCDInit,f
  9077  14E4  2CE3               	goto	u5717
  9078  14E5  0BA7               	decfsz	??_LCDInit+1,f
  9079  14E6  2CE3               	goto	u5717
  9080  14E7  0000               	nop
  9081                           
  9082                           ;lcd.c: 83: RB1 = 1;
  9083  14E8  1283               	bcf	3,5	;RP0=0, select bank0
  9084  14E9  1303               	bcf	3,6	;RP1=0, select bank0
  9085  14EA  1486               	bsf	6,1	;volatile
  9086                           
  9087                           ;lcd.c: 84: __nop(); __nop(); __nop();
  9088  14EB  0000               	nop
  9089  14EC  0000               	nop
  9090  14ED  0000               	nop
  9091                           
  9092                           ;lcd.c: 85: RB1 = 0;
  9093  14EE  1283               	bcf	3,5	;RP0=0, select bank0
  9094  14EF  1303               	bcf	3,6	;RP1=0, select bank0
  9095  14F0  1086               	bcf	6,1	;volatile
  9096                           
  9097                           ;lcd.c: 86: _delay((unsigned long)((5)*(3686400/4000.0)));
  9098  14F1  3006               	movlw	6
  9099  14F2  1283               	bcf	3,5	;RP0=0, select bank0
  9100  14F3  1303               	bcf	3,6	;RP1=0, select bank0
  9101  14F4  00A7               	movwf	??_LCDInit+1
  9102  14F5  30FA               	movlw	250
  9103  14F6  00A6               	movwf	??_LCDInit
  9104  14F7                     u5727:	
  9105  14F7  0BA6               	decfsz	??_LCDInit,f
  9106  14F8  2CF7               	goto	u5727
  9107  14F9  0BA7               	decfsz	??_LCDInit+1,f
  9108  14FA  2CF7               	goto	u5727
  9109  14FB  0000               	nop
  9110                           
  9111                           ;lcd.c: 87: RB1 = 1;
  9112  14FC  1283               	bcf	3,5	;RP0=0, select bank0
  9113  14FD  1303               	bcf	3,6	;RP1=0, select bank0
  9114  14FE  1486               	bsf	6,1	;volatile
  9115                           
  9116                           ;lcd.c: 88: __nop(); __nop(); __nop();
  9117  14FF  0000               	nop
  9118  1500  0000               	nop
  9119  1501  0000               	nop
  9120                           
  9121                           ;lcd.c: 89: RB1 = 0;
  9122  1502  1283               	bcf	3,5	;RP0=0, select bank0
  9123  1503  1303               	bcf	3,6	;RP1=0, select bank0
  9124  1504  1086               	bcf	6,1	;volatile
  9125                           
  9126                           ;lcd.c: 90: LCDBusOutput();
  9127  1505  160A  158A  2483  160A  118A  	fcall	_LCDBusOutput
  9128                           
  9129                           ;lcd.c: 92: ( PORTD &= ((0b00000001 << 7)^0xff) );
  9130  150A  307F               	movlw	127
  9131  150B  1283               	bcf	3,5	;RP0=0, select bank0
  9132  150C  1303               	bcf	3,6	;RP1=0, select bank0
  9133  150D  00A6               	movwf	??_LCDInit
  9134  150E  0826               	movf	??_LCDInit,w
  9135  150F  0588               	andwf	8,f	;volatile
  9136                           
  9137                           ;lcd.c: 93: ( PORTD &= ((0b00000001 << 6)^0xff) );
  9138  1510  30BF               	movlw	191
  9139  1511  00A6               	movwf	??_LCDInit
  9140  1512  0826               	movf	??_LCDInit,w
  9141  1513  0588               	andwf	8,f	;volatile
  9142                           
  9143                           ;lcd.c: 94: ( PORTD |= (0b00000001 << 5) );
  9144  1514  1688               	bsf	8,5	;volatile
  9145                           
  9146                           ;lcd.c: 95: ( PORTD &= ((0b00000001 << 4)^0xff) );
  9147  1515  30EF               	movlw	239
  9148  1516  00A6               	movwf	??_LCDInit
  9149  1517  0826               	movf	??_LCDInit,w
  9150  1518  0588               	andwf	8,f	;volatile
  9151                           
  9152                           ;lcd.c: 103: _delay((unsigned long)((5)*(3686400/4000.0)));
  9153  1519  3006               	movlw	6
  9154  151A  1283               	bcf	3,5	;RP0=0, select bank0
  9155  151B  1303               	bcf	3,6	;RP1=0, select bank0
  9156  151C  00A7               	movwf	??_LCDInit+1
  9157  151D  30FA               	movlw	250
  9158  151E  00A6               	movwf	??_LCDInit
  9159  151F                     u5737:	
  9160  151F  0BA6               	decfsz	??_LCDInit,f
  9161  1520  2D1F               	goto	u5737
  9162  1521  0BA7               	decfsz	??_LCDInit+1,f
  9163  1522  2D1F               	goto	u5737
  9164  1523  0000               	nop
  9165                           
  9166                           ;lcd.c: 104: ( PORTB |= (0b00000001 << 1) );
  9167  1524  1283               	bcf	3,5	;RP0=0, select bank0
  9168  1525  1303               	bcf	3,6	;RP1=0, select bank0
  9169  1526  1486               	bsf	6,1	;volatile
  9170                           
  9171                           ;lcd.c: 105: __nop(); __nop(); __nop();
  9172  1527  0000               	nop
  9173  1528  0000               	nop
  9174  1529  0000               	nop
  9175                           
  9176                           ;lcd.c: 106: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9177  152A  30FD               	movlw	253
  9178  152B  1283               	bcf	3,5	;RP0=0, select bank0
  9179  152C  1303               	bcf	3,6	;RP1=0, select bank0
  9180  152D  00A6               	movwf	??_LCDInit
  9181  152E  0826               	movf	??_LCDInit,w
  9182  152F  0586               	andwf	6,f	;volatile
  9183                           
  9184                           ;lcd.c: 108: _delay((unsigned long)((5)*(3686400/4000.0)));
  9185  1530  3006               	movlw	6
  9186  1531  1283               	bcf	3,5	;RP0=0, select bank0
  9187  1532  1303               	bcf	3,6	;RP1=0, select bank0
  9188  1533  00A7               	movwf	??_LCDInit+1
  9189  1534  30FA               	movlw	250
  9190  1535  00A6               	movwf	??_LCDInit
  9191  1536                     u5747:	
  9192  1536  0BA6               	decfsz	??_LCDInit,f
  9193  1537  2D36               	goto	u5747
  9194  1538  0BA7               	decfsz	??_LCDInit+1,f
  9195  1539  2D36               	goto	u5747
  9196  153A  0000               	nop
  9197                           
  9198                           ;lcd.c: 111: if(LCDSend( 0b00101100, 1 )) return;
  9199  153B  1283               	bcf	3,5	;RP0=0, select bank0
  9200  153C  1303               	bcf	3,6	;RP1=0, select bank0
  9201  153D  01A1               	clrf	LCDSend@cmd
  9202  153E  0AA1               	incf	LCDSend@cmd,f
  9203  153F  302C               	movlw	44
  9204  1540  160A  118A  21C2  160A  118A  	fcall	_LCDSend
  9205  1545  3A00               	xorlw	0
  9206  1546  1D03               	btfss	3,2
  9207  1547  0008               	return
  9208                           
  9209                           ;lcd.c: 119: if(LCDSend( 0b00000001, 1 )) return;
  9210  1548  1283               	bcf	3,5	;RP0=0, select bank0
  9211  1549  1303               	bcf	3,6	;RP1=0, select bank0
  9212  154A  01A1               	clrf	LCDSend@cmd
  9213  154B  0AA1               	incf	LCDSend@cmd,f
  9214  154C  3001               	movlw	1
  9215  154D  160A  118A  21C2  160A  118A  	fcall	_LCDSend
  9216  1552  3A00               	xorlw	0
  9217  1553  1D03               	btfss	3,2
  9218  1554  0008               	return
  9219                           
  9220                           ;lcd.c: 120: if(LCDSend( 0b00000110, 1 )) return;
  9221  1555  1283               	bcf	3,5	;RP0=0, select bank0
  9222  1556  1303               	bcf	3,6	;RP1=0, select bank0
  9223  1557  01A1               	clrf	LCDSend@cmd
  9224  1558  0AA1               	incf	LCDSend@cmd,f
  9225  1559  3006               	movlw	6
  9226  155A  160A  118A  21C2  160A  118A  	fcall	_LCDSend
  9227  155F  3A00               	xorlw	0
  9228  1560  1D03               	btfss	3,2
  9229  1561  0008               	return
  9230                           
  9231                           ;lcd.c: 121: if(LCDSend( 0b00001100, 1 )) return;
  9232  1562  1283               	bcf	3,5	;RP0=0, select bank0
  9233  1563  1303               	bcf	3,6	;RP1=0, select bank0
  9234  1564  01A1               	clrf	LCDSend@cmd
  9235  1565  0AA1               	incf	LCDSend@cmd,f
  9236  1566  300C               	movlw	12
  9237  1567  160A  118A  21C2  160A  118A  	fcall	_LCDSend
  9238  156C  3A00               	xorlw	0
  9239  156D  1D03               	btfss	3,2
  9240  156E  0008               	return
  9241                           
  9242                           ;lcd.c: 124: if(LCDSend( 0b10000000, 1 )) return;
  9243  156F  1283               	bcf	3,5	;RP0=0, select bank0
  9244  1570  1303               	bcf	3,6	;RP1=0, select bank0
  9245  1571  01A1               	clrf	LCDSend@cmd
  9246  1572  0AA1               	incf	LCDSend@cmd,f
  9247  1573  3080               	movlw	128
  9248  1574  160A  118A  21C2  160A  118A  	fcall	_LCDSend
  9249  1579  3A00               	xorlw	0
  9250  157A  1D03               	btfss	3,2
  9251  157B  0008               	return
  9252                           
  9253                           ;lcd.c: 126: LCD_Ok = 1;
  9254  157C  147A               	bsf	_LCD_Ok/(0+8),_LCD_Ok& (0+7)
  9255  157D  0008               	return
  9256  157E                     __end_of_LCDInit:	
  9257                           
  9258                           	psect	text31
  9259  11C2                     __ptext31:	
  9260 ;; *************** function _LCDSend *****************
  9261 ;; Defined at:
  9262 ;;		line 158 in file "lcd.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  data            1    wreg     unsigned char 
  9265 ;;  cmd             1    1[BANK0 ] unsigned char 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  data            1    4[BANK0 ] unsigned char 
  9268 ;;  aux_byte        1    5[BANK0 ] unsigned char 
  9269 ;; Return value:  Size  Location     Type
  9270 ;;                  1    wreg      unsigned char 
  9271 ;; Registers used:
  9272 ;;		wreg, status,2, status,0, pclath, cstack
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9278 ;;      Params:         0       1       0       0       0
  9279 ;;      Locals:         0       2       0       0       0
  9280 ;;      Temps:          0       2       0       0       0
  9281 ;;      Totals:         0       5       0       0       0
  9282 ;;Total ram usage:        5 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    4
  9285 ;; This function calls:
  9286 ;;		_LCDBusInput
  9287 ;;		_LCDBusOutput
  9288 ;; This function is called by:
  9289 ;;		_LCDInit
  9290 ;;		_LCDMsg
  9291 ;;		_LCDGoto
  9292 ;;		_LCDClear
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _LCDSend
  9298  11C2                     _LCDSend:	
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in _LCDSend: [wreg+status,2+status,0+pclath+cstack]
  9302                           ;LCDSend@data stored from wreg
  9303  11C2  1283               	bcf	3,5	;RP0=0, select bank0
  9304  11C3  1303               	bcf	3,6	;RP1=0, select bank0
  9305  11C4  00A4               	movwf	LCDSend@data
  9306                           
  9307                           ;lcd.c: 160: unsigned char aux_byte;
  9308                           ;lcd.c: 164: LCDBusInput();
  9309  11C5  160A  158A  247A  160A  118A  	fcall	_LCDBusInput
  9310                           
  9311                           ;lcd.c: 165: ( PORTB |= (0b00000001 << 3) );
  9312  11CA  1283               	bcf	3,5	;RP0=0, select bank0
  9313  11CB  1303               	bcf	3,6	;RP1=0, select bank0
  9314  11CC  1586               	bsf	6,3	;volatile
  9315                           
  9316                           ;lcd.c: 166: ( PORTB &= ((0b00000001 << 2)^0xff) );
  9317  11CD  30FB               	movlw	251
  9318  11CE  00A2               	movwf	??_LCDSend
  9319  11CF  0822               	movf	??_LCDSend,w
  9320  11D0  0586               	andwf	6,f	;volatile
  9321                           
  9322                           ;lcd.c: 167: __nop(); __nop(); __nop();
  9323  11D1  0000               	nop
  9324  11D2  0000               	nop
  9325  11D3  0000               	nop
  9326                           
  9327                           ;lcd.c: 168: ( PORTB |= (0b00000001 << 1) );
  9328  11D4  1283               	bcf	3,5	;RP0=0, select bank0
  9329  11D5  1303               	bcf	3,6	;RP1=0, select bank0
  9330  11D6  1486               	bsf	6,1	;volatile
  9331                           
  9332                           ;lcd.c: 169: __nop(); __nop(); __nop();
  9333  11D7  0000               	nop
  9334  11D8  0000               	nop
  9335  11D9  0000               	nop
  9336                           
  9337                           ;lcd.c: 171: for(aux_byte = 255; aux_byte && (PORTD & 0x80); aux_byte-- )
  9338  11DA  30FF               	movlw	255
  9339  11DB  1283               	bcf	3,5	;RP0=0, select bank0
  9340  11DC  1303               	bcf	3,6	;RP1=0, select bank0
  9341  11DD  00A2               	movwf	??_LCDSend
  9342  11DE  0822               	movf	??_LCDSend,w
  9343  11DF  00A5               	movwf	LCDSend@aux_byte
  9344  11E0  29E5               	goto	l769
  9345  11E1                     l770:	
  9346                           
  9347                           ;lcd.c: 172: {
  9348                           ;lcd.c: 173: _delay((unsigned long)((1)*(3686400/4000000.0)));
  9349  11E1  3001               	movlw	1
  9350  11E2  1283               	bcf	3,5	;RP0=0, select bank0
  9351  11E3  1303               	bcf	3,6	;RP1=0, select bank0
  9352  11E4  02A5               	subwf	LCDSend@aux_byte,f
  9353  11E5                     l769:	
  9354  11E5  0825               	movf	LCDSend@aux_byte,w
  9355  11E6  1903               	btfsc	3,2
  9356  11E7  29EA               	goto	l773
  9357  11E8  1B88               	btfsc	8,7	;volatile
  9358  11E9  29E1               	goto	l770
  9359  11EA                     l773:	
  9360                           
  9361                           ;lcd.c: 174: }
  9362                           ;lcd.c: 175: if(PORTD & 0x80)
  9363  11EA  1F88               	btfss	8,7	;volatile
  9364  11EB  29F6               	goto	l3403
  9365                           
  9366                           ;lcd.c: 176: {
  9367                           ;lcd.c: 178: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9368  11EC  30FD               	movlw	253
  9369  11ED  00A2               	movwf	??_LCDSend
  9370  11EE  0822               	movf	??_LCDSend,w
  9371  11EF  0586               	andwf	6,f	;volatile
  9372                           
  9373                           ;lcd.c: 179: ( PORTB &= ((0b00000001 << 3)^0xff) );
  9374  11F0  30F7               	movlw	247
  9375  11F1  00A2               	movwf	??_LCDSend
  9376  11F2  0822               	movf	??_LCDSend,w
  9377  11F3  0586               	andwf	6,f	;volatile
  9378                           
  9379                           ;lcd.c: 180: return 1;
  9380  11F4  3001               	movlw	1
  9381  11F5  0008               	return
  9382  11F6                     l3403:	
  9383                           
  9384                           ;lcd.c: 181: }
  9385                           ;lcd.c: 183: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9386  11F6  30FD               	movlw	253
  9387  11F7  00A2               	movwf	??_LCDSend
  9388  11F8  0822               	movf	??_LCDSend,w
  9389  11F9  0586               	andwf	6,f	;volatile
  9390                           
  9391                           ;lcd.c: 184: __nop(); __nop(); __nop();
  9392  11FA  0000               	nop
  9393  11FB  0000               	nop
  9394  11FC  0000               	nop
  9395                           
  9396                           ;lcd.c: 186: ( PORTB &= ((0b00000001 << 3)^0xff) );
  9397  11FD  30F7               	movlw	247
  9398  11FE  1283               	bcf	3,5	;RP0=0, select bank0
  9399  11FF  1303               	bcf	3,6	;RP1=0, select bank0
  9400  1200  00A2               	movwf	??_LCDSend
  9401  1201  0822               	movf	??_LCDSend,w
  9402  1202  0586               	andwf	6,f	;volatile
  9403                           
  9404                           ;lcd.c: 187: if( !cmd)
  9405  1203  0821               	movf	LCDSend@cmd,w
  9406  1204  1903               	btfsc	3,2
  9407                           
  9408                           ;lcd.c: 188: {
  9409                           ;lcd.c: 189: ( PORTB |= (0b00000001 << 2) );
  9410  1205  1506               	bsf	6,2	;volatile
  9411                           
  9412                           ;lcd.c: 190: }
  9413                           ;lcd.c: 192: LCDBusOutput();
  9414  1206  160A  158A  2483  160A  118A  	fcall	_LCDBusOutput
  9415                           
  9416                           ;lcd.c: 194: aux_byte = PORTD;
  9417  120B  1283               	bcf	3,5	;RP0=0, select bank0
  9418  120C  1303               	bcf	3,6	;RP1=0, select bank0
  9419  120D  0808               	movf	8,w	;volatile
  9420  120E  00A2               	movwf	??_LCDSend
  9421  120F  0822               	movf	??_LCDSend,w
  9422  1210  00A5               	movwf	LCDSend@aux_byte
  9423                           
  9424                           ;lcd.c: 195: aux_byte &= 0x0F;
  9425  1211  300F               	movlw	15
  9426  1212  00A2               	movwf	??_LCDSend
  9427  1213  0822               	movf	??_LCDSend,w
  9428  1214  05A5               	andwf	LCDSend@aux_byte,f
  9429                           
  9430                           ;lcd.c: 196: aux_byte |= (data & 0xF0);
  9431  1215  0824               	movf	LCDSend@data,w
  9432  1216  39F0               	andlw	240
  9433  1217  00A2               	movwf	??_LCDSend
  9434  1218  0822               	movf	??_LCDSend,w
  9435  1219  04A5               	iorwf	LCDSend@aux_byte,f
  9436                           
  9437                           ;lcd.c: 197: PORTD = aux_byte;
  9438  121A  0825               	movf	LCDSend@aux_byte,w
  9439  121B  0088               	movwf	8	;volatile
  9440                           
  9441                           ;lcd.c: 198: __nop(); __nop(); __nop();
  9442  121C  0000               	nop
  9443  121D  0000               	nop
  9444  121E  0000               	nop
  9445                           
  9446                           ;lcd.c: 199: ( PORTB |= (0b00000001 << 1) );
  9447  121F  1283               	bcf	3,5	;RP0=0, select bank0
  9448  1220  1303               	bcf	3,6	;RP1=0, select bank0
  9449  1221  1486               	bsf	6,1	;volatile
  9450                           
  9451                           ;lcd.c: 200: __nop(); __nop(); __nop();
  9452  1222  0000               	nop
  9453  1223  0000               	nop
  9454  1224  0000               	nop
  9455                           
  9456                           ;lcd.c: 201: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9457  1225  30FD               	movlw	253
  9458  1226  1283               	bcf	3,5	;RP0=0, select bank0
  9459  1227  1303               	bcf	3,6	;RP1=0, select bank0
  9460  1228  00A2               	movwf	??_LCDSend
  9461  1229  0822               	movf	??_LCDSend,w
  9462  122A  0586               	andwf	6,f	;volatile
  9463                           
  9464                           ;lcd.c: 202: __nop(); __nop(); __nop();
  9465  122B  0000               	nop
  9466  122C  0000               	nop
  9467  122D  0000               	nop
  9468                           
  9469                           ;lcd.c: 204: aux_byte = PORTD;
  9470  122E  1283               	bcf	3,5	;RP0=0, select bank0
  9471  122F  1303               	bcf	3,6	;RP1=0, select bank0
  9472  1230  0808               	movf	8,w	;volatile
  9473  1231  00A2               	movwf	??_LCDSend
  9474  1232  0822               	movf	??_LCDSend,w
  9475  1233  00A5               	movwf	LCDSend@aux_byte
  9476                           
  9477                           ;lcd.c: 205: aux_byte &= 0x0F;
  9478  1234  300F               	movlw	15
  9479  1235  00A2               	movwf	??_LCDSend
  9480  1236  0822               	movf	??_LCDSend,w
  9481  1237  05A5               	andwf	LCDSend@aux_byte,f
  9482                           
  9483                           ;lcd.c: 206: aux_byte |= ((data << 4) & 0xF0);
  9484  1238  0824               	movf	LCDSend@data,w
  9485  1239  00A2               	movwf	??_LCDSend
  9486  123A  3003               	movlw	3
  9487  123B                     u2875:	
  9488  123B  1003               	clrc
  9489  123C  0DA2               	rlf	??_LCDSend,f
  9490  123D  3EFF               	addlw	-1
  9491  123E  1D03               	skipz
  9492  123F  2A3B               	goto	u2875
  9493  1240  1003               	clrc
  9494  1241  0D22               	rlf	??_LCDSend,w
  9495  1242  39F0               	andlw	240
  9496  1243  00A3               	movwf	??_LCDSend+1
  9497  1244  0823               	movf	??_LCDSend+1,w
  9498  1245  04A5               	iorwf	LCDSend@aux_byte,f
  9499                           
  9500                           ;lcd.c: 207: PORTD = aux_byte;
  9501  1246  0825               	movf	LCDSend@aux_byte,w
  9502  1247  0088               	movwf	8	;volatile
  9503                           
  9504                           ;lcd.c: 208: __nop(); __nop(); __nop();
  9505  1248  0000               	nop
  9506  1249  0000               	nop
  9507  124A  0000               	nop
  9508                           
  9509                           ;lcd.c: 209: ( PORTB |= (0b00000001 << 1) );
  9510  124B  1283               	bcf	3,5	;RP0=0, select bank0
  9511  124C  1303               	bcf	3,6	;RP1=0, select bank0
  9512  124D  1486               	bsf	6,1	;volatile
  9513                           
  9514                           ;lcd.c: 210: __nop(); __nop(); __nop();
  9515  124E  0000               	nop
  9516  124F  0000               	nop
  9517  1250  0000               	nop
  9518                           
  9519                           ;lcd.c: 211: ( PORTB &= ((0b00000001 << 1)^0xff) );
  9520  1251  30FD               	movlw	253
  9521  1252  1283               	bcf	3,5	;RP0=0, select bank0
  9522  1253  1303               	bcf	3,6	;RP1=0, select bank0
  9523  1254  00A2               	movwf	??_LCDSend
  9524  1255  0822               	movf	??_LCDSend,w
  9525  1256  0586               	andwf	6,f	;volatile
  9526                           
  9527                           ;lcd.c: 212: __nop(); __nop(); __nop();
  9528  1257  0000               	nop
  9529  1258  0000               	nop
  9530  1259  0000               	nop
  9531                           
  9532                           ;lcd.c: 214: LCDBusInput();
  9533  125A  160A  158A  247A   	fcall	_LCDBusInput
  9534                           
  9535                           ;lcd.c: 215: ( PORTB |= (0b00000001 << 3) );
  9536  125D  1283               	bcf	3,5	;RP0=0, select bank0
  9537  125E  1303               	bcf	3,6	;RP1=0, select bank0
  9538  125F  1586               	bsf	6,3	;volatile
  9539                           
  9540                           ;lcd.c: 216: return 0;
  9541  1260  3000               	movlw	0
  9542  1261  0008               	return
  9543  1262                     __end_of_LCDSend:	
  9544                           
  9545                           	psect	text32
  9546  1C83                     __ptext32:	
  9547 ;; *************** function _LCDBusOutput *****************
  9548 ;; Defined at:
  9549 ;;		line 364 in file "lcd.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;		None
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;		None
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  1    wreg      void 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9563 ;;      Params:         0       0       0       0       0
  9564 ;;      Locals:         0       0       0       0       0
  9565 ;;      Temps:          0       1       0       0       0
  9566 ;;      Totals:         0       1       0       0       0
  9567 ;;Total ram usage:        1 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    3
  9570 ;; This function calls:
  9571 ;;		Nothing
  9572 ;; This function is called by:
  9573 ;;		_LCDInit
  9574 ;;		_LCDSend
  9575 ;; This function uses a non-reentrant model
  9576 ;;
  9577                           
  9578                           
  9579                           ;psect for function _LCDBusOutput
  9580  1C83                     _LCDBusOutput:	
  9581                           
  9582                           ;lcd.c: 367: TRISD &= 0x0F;
  9583                           
  9584                           ;incstack = 0
  9585                           ; Regs used in _LCDBusOutput: [wreg+status,2+status,0]
  9586  1C83  300F               	movlw	15
  9587  1C84  1283               	bcf	3,5	;RP0=0, select bank0
  9588  1C85  1303               	bcf	3,6	;RP1=0, select bank0
  9589  1C86  00A0               	movwf	??_LCDBusOutput
  9590  1C87  0820               	movf	??_LCDBusOutput,w
  9591  1C88  1683               	bsf	3,5	;RP0=1, select bank1
  9592  1C89  1303               	bcf	3,6	;RP1=0, select bank1
  9593  1C8A  0588               	andwf	8,f	;volatile
  9594  1C8B  0008               	return
  9595  1C8C                     __end_of_LCDBusOutput:	
  9596                           
  9597                           	psect	text33
  9598  1C7A                     __ptext33:	
  9599 ;; *************** function _LCDBusInput *****************
  9600 ;; Defined at:
  9601 ;;		line 348 in file "lcd.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;		None
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;		None
  9606 ;; Return value:  Size  Location     Type
  9607 ;;                  1    wreg      void 
  9608 ;; Registers used:
  9609 ;;		wreg, status,2, status,0
  9610 ;; Tracked objects:
  9611 ;;		On entry : 0/0
  9612 ;;		On exit  : 0/0
  9613 ;;		Unchanged: 0/0
  9614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9615 ;;      Params:         0       0       0       0       0
  9616 ;;      Locals:         0       0       0       0       0
  9617 ;;      Temps:          0       1       0       0       0
  9618 ;;      Totals:         0       1       0       0       0
  9619 ;;Total ram usage:        1 bytes
  9620 ;; Hardware stack levels used:    1
  9621 ;; Hardware stack levels required when called:    3
  9622 ;; This function calls:
  9623 ;;		Nothing
  9624 ;; This function is called by:
  9625 ;;		_LCDInit
  9626 ;;		_LCDSend
  9627 ;; This function uses a non-reentrant model
  9628 ;;
  9629                           
  9630                           
  9631                           ;psect for function _LCDBusInput
  9632  1C7A                     _LCDBusInput:	
  9633                           
  9634                           ;lcd.c: 351: TRISD |= 0xF0;
  9635                           
  9636                           ;incstack = 0
  9637                           ; Regs used in _LCDBusInput: [wreg+status,2+status,0]
  9638  1C7A  30F0               	movlw	240
  9639  1C7B  1283               	bcf	3,5	;RP0=0, select bank0
  9640  1C7C  1303               	bcf	3,6	;RP1=0, select bank0
  9641  1C7D  00A0               	movwf	??_LCDBusInput
  9642  1C7E  0820               	movf	??_LCDBusInput,w
  9643  1C7F  1683               	bsf	3,5	;RP0=1, select bank1
  9644  1C80  1303               	bcf	3,6	;RP1=0, select bank1
  9645  1C81  0488               	iorwf	8,f	;volatile
  9646  1C82  0008               	return
  9647  1C83                     __end_of_LCDBusInput:	
  9648                           
  9649                           	psect	text34
  9650  07FA                     __ptext34:	
  9651 ;; *************** function _IOTimer *****************
  9652 ;; Defined at:
  9653 ;;		line 672 in file "ioports.c"
  9654 ;; Parameters:    Size  Location     Type
  9655 ;;		None
  9656 ;; Auto vars:     Size  Location     Type
  9657 ;;		None
  9658 ;; Return value:  Size  Location     Type
  9659 ;;                  1    wreg      void 
  9660 ;; Registers used:
  9661 ;;		wreg, status,2, status,0, pclath, cstack
  9662 ;; Tracked objects:
  9663 ;;		On entry : 0/0
  9664 ;;		On exit  : 0/0
  9665 ;;		Unchanged: 0/0
  9666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9667 ;;      Params:         0       0       0       0       0
  9668 ;;      Locals:         0       0       0       0       0
  9669 ;;      Temps:          0       0       0       0       0
  9670 ;;      Totals:         0       0       0       0       0
  9671 ;;Total ram usage:        0 bytes
  9672 ;; Hardware stack levels used:    1
  9673 ;; Hardware stack levels required when called:    4
  9674 ;; This function calls:
  9675 ;;		_IOControlFinPulso
  9676 ;; This function is called by:
  9677 ;;		_main
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           
  9682                           ;psect for function _IOTimer
  9683  07FA                     _IOTimer:	
  9684                           
  9685                           ;ioports.c: 674: IOControlFinPulso();
  9686                           
  9687                           ;incstack = 0
  9688                           ; Regs used in _IOTimer: [wreg+status,2+status,0+pclath+cstack]
  9689  07FA  120A  118A  26E4   	fcall	_IOControlFinPulso
  9690  07FD  0008               	return
  9691  07FE                     __end_of_IOTimer:	
  9692                           
  9693                           	psect	text35
  9694  06E4                     __ptext35:	
  9695 ;; *************** function _IOControlFinPulso *****************
  9696 ;; Defined at:
  9697 ;;		line 462 in file "ioports.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;		None
  9702 ;; Return value:  Size  Location     Type
  9703 ;;                  1    wreg      void 
  9704 ;; Registers used:
  9705 ;;		wreg, status,2, status,0
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 0/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9711 ;;      Params:         0       0       0       0       0
  9712 ;;      Locals:         0       0       0       0       0
  9713 ;;      Temps:          0       1       0       0       0
  9714 ;;      Totals:         0       1       0       0       0
  9715 ;;Total ram usage:        1 bytes
  9716 ;; Hardware stack levels used:    1
  9717 ;; Hardware stack levels required when called:    3
  9718 ;; This function calls:
  9719 ;;		Nothing
  9720 ;; This function is called by:
  9721 ;;		_IOTimer
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           
  9726                           ;psect for function _IOControlFinPulso
  9727  06E4                     _IOControlFinPulso:	
  9728                           
  9729                           ;ioports.c: 465: if(IOPORT.pulse[0])
  9730                           
  9731                           ;incstack = 0
  9732                           ; Regs used in _IOControlFinPulso: [wreg+status,2+status,0]
  9733  06E4  1683               	bsf	3,5	;RP0=1, select bank1
  9734  06E5  1303               	bcf	3,6	;RP1=0, select bank1
  9735  06E6  083C               	movf	(_IOPORT^(0+128)+28),w
  9736  06E7  1903               	btfsc	3,2
  9737  06E8  2EF6               	goto	l602
  9738                           
  9739                           ;ioports.c: 466: {
  9740                           ;ioports.c: 467: IOPORT.pulse[0]--;
  9741  06E9  3001               	movlw	1
  9742  06EA  02BC               	subwf	(_IOPORT^(0+128)+28),f
  9743                           
  9744                           ;ioports.c: 468: if( !IOPORT.pulse[0])
  9745  06EB  083C               	movf	(_IOPORT^(0+128)+28),w
  9746  06EC  1D03               	btfss	3,2
  9747  06ED  2EF6               	goto	l602
  9748                           
  9749                           ;ioports.c: 469: {
  9750                           ;ioports.c: 470: IOPORT.io[2].status &= 0b11111110;
  9751  06EE  30FE               	movlw	254
  9752  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  9753  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  9754  06F1  00A0               	movwf	??_IOControlFinPulso
  9755  06F2  0820               	movf	??_IOControlFinPulso,w
  9756  06F3  1683               	bsf	3,5	;RP0=1, select bank1
  9757  06F4  1303               	bcf	3,6	;RP1=0, select bank1
  9758  06F5  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9759  06F6                     l602:	
  9760                           
  9761                           ;ioports.c: 471: }
  9762                           ;ioports.c: 472: }
  9763                           ;ioports.c: 474: if(IOPORT.pulse[1])
  9764  06F6  083D               	movf	(_IOPORT^(0+128)+29),w
  9765  06F7  1903               	btfsc	3,2
  9766  06F8  2F06               	goto	l604
  9767                           
  9768                           ;ioports.c: 475: {
  9769                           ;ioports.c: 476: IOPORT.pulse[1]--;
  9770  06F9  3001               	movlw	1
  9771  06FA  02BD               	subwf	(_IOPORT^(0+128)+29),f
  9772                           
  9773                           ;ioports.c: 477: if( !IOPORT.pulse[1])
  9774  06FB  083D               	movf	(_IOPORT^(0+128)+29),w
  9775  06FC  1D03               	btfss	3,2
  9776  06FD  2F06               	goto	l604
  9777                           
  9778                           ;ioports.c: 478: {
  9779                           ;ioports.c: 479: IOPORT.io[2].status &= 0b11111101;
  9780  06FE  30FD               	movlw	253
  9781  06FF  1283               	bcf	3,5	;RP0=0, select bank0
  9782  0700  1303               	bcf	3,6	;RP1=0, select bank0
  9783  0701  00A0               	movwf	??_IOControlFinPulso
  9784  0702  0820               	movf	??_IOControlFinPulso,w
  9785  0703  1683               	bsf	3,5	;RP0=1, select bank1
  9786  0704  1303               	bcf	3,6	;RP1=0, select bank1
  9787  0705  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9788  0706                     l604:	
  9789                           
  9790                           ;ioports.c: 480: }
  9791                           ;ioports.c: 481: }
  9792                           ;ioports.c: 483: if(IOPORT.pulse[2])
  9793  0706  083E               	movf	(_IOPORT^(0+128)+30),w
  9794  0707  1903               	btfsc	3,2
  9795  0708  2F16               	goto	l606
  9796                           
  9797                           ;ioports.c: 484: {
  9798                           ;ioports.c: 485: IOPORT.pulse[2]--;
  9799  0709  3001               	movlw	1
  9800  070A  02BE               	subwf	(_IOPORT^(0+128)+30),f
  9801                           
  9802                           ;ioports.c: 486: if( !IOPORT.pulse[2])
  9803  070B  083E               	movf	(_IOPORT^(0+128)+30),w
  9804  070C  1D03               	btfss	3,2
  9805  070D  2F16               	goto	l606
  9806                           
  9807                           ;ioports.c: 487: {
  9808                           ;ioports.c: 488: IOPORT.io[2].status &= 0b11111011;
  9809  070E  30FB               	movlw	251
  9810  070F  1283               	bcf	3,5	;RP0=0, select bank0
  9811  0710  1303               	bcf	3,6	;RP1=0, select bank0
  9812  0711  00A0               	movwf	??_IOControlFinPulso
  9813  0712  0820               	movf	??_IOControlFinPulso,w
  9814  0713  1683               	bsf	3,5	;RP0=1, select bank1
  9815  0714  1303               	bcf	3,6	;RP1=0, select bank1
  9816  0715  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9817  0716                     l606:	
  9818                           
  9819                           ;ioports.c: 489: }
  9820                           ;ioports.c: 490: }
  9821                           ;ioports.c: 492: if(IOPORT.pulse[3])
  9822  0716  083F               	movf	(_IOPORT^(0+128)+31),w
  9823  0717  1903               	btfsc	3,2
  9824  0718  2F26               	goto	l608
  9825                           
  9826                           ;ioports.c: 493: {
  9827                           ;ioports.c: 494: IOPORT.pulse[3]--;
  9828  0719  3001               	movlw	1
  9829  071A  02BF               	subwf	(_IOPORT^(0+128)+31),f
  9830                           
  9831                           ;ioports.c: 495: if( !IOPORT.pulse[3])
  9832  071B  083F               	movf	(_IOPORT^(0+128)+31),w
  9833  071C  1D03               	btfss	3,2
  9834  071D  2F26               	goto	l608
  9835                           
  9836                           ;ioports.c: 496: {
  9837                           ;ioports.c: 497: IOPORT.io[2].status &= 0b11110111;
  9838  071E  30F7               	movlw	247
  9839  071F  1283               	bcf	3,5	;RP0=0, select bank0
  9840  0720  1303               	bcf	3,6	;RP1=0, select bank0
  9841  0721  00A0               	movwf	??_IOControlFinPulso
  9842  0722  0820               	movf	??_IOControlFinPulso,w
  9843  0723  1683               	bsf	3,5	;RP0=1, select bank1
  9844  0724  1303               	bcf	3,6	;RP1=0, select bank1
  9845  0725  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9846  0726                     l608:	
  9847                           
  9848                           ;ioports.c: 498: }
  9849                           ;ioports.c: 499: }
  9850                           ;ioports.c: 501: if(IOPORT.pulse[4])
  9851  0726  0840               	movf	(_IOPORT^(0+128)+32),w
  9852  0727  1903               	btfsc	3,2
  9853  0728  2F36               	goto	l610
  9854                           
  9855                           ;ioports.c: 502: {
  9856                           ;ioports.c: 503: IOPORT.pulse[4]--;
  9857  0729  3001               	movlw	1
  9858  072A  02C0               	subwf	(_IOPORT^(0+128)+32),f
  9859                           
  9860                           ;ioports.c: 504: if( !IOPORT.pulse[4])
  9861  072B  0840               	movf	(_IOPORT^(0+128)+32),w
  9862  072C  1D03               	btfss	3,2
  9863  072D  2F36               	goto	l610
  9864                           
  9865                           ;ioports.c: 505: {
  9866                           ;ioports.c: 506: IOPORT.io[2].status &= 0b11101111;
  9867  072E  30EF               	movlw	239
  9868  072F  1283               	bcf	3,5	;RP0=0, select bank0
  9869  0730  1303               	bcf	3,6	;RP1=0, select bank0
  9870  0731  00A0               	movwf	??_IOControlFinPulso
  9871  0732  0820               	movf	??_IOControlFinPulso,w
  9872  0733  1683               	bsf	3,5	;RP0=1, select bank1
  9873  0734  1303               	bcf	3,6	;RP1=0, select bank1
  9874  0735  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9875  0736                     l610:	
  9876                           
  9877                           ;ioports.c: 507: }
  9878                           ;ioports.c: 508: }
  9879                           ;ioports.c: 510: if(IOPORT.pulse[5])
  9880  0736  0841               	movf	(_IOPORT^(0+128)+33),w
  9881  0737  1903               	btfsc	3,2
  9882  0738  2F46               	goto	l612
  9883                           
  9884                           ;ioports.c: 511: {
  9885                           ;ioports.c: 512: IOPORT.pulse[5]--;
  9886  0739  3001               	movlw	1
  9887  073A  02C1               	subwf	(_IOPORT^(0+128)+33),f
  9888                           
  9889                           ;ioports.c: 513: if( !IOPORT.pulse[5])
  9890  073B  0841               	movf	(_IOPORT^(0+128)+33),w
  9891  073C  1D03               	btfss	3,2
  9892  073D  2F46               	goto	l612
  9893                           
  9894                           ;ioports.c: 514: {
  9895                           ;ioports.c: 515: IOPORT.io[2].status &= 0b11011111;
  9896  073E  30DF               	movlw	223
  9897  073F  1283               	bcf	3,5	;RP0=0, select bank0
  9898  0740  1303               	bcf	3,6	;RP1=0, select bank0
  9899  0741  00A0               	movwf	??_IOControlFinPulso
  9900  0742  0820               	movf	??_IOControlFinPulso,w
  9901  0743  1683               	bsf	3,5	;RP0=1, select bank1
  9902  0744  1303               	bcf	3,6	;RP1=0, select bank1
  9903  0745  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9904  0746                     l612:	
  9905                           
  9906                           ;ioports.c: 516: }
  9907                           ;ioports.c: 517: }
  9908                           ;ioports.c: 519: if(IOPORT.pulse[6])
  9909  0746  0842               	movf	(_IOPORT^(0+128)+34),w
  9910  0747  1903               	btfsc	3,2
  9911  0748  2F56               	goto	l614
  9912                           
  9913                           ;ioports.c: 520: {
  9914                           ;ioports.c: 521: IOPORT.pulse[6]--;
  9915  0749  3001               	movlw	1
  9916  074A  02C2               	subwf	(_IOPORT^(0+128)+34),f
  9917                           
  9918                           ;ioports.c: 522: if( !IOPORT.pulse[6])
  9919  074B  0842               	movf	(_IOPORT^(0+128)+34),w
  9920  074C  1D03               	btfss	3,2
  9921  074D  2F56               	goto	l614
  9922                           
  9923                           ;ioports.c: 523: {
  9924                           ;ioports.c: 524: IOPORT.io[2].status &= 0b10111111;
  9925  074E  30BF               	movlw	191
  9926  074F  1283               	bcf	3,5	;RP0=0, select bank0
  9927  0750  1303               	bcf	3,6	;RP1=0, select bank0
  9928  0751  00A0               	movwf	??_IOControlFinPulso
  9929  0752  0820               	movf	??_IOControlFinPulso,w
  9930  0753  1683               	bsf	3,5	;RP0=1, select bank1
  9931  0754  1303               	bcf	3,6	;RP1=0, select bank1
  9932  0755  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9933  0756                     l614:	
  9934                           
  9935                           ;ioports.c: 525: }
  9936                           ;ioports.c: 526: }
  9937                           ;ioports.c: 528: if(IOPORT.pulse[7])
  9938  0756  0843               	movf	(_IOPORT^(0+128)+35),w
  9939  0757  1903               	btfsc	3,2
  9940  0758  2F66               	goto	l616
  9941                           
  9942                           ;ioports.c: 529: {
  9943                           ;ioports.c: 530: IOPORT.pulse[7]--;
  9944  0759  3001               	movlw	1
  9945  075A  02C3               	subwf	(_IOPORT^(0+128)+35),f
  9946                           
  9947                           ;ioports.c: 531: if( !IOPORT.pulse[7])
  9948  075B  0843               	movf	(_IOPORT^(0+128)+35),w
  9949  075C  1D03               	btfss	3,2
  9950  075D  2F66               	goto	l616
  9951                           
  9952                           ;ioports.c: 532: {
  9953                           ;ioports.c: 533: IOPORT.io[2].status &= 0b01111111;
  9954  075E  307F               	movlw	127
  9955  075F  1283               	bcf	3,5	;RP0=0, select bank0
  9956  0760  1303               	bcf	3,6	;RP1=0, select bank0
  9957  0761  00A0               	movwf	??_IOControlFinPulso
  9958  0762  0820               	movf	??_IOControlFinPulso,w
  9959  0763  1683               	bsf	3,5	;RP0=1, select bank1
  9960  0764  1303               	bcf	3,6	;RP1=0, select bank1
  9961  0765  05A6               	andwf	(_IOPORT^(0+128)+6),f
  9962  0766                     l616:	
  9963                           
  9964                           ;ioports.c: 534: }
  9965                           ;ioports.c: 535: }
  9966                           ;ioports.c: 538: if(IOPORT.pulse[8])
  9967  0766  0844               	movf	(_IOPORT^(0+128)+36),w
  9968  0767  1903               	btfsc	3,2
  9969  0768  2F76               	goto	l618
  9970                           
  9971                           ;ioports.c: 539: {
  9972                           ;ioports.c: 540: IOPORT.pulse[8]--;
  9973  0769  3001               	movlw	1
  9974  076A  02C4               	subwf	(_IOPORT^(0+128)+36),f
  9975                           
  9976                           ;ioports.c: 541: if( !IOPORT.pulse[8])
  9977  076B  0844               	movf	(_IOPORT^(0+128)+36),w
  9978  076C  1D03               	btfss	3,2
  9979  076D  2F76               	goto	l618
  9980                           
  9981                           ;ioports.c: 542: {
  9982                           ;ioports.c: 543: IOPORT.io[3].status &= 0b11111110;
  9983  076E  30FE               	movlw	254
  9984  076F  1283               	bcf	3,5	;RP0=0, select bank0
  9985  0770  1303               	bcf	3,6	;RP1=0, select bank0
  9986  0771  00A0               	movwf	??_IOControlFinPulso
  9987  0772  0820               	movf	??_IOControlFinPulso,w
  9988  0773  1683               	bsf	3,5	;RP0=1, select bank1
  9989  0774  1303               	bcf	3,6	;RP1=0, select bank1
  9990  0775  05A9               	andwf	(_IOPORT^(0+128)+9),f
  9991  0776                     l618:	
  9992                           
  9993                           ;ioports.c: 544: }
  9994                           ;ioports.c: 545: }
  9995                           ;ioports.c: 547: if(IOPORT.pulse[9])
  9996  0776  0845               	movf	(_IOPORT^(0+128)+37),w
  9997  0777  1903               	btfsc	3,2
  9998  0778  2F86               	goto	l620
  9999                           
 10000                           ;ioports.c: 548: {
 10001                           ;ioports.c: 549: IOPORT.pulse[9]--;
 10002  0779  3001               	movlw	1
 10003  077A  02C5               	subwf	(_IOPORT^(0+128)+37),f
 10004                           
 10005                           ;ioports.c: 550: if( !IOPORT.pulse[9])
 10006  077B  0845               	movf	(_IOPORT^(0+128)+37),w
 10007  077C  1D03               	btfss	3,2
 10008  077D  2F86               	goto	l620
 10009                           
 10010                           ;ioports.c: 551: {
 10011                           ;ioports.c: 552: IOPORT.io[3].status &= 0b11111101;
 10012  077E  30FD               	movlw	253
 10013  077F  1283               	bcf	3,5	;RP0=0, select bank0
 10014  0780  1303               	bcf	3,6	;RP1=0, select bank0
 10015  0781  00A0               	movwf	??_IOControlFinPulso
 10016  0782  0820               	movf	??_IOControlFinPulso,w
 10017  0783  1683               	bsf	3,5	;RP0=1, select bank1
 10018  0784  1303               	bcf	3,6	;RP1=0, select bank1
 10019  0785  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10020  0786                     l620:	
 10021                           
 10022                           ;ioports.c: 553: }
 10023                           ;ioports.c: 554: }
 10024                           ;ioports.c: 556: if(IOPORT.pulse[10])
 10025  0786  0846               	movf	(_IOPORT^(0+128)+38),w
 10026  0787  1903               	btfsc	3,2
 10027  0788  2F96               	goto	l622
 10028                           
 10029                           ;ioports.c: 557: {
 10030                           ;ioports.c: 558: IOPORT.pulse[10]--;
 10031  0789  3001               	movlw	1
 10032  078A  02C6               	subwf	(_IOPORT^(0+128)+38),f
 10033                           
 10034                           ;ioports.c: 559: if( !IOPORT.pulse[10])
 10035  078B  0846               	movf	(_IOPORT^(0+128)+38),w
 10036  078C  1D03               	btfss	3,2
 10037  078D  2F96               	goto	l622
 10038                           
 10039                           ;ioports.c: 560: {
 10040                           ;ioports.c: 561: IOPORT.io[3].status &= 0b11111011;
 10041  078E  30FB               	movlw	251
 10042  078F  1283               	bcf	3,5	;RP0=0, select bank0
 10043  0790  1303               	bcf	3,6	;RP1=0, select bank0
 10044  0791  00A0               	movwf	??_IOControlFinPulso
 10045  0792  0820               	movf	??_IOControlFinPulso,w
 10046  0793  1683               	bsf	3,5	;RP0=1, select bank1
 10047  0794  1303               	bcf	3,6	;RP1=0, select bank1
 10048  0795  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10049  0796                     l622:	
 10050                           
 10051                           ;ioports.c: 562: }
 10052                           ;ioports.c: 563: }
 10053                           ;ioports.c: 565: if(IOPORT.pulse[11])
 10054  0796  0847               	movf	(_IOPORT^(0+128)+39),w
 10055  0797  1903               	btfsc	3,2
 10056  0798  2FA6               	goto	l624
 10057                           
 10058                           ;ioports.c: 566: {
 10059                           ;ioports.c: 567: IOPORT.pulse[11]--;
 10060  0799  3001               	movlw	1
 10061  079A  02C7               	subwf	(_IOPORT^(0+128)+39),f
 10062                           
 10063                           ;ioports.c: 568: if( !IOPORT.pulse[11])
 10064  079B  0847               	movf	(_IOPORT^(0+128)+39),w
 10065  079C  1D03               	btfss	3,2
 10066  079D  2FA6               	goto	l624
 10067                           
 10068                           ;ioports.c: 569: {
 10069                           ;ioports.c: 570: IOPORT.io[3].status &= 0b11110111;
 10070  079E  30F7               	movlw	247
 10071  079F  1283               	bcf	3,5	;RP0=0, select bank0
 10072  07A0  1303               	bcf	3,6	;RP1=0, select bank0
 10073  07A1  00A0               	movwf	??_IOControlFinPulso
 10074  07A2  0820               	movf	??_IOControlFinPulso,w
 10075  07A3  1683               	bsf	3,5	;RP0=1, select bank1
 10076  07A4  1303               	bcf	3,6	;RP1=0, select bank1
 10077  07A5  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10078  07A6                     l624:	
 10079                           
 10080                           ;ioports.c: 571: }
 10081                           ;ioports.c: 572: }
 10082                           ;ioports.c: 574: if(IOPORT.pulse[12])
 10083  07A6  0848               	movf	(_IOPORT^(0+128)+40),w
 10084  07A7  1903               	btfsc	3,2
 10085  07A8  2FB6               	goto	l626
 10086                           
 10087                           ;ioports.c: 575: {
 10088                           ;ioports.c: 576: IOPORT.pulse[12]--;
 10089  07A9  3001               	movlw	1
 10090  07AA  02C8               	subwf	(_IOPORT^(0+128)+40),f
 10091                           
 10092                           ;ioports.c: 577: if( !IOPORT.pulse[12])
 10093  07AB  0848               	movf	(_IOPORT^(0+128)+40),w
 10094  07AC  1D03               	btfss	3,2
 10095  07AD  2FB6               	goto	l626
 10096                           
 10097                           ;ioports.c: 578: {
 10098                           ;ioports.c: 579: IOPORT.io[3].status &= 0b11101111;
 10099  07AE  30EF               	movlw	239
 10100  07AF  1283               	bcf	3,5	;RP0=0, select bank0
 10101  07B0  1303               	bcf	3,6	;RP1=0, select bank0
 10102  07B1  00A0               	movwf	??_IOControlFinPulso
 10103  07B2  0820               	movf	??_IOControlFinPulso,w
 10104  07B3  1683               	bsf	3,5	;RP0=1, select bank1
 10105  07B4  1303               	bcf	3,6	;RP1=0, select bank1
 10106  07B5  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10107  07B6                     l626:	
 10108                           
 10109                           ;ioports.c: 580: }
 10110                           ;ioports.c: 581: }
 10111                           ;ioports.c: 583: if(IOPORT.pulse[13])
 10112  07B6  0849               	movf	(_IOPORT^(0+128)+41),w
 10113  07B7  1903               	btfsc	3,2
 10114  07B8  2FC6               	goto	l628
 10115                           
 10116                           ;ioports.c: 584: {
 10117                           ;ioports.c: 585: IOPORT.pulse[13]--;
 10118  07B9  3001               	movlw	1
 10119  07BA  02C9               	subwf	(_IOPORT^(0+128)+41),f
 10120                           
 10121                           ;ioports.c: 586: if( !IOPORT.pulse[13])
 10122  07BB  0849               	movf	(_IOPORT^(0+128)+41),w
 10123  07BC  1D03               	btfss	3,2
 10124  07BD  2FC6               	goto	l628
 10125                           
 10126                           ;ioports.c: 587: {
 10127                           ;ioports.c: 588: IOPORT.io[3].status &= 0b11011111;
 10128  07BE  30DF               	movlw	223
 10129  07BF  1283               	bcf	3,5	;RP0=0, select bank0
 10130  07C0  1303               	bcf	3,6	;RP1=0, select bank0
 10131  07C1  00A0               	movwf	??_IOControlFinPulso
 10132  07C2  0820               	movf	??_IOControlFinPulso,w
 10133  07C3  1683               	bsf	3,5	;RP0=1, select bank1
 10134  07C4  1303               	bcf	3,6	;RP1=0, select bank1
 10135  07C5  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10136  07C6                     l628:	
 10137                           
 10138                           ;ioports.c: 589: }
 10139                           ;ioports.c: 590: }
 10140                           ;ioports.c: 592: if(IOPORT.pulse[14])
 10141  07C6  084A               	movf	(_IOPORT^(0+128)+42),w
 10142  07C7  1903               	btfsc	3,2
 10143  07C8  2FD6               	goto	l630
 10144                           
 10145                           ;ioports.c: 593: {
 10146                           ;ioports.c: 594: IOPORT.pulse[14]--;
 10147  07C9  3001               	movlw	1
 10148  07CA  02CA               	subwf	(_IOPORT^(0+128)+42),f
 10149                           
 10150                           ;ioports.c: 595: if( !IOPORT.pulse[14])
 10151  07CB  084A               	movf	(_IOPORT^(0+128)+42),w
 10152  07CC  1D03               	btfss	3,2
 10153  07CD  2FD6               	goto	l630
 10154                           
 10155                           ;ioports.c: 596: {
 10156                           ;ioports.c: 597: IOPORT.io[3].status &= 0b10111111;
 10157  07CE  30BF               	movlw	191
 10158  07CF  1283               	bcf	3,5	;RP0=0, select bank0
 10159  07D0  1303               	bcf	3,6	;RP1=0, select bank0
 10160  07D1  00A0               	movwf	??_IOControlFinPulso
 10161  07D2  0820               	movf	??_IOControlFinPulso,w
 10162  07D3  1683               	bsf	3,5	;RP0=1, select bank1
 10163  07D4  1303               	bcf	3,6	;RP1=0, select bank1
 10164  07D5  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10165  07D6                     l630:	
 10166                           
 10167                           ;ioports.c: 598: }
 10168                           ;ioports.c: 599: }
 10169                           ;ioports.c: 601: if(IOPORT.pulse[15])
 10170  07D6  084B               	movf	(_IOPORT^(0+128)+43),w
 10171  07D7  1903               	btfsc	3,2
 10172  07D8  0008               	return
 10173                           
 10174                           ;ioports.c: 602: {
 10175                           ;ioports.c: 603: IOPORT.pulse[15]--;
 10176  07D9  3001               	movlw	1
 10177  07DA  02CB               	subwf	(_IOPORT^(0+128)+43),f
 10178                           
 10179                           ;ioports.c: 604: if( !IOPORT.pulse[15])
 10180  07DB  084B               	movf	(_IOPORT^(0+128)+43),w
 10181  07DC  1D03               	btfss	3,2
 10182  07DD  0008               	return
 10183                           
 10184                           ;ioports.c: 605: {
 10185                           ;ioports.c: 606: IOPORT.io[3].status &= 0b01111111;
 10186  07DE  307F               	movlw	127
 10187  07DF  1283               	bcf	3,5	;RP0=0, select bank0
 10188  07E0  1303               	bcf	3,6	;RP1=0, select bank0
 10189  07E1  00A0               	movwf	??_IOControlFinPulso
 10190  07E2  0820               	movf	??_IOControlFinPulso,w
 10191  07E3  1683               	bsf	3,5	;RP0=1, select bank1
 10192  07E4  1303               	bcf	3,6	;RP1=0, select bank1
 10193  07E5  05A9               	andwf	(_IOPORT^(0+128)+9),f
 10194  07E6  0008               	return
 10195  07E7                     __end_of_IOControlFinPulso:	
 10196                           
 10197                           	psect	text36
 10198  1C71                     __ptext36:	
 10199 ;; *************** function _IOTask *****************
 10200 ;; Defined at:
 10201 ;;		line 666 in file "ioports.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;		None
 10206 ;; Return value:  Size  Location     Type
 10207 ;;                  1    wreg      void 
 10208 ;; Registers used:
 10209 ;;		wreg, status,2, status,0, pclath, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10215 ;;      Params:         0       0       0       0       0
 10216 ;;      Locals:         0       0       0       0       0
 10217 ;;      Temps:          0       0       0       0       0
 10218 ;;      Totals:         0       0       0       0       0
 10219 ;;Total ram usage:        0 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    4
 10222 ;; This function calls:
 10223 ;;		_IOUpdateIn
 10224 ;;		_IOUpdateOut
 10225 ;; This function is called by:
 10226 ;;		_main
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _IOTask
 10232  1C71                     _IOTask:	
 10233                           
 10234                           ;ioports.c: 668: IOUpdateOut();
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _IOTask: [wreg+status,2+status,0+pclath+cstack]
 10238  1C71  160A  158A  2731  160A  158A  	fcall	_IOUpdateOut
 10239                           
 10240                           ;ioports.c: 669: IOUpdateIn();
 10241  1C76  120A  158A  2569   	fcall	_IOUpdateIn
 10242  1C79  0008               	return
 10243  1C7A                     __end_of_IOTask:	
 10244                           
 10245                           	psect	text37
 10246  0D69                     __ptext37:	
 10247 ;; *************** function _IOUpdateIn *****************
 10248 ;; Defined at:
 10249 ;;		line 75 in file "ioports.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;		None
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;		None
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  1    wreg      void 
 10256 ;; Registers used:
 10257 ;;		wreg, status,2, status,0
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 10263 ;;      Params:         0       0       0       0       0
 10264 ;;      Locals:         0       0       0       0       0
 10265 ;;      Temps:          0       1       0       0       0
 10266 ;;      Totals:         0       1       0       0       0
 10267 ;;Total ram usage:        1 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    3
 10270 ;; This function calls:
 10271 ;;		Nothing
 10272 ;; This function is called by:
 10273 ;;		_IOTask
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           
 10278                           ;psect for function _IOUpdateIn
 10279  0D69                     _IOUpdateIn:	
 10280                           
 10281                           ;ioports.c: 78: PORTB &= 0b11101111;
 10282                           
 10283                           ;incstack = 0
 10284                           ; Regs used in _IOUpdateIn: [wreg+status,2+status,0]
 10285  0D69  30EF               	movlw	239
 10286  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
 10287  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
 10288  0D6C  00A0               	movwf	??_IOUpdateIn
 10289  0D6D  0820               	movf	??_IOUpdateIn,w
 10290  0D6E  0586               	andwf	6,f	;volatile
 10291                           
 10292                           ;ioports.c: 79: __nop();
 10293  0D6F  0000               	nop
 10294                           
 10295                           ;ioports.c: 80: __nop();
 10296  0D70  0000               	nop
 10297                           
 10298                           ;ioports.c: 81: __nop();
 10299  0D71  0000               	nop
 10300                           
 10301                           ;ioports.c: 83: if(PORTD & 0b00000001)
 10302  0D72  1283               	bcf	3,5	;RP0=0, select bank0
 10303  0D73  1303               	bcf	3,6	;RP1=0, select bank0
 10304  0D74  1C08               	btfss	8,0	;volatile
 10305  0D75  2D88               	goto	l3863
 10306                           
 10307                           ;ioports.c: 84: {
 10308                           ;ioports.c: 85: if(IOPORT.status_count[0] < 255)
 10309  0D76  1683               	bsf	3,5	;RP0=1, select bank1
 10310  0D77  1303               	bcf	3,6	;RP1=0, select bank1
 10311  0D78  0A4C               	incf	(_IOPORT^(0+128)+44),w
 10312  0D79  1903               	btfsc	3,2
 10313  0D7A  2D9A               	goto	l3869
 10314                           
 10315                           ;ioports.c: 86: {
 10316                           ;ioports.c: 87: IOPORT.status_count[0]++;
 10317  0D7B  3001               	movlw	1
 10318  0D7C  1283               	bcf	3,5	;RP0=0, select bank0
 10319  0D7D  1303               	bcf	3,6	;RP1=0, select bank0
 10320  0D7E  00A0               	movwf	??_IOUpdateIn
 10321  0D7F  0820               	movf	??_IOUpdateIn,w
 10322  0D80  1683               	bsf	3,5	;RP0=1, select bank1
 10323  0D81  1303               	bcf	3,6	;RP1=0, select bank1
 10324  0D82  07CC               	addwf	(_IOPORT^(0+128)+44),f
 10325                           
 10326                           ;ioports.c: 88: if(IOPORT.status_count[0] == 255)
 10327  0D83  0A4C               	incf	(_IOPORT^(0+128)+44),w
 10328  0D84  1D03               	btfss	3,2
 10329  0D85  2D9A               	goto	l3869
 10330                           
 10331                           ;ioports.c: 89: {
 10332                           ;ioports.c: 90: IOPORT.io[0].status |= 0b00000001;
 10333  0D86  1420               	bsf	_IOPORT^(0+128),0
 10334                           
 10335                           ;ioports.c: 91: }
 10336                           ;ioports.c: 92: }
 10337                           ;ioports.c: 93: }
 10338  0D87  2D9A               	goto	l3869
 10339  0D88                     l3863:	
 10340                           
 10341                           ;ioports.c: 94: else
 10342                           ;ioports.c: 95: {
 10343                           ;ioports.c: 96: if(IOPORT.status_count[0] > 0)
 10344  0D88  1683               	bsf	3,5	;RP0=1, select bank1
 10345  0D89  1303               	bcf	3,6	;RP1=0, select bank1
 10346  0D8A  084C               	movf	(_IOPORT^(0+128)+44),w
 10347  0D8B  1903               	btfsc	3,2
 10348  0D8C  2D9A               	goto	l3869
 10349                           
 10350                           ;ioports.c: 97: {
 10351                           ;ioports.c: 98: IOPORT.status_count[0]--;
 10352  0D8D  3001               	movlw	1
 10353  0D8E  02CC               	subwf	(_IOPORT^(0+128)+44),f
 10354                           
 10355                           ;ioports.c: 99: if(IOPORT.status_count[0] == 0)
 10356  0D8F  084C               	movf	(_IOPORT^(0+128)+44),w
 10357  0D90  1D03               	btfss	3,2
 10358  0D91  2D9A               	goto	l3869
 10359                           
 10360                           ;ioports.c: 100: {
 10361                           ;ioports.c: 101: IOPORT.io[0].status &= 0b11111110;
 10362  0D92  30FE               	movlw	254
 10363  0D93  1283               	bcf	3,5	;RP0=0, select bank0
 10364  0D94  1303               	bcf	3,6	;RP1=0, select bank0
 10365  0D95  00A0               	movwf	??_IOUpdateIn
 10366  0D96  0820               	movf	??_IOUpdateIn,w
 10367  0D97  1683               	bsf	3,5	;RP0=1, select bank1
 10368  0D98  1303               	bcf	3,6	;RP1=0, select bank1
 10369  0D99  05A0               	andwf	_IOPORT^(0+128),f
 10370  0D9A                     l3869:	
 10371                           
 10372                           ;ioports.c: 102: }
 10373                           ;ioports.c: 103: }
 10374                           ;ioports.c: 104: }
 10375                           ;ioports.c: 106: if(PORTD & 0b00000010)
 10376  0D9A  1283               	bcf	3,5	;RP0=0, select bank0
 10377  0D9B  1303               	bcf	3,6	;RP1=0, select bank0
 10378  0D9C  1C88               	btfss	8,1	;volatile
 10379  0D9D  2DB0               	goto	l3877
 10380                           
 10381                           ;ioports.c: 107: {
 10382                           ;ioports.c: 108: if(IOPORT.status_count[1] < 255)
 10383  0D9E  1683               	bsf	3,5	;RP0=1, select bank1
 10384  0D9F  1303               	bcf	3,6	;RP1=0, select bank1
 10385  0DA0  0A4D               	incf	(_IOPORT^(0+128)+45),w
 10386  0DA1  1903               	btfsc	3,2
 10387  0DA2  2DC2               	goto	l3883
 10388                           
 10389                           ;ioports.c: 109: {
 10390                           ;ioports.c: 110: IOPORT.status_count[1]++;
 10391  0DA3  3001               	movlw	1
 10392  0DA4  1283               	bcf	3,5	;RP0=0, select bank0
 10393  0DA5  1303               	bcf	3,6	;RP1=0, select bank0
 10394  0DA6  00A0               	movwf	??_IOUpdateIn
 10395  0DA7  0820               	movf	??_IOUpdateIn,w
 10396  0DA8  1683               	bsf	3,5	;RP0=1, select bank1
 10397  0DA9  1303               	bcf	3,6	;RP1=0, select bank1
 10398  0DAA  07CD               	addwf	(_IOPORT^(0+128)+45),f
 10399                           
 10400                           ;ioports.c: 111: if(IOPORT.status_count[1] == 255)
 10401  0DAB  0A4D               	incf	(_IOPORT^(0+128)+45),w
 10402  0DAC  1D03               	btfss	3,2
 10403  0DAD  2DC2               	goto	l3883
 10404                           
 10405                           ;ioports.c: 112: {
 10406                           ;ioports.c: 113: IOPORT.io[0].status |= 0b00000010;
 10407  0DAE  14A0               	bsf	_IOPORT^(0+128),1
 10408                           
 10409                           ;ioports.c: 114: }
 10410                           ;ioports.c: 115: }
 10411                           ;ioports.c: 116: }
 10412  0DAF  2DC2               	goto	l3883
 10413  0DB0                     l3877:	
 10414                           
 10415                           ;ioports.c: 117: else
 10416                           ;ioports.c: 118: {
 10417                           ;ioports.c: 119: if(IOPORT.status_count[1] > 0)
 10418  0DB0  1683               	bsf	3,5	;RP0=1, select bank1
 10419  0DB1  1303               	bcf	3,6	;RP1=0, select bank1
 10420  0DB2  084D               	movf	(_IOPORT^(0+128)+45),w
 10421  0DB3  1903               	btfsc	3,2
 10422  0DB4  2DC2               	goto	l3883
 10423                           
 10424                           ;ioports.c: 120: {
 10425                           ;ioports.c: 121: IOPORT.status_count[1]--;
 10426  0DB5  3001               	movlw	1
 10427  0DB6  02CD               	subwf	(_IOPORT^(0+128)+45),f
 10428                           
 10429                           ;ioports.c: 122: if(IOPORT.status_count[1] == 0)
 10430  0DB7  084D               	movf	(_IOPORT^(0+128)+45),w
 10431  0DB8  1D03               	btfss	3,2
 10432  0DB9  2DC2               	goto	l3883
 10433                           
 10434                           ;ioports.c: 123: {
 10435                           ;ioports.c: 124: IOPORT.io[0].status &= 0b11111101;
 10436  0DBA  30FD               	movlw	253
 10437  0DBB  1283               	bcf	3,5	;RP0=0, select bank0
 10438  0DBC  1303               	bcf	3,6	;RP1=0, select bank0
 10439  0DBD  00A0               	movwf	??_IOUpdateIn
 10440  0DBE  0820               	movf	??_IOUpdateIn,w
 10441  0DBF  1683               	bsf	3,5	;RP0=1, select bank1
 10442  0DC0  1303               	bcf	3,6	;RP1=0, select bank1
 10443  0DC1  05A0               	andwf	_IOPORT^(0+128),f
 10444  0DC2                     l3883:	
 10445                           
 10446                           ;ioports.c: 125: }
 10447                           ;ioports.c: 126: }
 10448                           ;ioports.c: 127: }
 10449                           ;ioports.c: 129: if(PORTD & 0b00000100)
 10450  0DC2  1283               	bcf	3,5	;RP0=0, select bank0
 10451  0DC3  1303               	bcf	3,6	;RP1=0, select bank0
 10452  0DC4  1D08               	btfss	8,2	;volatile
 10453  0DC5  2DD8               	goto	l3891
 10454                           
 10455                           ;ioports.c: 130: {
 10456                           ;ioports.c: 131: if(IOPORT.status_count[2] < 255)
 10457  0DC6  1683               	bsf	3,5	;RP0=1, select bank1
 10458  0DC7  1303               	bcf	3,6	;RP1=0, select bank1
 10459  0DC8  0A4E               	incf	(_IOPORT^(0+128)+46),w
 10460  0DC9  1903               	btfsc	3,2
 10461  0DCA  2DEA               	goto	l3897
 10462                           
 10463                           ;ioports.c: 132: {
 10464                           ;ioports.c: 133: IOPORT.status_count[2]++;
 10465  0DCB  3001               	movlw	1
 10466  0DCC  1283               	bcf	3,5	;RP0=0, select bank0
 10467  0DCD  1303               	bcf	3,6	;RP1=0, select bank0
 10468  0DCE  00A0               	movwf	??_IOUpdateIn
 10469  0DCF  0820               	movf	??_IOUpdateIn,w
 10470  0DD0  1683               	bsf	3,5	;RP0=1, select bank1
 10471  0DD1  1303               	bcf	3,6	;RP1=0, select bank1
 10472  0DD2  07CE               	addwf	(_IOPORT^(0+128)+46),f
 10473                           
 10474                           ;ioports.c: 134: if(IOPORT.status_count[2] == 255)
 10475  0DD3  0A4E               	incf	(_IOPORT^(0+128)+46),w
 10476  0DD4  1D03               	btfss	3,2
 10477  0DD5  2DEA               	goto	l3897
 10478                           
 10479                           ;ioports.c: 135: {
 10480                           ;ioports.c: 136: IOPORT.io[0].status |= 0b00000100;
 10481  0DD6  1520               	bsf	_IOPORT^(0+128),2
 10482                           
 10483                           ;ioports.c: 137: }
 10484                           ;ioports.c: 138: }
 10485                           ;ioports.c: 139: }
 10486  0DD7  2DEA               	goto	l3897
 10487  0DD8                     l3891:	
 10488                           
 10489                           ;ioports.c: 140: else
 10490                           ;ioports.c: 141: {
 10491                           ;ioports.c: 142: if(IOPORT.status_count[2] > 0)
 10492  0DD8  1683               	bsf	3,5	;RP0=1, select bank1
 10493  0DD9  1303               	bcf	3,6	;RP1=0, select bank1
 10494  0DDA  084E               	movf	(_IOPORT^(0+128)+46),w
 10495  0DDB  1903               	btfsc	3,2
 10496  0DDC  2DEA               	goto	l3897
 10497                           
 10498                           ;ioports.c: 143: {
 10499                           ;ioports.c: 144: IOPORT.status_count[2]--;
 10500  0DDD  3001               	movlw	1
 10501  0DDE  02CE               	subwf	(_IOPORT^(0+128)+46),f
 10502                           
 10503                           ;ioports.c: 145: if(IOPORT.status_count[2] == 0)
 10504  0DDF  084E               	movf	(_IOPORT^(0+128)+46),w
 10505  0DE0  1D03               	btfss	3,2
 10506  0DE1  2DEA               	goto	l3897
 10507                           
 10508                           ;ioports.c: 146: {
 10509                           ;ioports.c: 147: IOPORT.io[0].status &= 0b11111011;
 10510  0DE2  30FB               	movlw	251
 10511  0DE3  1283               	bcf	3,5	;RP0=0, select bank0
 10512  0DE4  1303               	bcf	3,6	;RP1=0, select bank0
 10513  0DE5  00A0               	movwf	??_IOUpdateIn
 10514  0DE6  0820               	movf	??_IOUpdateIn,w
 10515  0DE7  1683               	bsf	3,5	;RP0=1, select bank1
 10516  0DE8  1303               	bcf	3,6	;RP1=0, select bank1
 10517  0DE9  05A0               	andwf	_IOPORT^(0+128),f
 10518  0DEA                     l3897:	
 10519                           
 10520                           ;ioports.c: 148: }
 10521                           ;ioports.c: 149: }
 10522                           ;ioports.c: 150: }
 10523                           ;ioports.c: 152: if(PORTD & 0b00001000)
 10524  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
 10525  0DEB  1303               	bcf	3,6	;RP1=0, select bank0
 10526  0DEC  1D88               	btfss	8,3	;volatile
 10527  0DED  2E00               	goto	l3905
 10528                           
 10529                           ;ioports.c: 153: {
 10530                           ;ioports.c: 154: if(IOPORT.status_count[3] < 255)
 10531  0DEE  1683               	bsf	3,5	;RP0=1, select bank1
 10532  0DEF  1303               	bcf	3,6	;RP1=0, select bank1
 10533  0DF0  0A4F               	incf	(_IOPORT^(0+128)+47),w
 10534  0DF1  1903               	btfsc	3,2
 10535  0DF2  2E12               	goto	l3911
 10536                           
 10537                           ;ioports.c: 155: {
 10538                           ;ioports.c: 156: IOPORT.status_count[3]++;
 10539  0DF3  3001               	movlw	1
 10540  0DF4  1283               	bcf	3,5	;RP0=0, select bank0
 10541  0DF5  1303               	bcf	3,6	;RP1=0, select bank0
 10542  0DF6  00A0               	movwf	??_IOUpdateIn
 10543  0DF7  0820               	movf	??_IOUpdateIn,w
 10544  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
 10545  0DF9  1303               	bcf	3,6	;RP1=0, select bank1
 10546  0DFA  07CF               	addwf	(_IOPORT^(0+128)+47),f
 10547                           
 10548                           ;ioports.c: 157: if(IOPORT.status_count[3] == 255)
 10549  0DFB  0A4F               	incf	(_IOPORT^(0+128)+47),w
 10550  0DFC  1D03               	btfss	3,2
 10551  0DFD  2E12               	goto	l3911
 10552                           
 10553                           ;ioports.c: 158: {
 10554                           ;ioports.c: 159: IOPORT.io[0].status |= 0b00001000;
 10555  0DFE  15A0               	bsf	_IOPORT^(0+128),3
 10556                           
 10557                           ;ioports.c: 160: }
 10558                           ;ioports.c: 161: }
 10559                           ;ioports.c: 162: }
 10560  0DFF  2E12               	goto	l3911
 10561  0E00                     l3905:	
 10562                           
 10563                           ;ioports.c: 163: else
 10564                           ;ioports.c: 164: {
 10565                           ;ioports.c: 165: if(IOPORT.status_count[3] > 0)
 10566  0E00  1683               	bsf	3,5	;RP0=1, select bank1
 10567  0E01  1303               	bcf	3,6	;RP1=0, select bank1
 10568  0E02  084F               	movf	(_IOPORT^(0+128)+47),w
 10569  0E03  1903               	btfsc	3,2
 10570  0E04  2E12               	goto	l3911
 10571                           
 10572                           ;ioports.c: 166: {
 10573                           ;ioports.c: 167: IOPORT.status_count[3]--;
 10574  0E05  3001               	movlw	1
 10575  0E06  02CF               	subwf	(_IOPORT^(0+128)+47),f
 10576                           
 10577                           ;ioports.c: 168: if(IOPORT.status_count[3] == 0)
 10578  0E07  084F               	movf	(_IOPORT^(0+128)+47),w
 10579  0E08  1D03               	btfss	3,2
 10580  0E09  2E12               	goto	l3911
 10581                           
 10582                           ;ioports.c: 169: {
 10583                           ;ioports.c: 170: IOPORT.io[0].status &= 0b11110111;
 10584  0E0A  30F7               	movlw	247
 10585  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
 10586  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
 10587  0E0D  00A0               	movwf	??_IOUpdateIn
 10588  0E0E  0820               	movf	??_IOUpdateIn,w
 10589  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
 10590  0E10  1303               	bcf	3,6	;RP1=0, select bank1
 10591  0E11  05A0               	andwf	_IOPORT^(0+128),f
 10592  0E12                     l3911:	
 10593                           
 10594                           ;ioports.c: 171: }
 10595                           ;ioports.c: 172: }
 10596                           ;ioports.c: 173: }
 10597                           ;ioports.c: 175: if(PORTD & 0b00010000)
 10598  0E12  1283               	bcf	3,5	;RP0=0, select bank0
 10599  0E13  1303               	bcf	3,6	;RP1=0, select bank0
 10600  0E14  1E08               	btfss	8,4	;volatile
 10601  0E15  2E28               	goto	l3919
 10602                           
 10603                           ;ioports.c: 176: {
 10604                           ;ioports.c: 177: if(IOPORT.status_count[4] < 255)
 10605  0E16  1683               	bsf	3,5	;RP0=1, select bank1
 10606  0E17  1303               	bcf	3,6	;RP1=0, select bank1
 10607  0E18  0A50               	incf	(_IOPORT^(0+128)+48),w
 10608  0E19  1903               	btfsc	3,2
 10609  0E1A  2E3A               	goto	l3925
 10610                           
 10611                           ;ioports.c: 178: {
 10612                           ;ioports.c: 179: IOPORT.status_count[4]++;
 10613  0E1B  3001               	movlw	1
 10614  0E1C  1283               	bcf	3,5	;RP0=0, select bank0
 10615  0E1D  1303               	bcf	3,6	;RP1=0, select bank0
 10616  0E1E  00A0               	movwf	??_IOUpdateIn
 10617  0E1F  0820               	movf	??_IOUpdateIn,w
 10618  0E20  1683               	bsf	3,5	;RP0=1, select bank1
 10619  0E21  1303               	bcf	3,6	;RP1=0, select bank1
 10620  0E22  07D0               	addwf	(_IOPORT^(0+128)+48),f
 10621                           
 10622                           ;ioports.c: 180: if(IOPORT.status_count[4] == 255)
 10623  0E23  0A50               	incf	(_IOPORT^(0+128)+48),w
 10624  0E24  1D03               	btfss	3,2
 10625  0E25  2E3A               	goto	l3925
 10626                           
 10627                           ;ioports.c: 181: {
 10628                           ;ioports.c: 182: IOPORT.io[0].status |= 0b00010000;
 10629  0E26  1620               	bsf	_IOPORT^(0+128),4
 10630                           
 10631                           ;ioports.c: 183: }
 10632                           ;ioports.c: 184: }
 10633                           ;ioports.c: 185: }
 10634  0E27  2E3A               	goto	l3925
 10635  0E28                     l3919:	
 10636                           
 10637                           ;ioports.c: 186: else
 10638                           ;ioports.c: 187: {
 10639                           ;ioports.c: 188: if(IOPORT.status_count[4] > 0)
 10640  0E28  1683               	bsf	3,5	;RP0=1, select bank1
 10641  0E29  1303               	bcf	3,6	;RP1=0, select bank1
 10642  0E2A  0850               	movf	(_IOPORT^(0+128)+48),w
 10643  0E2B  1903               	btfsc	3,2
 10644  0E2C  2E3A               	goto	l3925
 10645                           
 10646                           ;ioports.c: 189: {
 10647                           ;ioports.c: 190: IOPORT.status_count[4]--;
 10648  0E2D  3001               	movlw	1
 10649  0E2E  02D0               	subwf	(_IOPORT^(0+128)+48),f
 10650                           
 10651                           ;ioports.c: 191: if(IOPORT.status_count[4] == 0)
 10652  0E2F  0850               	movf	(_IOPORT^(0+128)+48),w
 10653  0E30  1D03               	btfss	3,2
 10654  0E31  2E3A               	goto	l3925
 10655                           
 10656                           ;ioports.c: 192: {
 10657                           ;ioports.c: 193: IOPORT.io[0].status &= 0b11101111;
 10658  0E32  30EF               	movlw	239
 10659  0E33  1283               	bcf	3,5	;RP0=0, select bank0
 10660  0E34  1303               	bcf	3,6	;RP1=0, select bank0
 10661  0E35  00A0               	movwf	??_IOUpdateIn
 10662  0E36  0820               	movf	??_IOUpdateIn,w
 10663  0E37  1683               	bsf	3,5	;RP0=1, select bank1
 10664  0E38  1303               	bcf	3,6	;RP1=0, select bank1
 10665  0E39  05A0               	andwf	_IOPORT^(0+128),f
 10666  0E3A                     l3925:	
 10667                           
 10668                           ;ioports.c: 194: }
 10669                           ;ioports.c: 195: }
 10670                           ;ioports.c: 196: }
 10671                           ;ioports.c: 198: if(PORTD & 0b00100000)
 10672  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
 10673  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
 10674  0E3C  1E88               	btfss	8,5	;volatile
 10675  0E3D  2E50               	goto	l3933
 10676                           
 10677                           ;ioports.c: 199: {
 10678                           ;ioports.c: 200: if(IOPORT.status_count[5] < 255)
 10679  0E3E  1683               	bsf	3,5	;RP0=1, select bank1
 10680  0E3F  1303               	bcf	3,6	;RP1=0, select bank1
 10681  0E40  0A51               	incf	(_IOPORT^(0+128)+49),w
 10682  0E41  1903               	btfsc	3,2
 10683  0E42  2E62               	goto	l3939
 10684                           
 10685                           ;ioports.c: 201: {
 10686                           ;ioports.c: 202: IOPORT.status_count[5]++;
 10687  0E43  3001               	movlw	1
 10688  0E44  1283               	bcf	3,5	;RP0=0, select bank0
 10689  0E45  1303               	bcf	3,6	;RP1=0, select bank0
 10690  0E46  00A0               	movwf	??_IOUpdateIn
 10691  0E47  0820               	movf	??_IOUpdateIn,w
 10692  0E48  1683               	bsf	3,5	;RP0=1, select bank1
 10693  0E49  1303               	bcf	3,6	;RP1=0, select bank1
 10694  0E4A  07D1               	addwf	(_IOPORT^(0+128)+49),f
 10695                           
 10696                           ;ioports.c: 203: if(IOPORT.status_count[5] == 255)
 10697  0E4B  0A51               	incf	(_IOPORT^(0+128)+49),w
 10698  0E4C  1D03               	btfss	3,2
 10699  0E4D  2E62               	goto	l3939
 10700                           
 10701                           ;ioports.c: 204: {
 10702                           ;ioports.c: 205: IOPORT.io[0].status |= 0b00100000;
 10703  0E4E  16A0               	bsf	_IOPORT^(0+128),5
 10704                           
 10705                           ;ioports.c: 206: }
 10706                           ;ioports.c: 207: }
 10707                           ;ioports.c: 208: }
 10708  0E4F  2E62               	goto	l3939
 10709  0E50                     l3933:	
 10710                           
 10711                           ;ioports.c: 209: else
 10712                           ;ioports.c: 210: {
 10713                           ;ioports.c: 211: if(IOPORT.status_count[5] > 0)
 10714  0E50  1683               	bsf	3,5	;RP0=1, select bank1
 10715  0E51  1303               	bcf	3,6	;RP1=0, select bank1
 10716  0E52  0851               	movf	(_IOPORT^(0+128)+49),w
 10717  0E53  1903               	btfsc	3,2
 10718  0E54  2E62               	goto	l3939
 10719                           
 10720                           ;ioports.c: 212: {
 10721                           ;ioports.c: 213: IOPORT.status_count[5]--;
 10722  0E55  3001               	movlw	1
 10723  0E56  02D1               	subwf	(_IOPORT^(0+128)+49),f
 10724                           
 10725                           ;ioports.c: 214: if(IOPORT.status_count[5] == 0)
 10726  0E57  0851               	movf	(_IOPORT^(0+128)+49),w
 10727  0E58  1D03               	btfss	3,2
 10728  0E59  2E62               	goto	l3939
 10729                           
 10730                           ;ioports.c: 215: {
 10731                           ;ioports.c: 216: IOPORT.io[0].status &= 0b11011111;
 10732  0E5A  30DF               	movlw	223
 10733  0E5B  1283               	bcf	3,5	;RP0=0, select bank0
 10734  0E5C  1303               	bcf	3,6	;RP1=0, select bank0
 10735  0E5D  00A0               	movwf	??_IOUpdateIn
 10736  0E5E  0820               	movf	??_IOUpdateIn,w
 10737  0E5F  1683               	bsf	3,5	;RP0=1, select bank1
 10738  0E60  1303               	bcf	3,6	;RP1=0, select bank1
 10739  0E61  05A0               	andwf	_IOPORT^(0+128),f
 10740  0E62                     l3939:	
 10741                           
 10742                           ;ioports.c: 217: }
 10743                           ;ioports.c: 218: }
 10744                           ;ioports.c: 219: }
 10745                           ;ioports.c: 221: if(PORTD & 0b01000000)
 10746  0E62  1283               	bcf	3,5	;RP0=0, select bank0
 10747  0E63  1303               	bcf	3,6	;RP1=0, select bank0
 10748  0E64  1F08               	btfss	8,6	;volatile
 10749  0E65  2E78               	goto	l3947
 10750                           
 10751                           ;ioports.c: 222: {
 10752                           ;ioports.c: 223: if(IOPORT.status_count[6] < 255)
 10753  0E66  1683               	bsf	3,5	;RP0=1, select bank1
 10754  0E67  1303               	bcf	3,6	;RP1=0, select bank1
 10755  0E68  0A52               	incf	(_IOPORT^(0+128)+50),w
 10756  0E69  1903               	btfsc	3,2
 10757  0E6A  2E8A               	goto	l3953
 10758                           
 10759                           ;ioports.c: 224: {
 10760                           ;ioports.c: 225: IOPORT.status_count[6]++;
 10761  0E6B  3001               	movlw	1
 10762  0E6C  1283               	bcf	3,5	;RP0=0, select bank0
 10763  0E6D  1303               	bcf	3,6	;RP1=0, select bank0
 10764  0E6E  00A0               	movwf	??_IOUpdateIn
 10765  0E6F  0820               	movf	??_IOUpdateIn,w
 10766  0E70  1683               	bsf	3,5	;RP0=1, select bank1
 10767  0E71  1303               	bcf	3,6	;RP1=0, select bank1
 10768  0E72  07D2               	addwf	(_IOPORT^(0+128)+50),f
 10769                           
 10770                           ;ioports.c: 226: if(IOPORT.status_count[6] == 255)
 10771  0E73  0A52               	incf	(_IOPORT^(0+128)+50),w
 10772  0E74  1D03               	btfss	3,2
 10773  0E75  2E8A               	goto	l3953
 10774                           
 10775                           ;ioports.c: 227: {
 10776                           ;ioports.c: 228: IOPORT.io[0].status |= 0b01000000;
 10777  0E76  1720               	bsf	_IOPORT^(0+128),6
 10778                           
 10779                           ;ioports.c: 229: }
 10780                           ;ioports.c: 230: }
 10781                           ;ioports.c: 231: }
 10782  0E77  2E8A               	goto	l3953
 10783  0E78                     l3947:	
 10784                           
 10785                           ;ioports.c: 232: else
 10786                           ;ioports.c: 233: {
 10787                           ;ioports.c: 234: if(IOPORT.status_count[6] > 0)
 10788  0E78  1683               	bsf	3,5	;RP0=1, select bank1
 10789  0E79  1303               	bcf	3,6	;RP1=0, select bank1
 10790  0E7A  0852               	movf	(_IOPORT^(0+128)+50),w
 10791  0E7B  1903               	btfsc	3,2
 10792  0E7C  2E8A               	goto	l3953
 10793                           
 10794                           ;ioports.c: 235: {
 10795                           ;ioports.c: 236: IOPORT.status_count[6]--;
 10796  0E7D  3001               	movlw	1
 10797  0E7E  02D2               	subwf	(_IOPORT^(0+128)+50),f
 10798                           
 10799                           ;ioports.c: 237: if(IOPORT.status_count[6] == 0)
 10800  0E7F  0852               	movf	(_IOPORT^(0+128)+50),w
 10801  0E80  1D03               	btfss	3,2
 10802  0E81  2E8A               	goto	l3953
 10803                           
 10804                           ;ioports.c: 238: {
 10805                           ;ioports.c: 239: IOPORT.io[0].status &= 0b10111111;
 10806  0E82  30BF               	movlw	191
 10807  0E83  1283               	bcf	3,5	;RP0=0, select bank0
 10808  0E84  1303               	bcf	3,6	;RP1=0, select bank0
 10809  0E85  00A0               	movwf	??_IOUpdateIn
 10810  0E86  0820               	movf	??_IOUpdateIn,w
 10811  0E87  1683               	bsf	3,5	;RP0=1, select bank1
 10812  0E88  1303               	bcf	3,6	;RP1=0, select bank1
 10813  0E89  05A0               	andwf	_IOPORT^(0+128),f
 10814  0E8A                     l3953:	
 10815                           
 10816                           ;ioports.c: 240: }
 10817                           ;ioports.c: 241: }
 10818                           ;ioports.c: 242: }
 10819                           ;ioports.c: 244: if(PORTD & 0b10000000)
 10820  0E8A  1283               	bcf	3,5	;RP0=0, select bank0
 10821  0E8B  1303               	bcf	3,6	;RP1=0, select bank0
 10822  0E8C  1F88               	btfss	8,7	;volatile
 10823  0E8D  2EA0               	goto	l3961
 10824                           
 10825                           ;ioports.c: 245: {
 10826                           ;ioports.c: 246: if(IOPORT.status_count[7] < 255)
 10827  0E8E  1683               	bsf	3,5	;RP0=1, select bank1
 10828  0E8F  1303               	bcf	3,6	;RP1=0, select bank1
 10829  0E90  0A53               	incf	(_IOPORT^(0+128)+51),w
 10830  0E91  1903               	btfsc	3,2
 10831  0E92  2EB2               	goto	l3967
 10832                           
 10833                           ;ioports.c: 247: {
 10834                           ;ioports.c: 248: IOPORT.status_count[7]++;
 10835  0E93  3001               	movlw	1
 10836  0E94  1283               	bcf	3,5	;RP0=0, select bank0
 10837  0E95  1303               	bcf	3,6	;RP1=0, select bank0
 10838  0E96  00A0               	movwf	??_IOUpdateIn
 10839  0E97  0820               	movf	??_IOUpdateIn,w
 10840  0E98  1683               	bsf	3,5	;RP0=1, select bank1
 10841  0E99  1303               	bcf	3,6	;RP1=0, select bank1
 10842  0E9A  07D3               	addwf	(_IOPORT^(0+128)+51),f
 10843                           
 10844                           ;ioports.c: 249: if(IOPORT.status_count[7] == 255)
 10845  0E9B  0A53               	incf	(_IOPORT^(0+128)+51),w
 10846  0E9C  1D03               	btfss	3,2
 10847  0E9D  2EB2               	goto	l3967
 10848                           
 10849                           ;ioports.c: 250: {
 10850                           ;ioports.c: 251: IOPORT.io[0].status |= 0b10000000;
 10851  0E9E  17A0               	bsf	_IOPORT^(0+128),7
 10852                           
 10853                           ;ioports.c: 252: }
 10854                           ;ioports.c: 253: }
 10855                           ;ioports.c: 254: }
 10856  0E9F  2EB2               	goto	l3967
 10857  0EA0                     l3961:	
 10858                           
 10859                           ;ioports.c: 255: else
 10860                           ;ioports.c: 256: {
 10861                           ;ioports.c: 257: if(IOPORT.status_count[7] > 0)
 10862  0EA0  1683               	bsf	3,5	;RP0=1, select bank1
 10863  0EA1  1303               	bcf	3,6	;RP1=0, select bank1
 10864  0EA2  0853               	movf	(_IOPORT^(0+128)+51),w
 10865  0EA3  1903               	btfsc	3,2
 10866  0EA4  2EB2               	goto	l3967
 10867                           
 10868                           ;ioports.c: 258: {
 10869                           ;ioports.c: 259: IOPORT.status_count[7]--;
 10870  0EA5  3001               	movlw	1
 10871  0EA6  02D3               	subwf	(_IOPORT^(0+128)+51),f
 10872                           
 10873                           ;ioports.c: 260: if(IOPORT.status_count[7] == 0)
 10874  0EA7  0853               	movf	(_IOPORT^(0+128)+51),w
 10875  0EA8  1D03               	btfss	3,2
 10876  0EA9  2EB2               	goto	l3967
 10877                           
 10878                           ;ioports.c: 261: {
 10879                           ;ioports.c: 262: IOPORT.io[0].status &= 0b01111111;
 10880  0EAA  307F               	movlw	127
 10881  0EAB  1283               	bcf	3,5	;RP0=0, select bank0
 10882  0EAC  1303               	bcf	3,6	;RP1=0, select bank0
 10883  0EAD  00A0               	movwf	??_IOUpdateIn
 10884  0EAE  0820               	movf	??_IOUpdateIn,w
 10885  0EAF  1683               	bsf	3,5	;RP0=1, select bank1
 10886  0EB0  1303               	bcf	3,6	;RP1=0, select bank1
 10887  0EB1  05A0               	andwf	_IOPORT^(0+128),f
 10888  0EB2                     l3967:	
 10889                           
 10890                           ;ioports.c: 263: }
 10891                           ;ioports.c: 264: }
 10892                           ;ioports.c: 265: }
 10893                           ;ioports.c: 266: PORTB |= 0b00010000;
 10894  0EB2  1283               	bcf	3,5	;RP0=0, select bank0
 10895  0EB3  1303               	bcf	3,6	;RP1=0, select bank0
 10896  0EB4  1606               	bsf	6,4	;volatile
 10897                           
 10898                           ;ioports.c: 270: PORTB &= 0b01111111;
 10899  0EB5  307F               	movlw	127
 10900  0EB6  00A0               	movwf	??_IOUpdateIn
 10901  0EB7  0820               	movf	??_IOUpdateIn,w
 10902  0EB8  0586               	andwf	6,f	;volatile
 10903                           
 10904                           ;ioports.c: 271: __nop();
 10905  0EB9  0000               	nop
 10906                           
 10907                           ;ioports.c: 272: __nop();
 10908  0EBA  0000               	nop
 10909                           
 10910                           ;ioports.c: 273: __nop();
 10911  0EBB  0000               	nop
 10912                           
 10913                           ;ioports.c: 275: if(PORTD & 0b00000001)
 10914  0EBC  1283               	bcf	3,5	;RP0=0, select bank0
 10915  0EBD  1303               	bcf	3,6	;RP1=0, select bank0
 10916  0EBE  1C08               	btfss	8,0	;volatile
 10917  0EBF  2ED2               	goto	l3983
 10918                           
 10919                           ;ioports.c: 276: {
 10920                           ;ioports.c: 277: if(IOPORT.status_count[8] < 255)
 10921  0EC0  1683               	bsf	3,5	;RP0=1, select bank1
 10922  0EC1  1303               	bcf	3,6	;RP1=0, select bank1
 10923  0EC2  0A54               	incf	(_IOPORT^(0+128)+52),w
 10924  0EC3  1903               	btfsc	3,2
 10925  0EC4  2EE4               	goto	l3989
 10926                           
 10927                           ;ioports.c: 278: {
 10928                           ;ioports.c: 279: IOPORT.status_count[8]++;
 10929  0EC5  3001               	movlw	1
 10930  0EC6  1283               	bcf	3,5	;RP0=0, select bank0
 10931  0EC7  1303               	bcf	3,6	;RP1=0, select bank0
 10932  0EC8  00A0               	movwf	??_IOUpdateIn
 10933  0EC9  0820               	movf	??_IOUpdateIn,w
 10934  0ECA  1683               	bsf	3,5	;RP0=1, select bank1
 10935  0ECB  1303               	bcf	3,6	;RP1=0, select bank1
 10936  0ECC  07D4               	addwf	(_IOPORT^(0+128)+52),f
 10937                           
 10938                           ;ioports.c: 280: if(IOPORT.status_count[8] == 255)
 10939  0ECD  0A54               	incf	(_IOPORT^(0+128)+52),w
 10940  0ECE  1D03               	btfss	3,2
 10941  0ECF  2EE4               	goto	l3989
 10942                           
 10943                           ;ioports.c: 281: {
 10944                           ;ioports.c: 282: IOPORT.io[1].status |= 0b00000001;
 10945  0ED0  1423               	bsf	(_IOPORT^(0+128)+3),0
 10946                           
 10947                           ;ioports.c: 283: }
 10948                           ;ioports.c: 284: }
 10949                           ;ioports.c: 285: }
 10950  0ED1  2EE4               	goto	l3989
 10951  0ED2                     l3983:	
 10952                           
 10953                           ;ioports.c: 286: else
 10954                           ;ioports.c: 287: {
 10955                           ;ioports.c: 288: if(IOPORT.status_count[8] > 0)
 10956  0ED2  1683               	bsf	3,5	;RP0=1, select bank1
 10957  0ED3  1303               	bcf	3,6	;RP1=0, select bank1
 10958  0ED4  0854               	movf	(_IOPORT^(0+128)+52),w
 10959  0ED5  1903               	btfsc	3,2
 10960  0ED6  2EE4               	goto	l3989
 10961                           
 10962                           ;ioports.c: 289: {
 10963                           ;ioports.c: 290: IOPORT.status_count[8]--;
 10964  0ED7  3001               	movlw	1
 10965  0ED8  02D4               	subwf	(_IOPORT^(0+128)+52),f
 10966                           
 10967                           ;ioports.c: 291: if(IOPORT.status_count[8] == 0)
 10968  0ED9  0854               	movf	(_IOPORT^(0+128)+52),w
 10969  0EDA  1D03               	btfss	3,2
 10970  0EDB  2EE4               	goto	l3989
 10971                           
 10972                           ;ioports.c: 292: {
 10973                           ;ioports.c: 293: IOPORT.io[1].status &= 0b11111110;
 10974  0EDC  30FE               	movlw	254
 10975  0EDD  1283               	bcf	3,5	;RP0=0, select bank0
 10976  0EDE  1303               	bcf	3,6	;RP1=0, select bank0
 10977  0EDF  00A0               	movwf	??_IOUpdateIn
 10978  0EE0  0820               	movf	??_IOUpdateIn,w
 10979  0EE1  1683               	bsf	3,5	;RP0=1, select bank1
 10980  0EE2  1303               	bcf	3,6	;RP1=0, select bank1
 10981  0EE3  05A3               	andwf	(_IOPORT^(0+128)+3),f
 10982  0EE4                     l3989:	
 10983                           
 10984                           ;ioports.c: 294: }
 10985                           ;ioports.c: 295: }
 10986                           ;ioports.c: 296: }
 10987                           ;ioports.c: 298: if(PORTD & 0b00000010)
 10988  0EE4  1283               	bcf	3,5	;RP0=0, select bank0
 10989  0EE5  1303               	bcf	3,6	;RP1=0, select bank0
 10990  0EE6  1C88               	btfss	8,1	;volatile
 10991  0EE7  2EFA               	goto	l3997
 10992                           
 10993                           ;ioports.c: 299: {
 10994                           ;ioports.c: 300: if(IOPORT.status_count[9] < 255)
 10995  0EE8  1683               	bsf	3,5	;RP0=1, select bank1
 10996  0EE9  1303               	bcf	3,6	;RP1=0, select bank1
 10997  0EEA  0A55               	incf	(_IOPORT^(0+128)+53),w
 10998  0EEB  1903               	btfsc	3,2
 10999  0EEC  2F0C               	goto	l4003
 11000                           
 11001                           ;ioports.c: 301: {
 11002                           ;ioports.c: 302: IOPORT.status_count[9]++;
 11003  0EED  3001               	movlw	1
 11004  0EEE  1283               	bcf	3,5	;RP0=0, select bank0
 11005  0EEF  1303               	bcf	3,6	;RP1=0, select bank0
 11006  0EF0  00A0               	movwf	??_IOUpdateIn
 11007  0EF1  0820               	movf	??_IOUpdateIn,w
 11008  0EF2  1683               	bsf	3,5	;RP0=1, select bank1
 11009  0EF3  1303               	bcf	3,6	;RP1=0, select bank1
 11010  0EF4  07D5               	addwf	(_IOPORT^(0+128)+53),f
 11011                           
 11012                           ;ioports.c: 303: if(IOPORT.status_count[9] == 255)
 11013  0EF5  0A55               	incf	(_IOPORT^(0+128)+53),w
 11014  0EF6  1D03               	btfss	3,2
 11015  0EF7  2F0C               	goto	l4003
 11016                           
 11017                           ;ioports.c: 304: {
 11018                           ;ioports.c: 305: IOPORT.io[1].status |= 0b00000010;
 11019  0EF8  14A3               	bsf	(_IOPORT^(0+128)+3),1
 11020                           
 11021                           ;ioports.c: 306: }
 11022                           ;ioports.c: 307: }
 11023                           ;ioports.c: 308: }
 11024  0EF9  2F0C               	goto	l4003
 11025  0EFA                     l3997:	
 11026                           
 11027                           ;ioports.c: 309: else
 11028                           ;ioports.c: 310: {
 11029                           ;ioports.c: 311: if(IOPORT.status_count[9] > 0)
 11030  0EFA  1683               	bsf	3,5	;RP0=1, select bank1
 11031  0EFB  1303               	bcf	3,6	;RP1=0, select bank1
 11032  0EFC  0855               	movf	(_IOPORT^(0+128)+53),w
 11033  0EFD  1903               	btfsc	3,2
 11034  0EFE  2F0C               	goto	l4003
 11035                           
 11036                           ;ioports.c: 312: {
 11037                           ;ioports.c: 313: IOPORT.status_count[9]--;
 11038  0EFF  3001               	movlw	1
 11039  0F00  02D5               	subwf	(_IOPORT^(0+128)+53),f
 11040                           
 11041                           ;ioports.c: 314: if(IOPORT.status_count[9] == 0)
 11042  0F01  0855               	movf	(_IOPORT^(0+128)+53),w
 11043  0F02  1D03               	btfss	3,2
 11044  0F03  2F0C               	goto	l4003
 11045                           
 11046                           ;ioports.c: 315: {
 11047                           ;ioports.c: 316: IOPORT.io[1].status &= 0b11111101;
 11048  0F04  30FD               	movlw	253
 11049  0F05  1283               	bcf	3,5	;RP0=0, select bank0
 11050  0F06  1303               	bcf	3,6	;RP1=0, select bank0
 11051  0F07  00A0               	movwf	??_IOUpdateIn
 11052  0F08  0820               	movf	??_IOUpdateIn,w
 11053  0F09  1683               	bsf	3,5	;RP0=1, select bank1
 11054  0F0A  1303               	bcf	3,6	;RP1=0, select bank1
 11055  0F0B  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11056  0F0C                     l4003:	
 11057                           
 11058                           ;ioports.c: 317: }
 11059                           ;ioports.c: 318: }
 11060                           ;ioports.c: 319: }
 11061                           ;ioports.c: 321: if(PORTD & 0b00000100)
 11062  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
 11063  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
 11064  0F0E  1D08               	btfss	8,2	;volatile
 11065  0F0F  2F22               	goto	l4011
 11066                           
 11067                           ;ioports.c: 322: {
 11068                           ;ioports.c: 323: if(IOPORT.status_count[10] < 255)
 11069  0F10  1683               	bsf	3,5	;RP0=1, select bank1
 11070  0F11  1303               	bcf	3,6	;RP1=0, select bank1
 11071  0F12  0A56               	incf	(_IOPORT^(0+128)+54),w
 11072  0F13  1903               	btfsc	3,2
 11073  0F14  2F34               	goto	l4017
 11074                           
 11075                           ;ioports.c: 324: {
 11076                           ;ioports.c: 325: IOPORT.status_count[10]++;
 11077  0F15  3001               	movlw	1
 11078  0F16  1283               	bcf	3,5	;RP0=0, select bank0
 11079  0F17  1303               	bcf	3,6	;RP1=0, select bank0
 11080  0F18  00A0               	movwf	??_IOUpdateIn
 11081  0F19  0820               	movf	??_IOUpdateIn,w
 11082  0F1A  1683               	bsf	3,5	;RP0=1, select bank1
 11083  0F1B  1303               	bcf	3,6	;RP1=0, select bank1
 11084  0F1C  07D6               	addwf	(_IOPORT^(0+128)+54),f
 11085                           
 11086                           ;ioports.c: 326: if(IOPORT.status_count[10] == 255)
 11087  0F1D  0A56               	incf	(_IOPORT^(0+128)+54),w
 11088  0F1E  1D03               	btfss	3,2
 11089  0F1F  2F34               	goto	l4017
 11090                           
 11091                           ;ioports.c: 327: {
 11092                           ;ioports.c: 328: IOPORT.io[1].status |= 0b00000100;
 11093  0F20  1523               	bsf	(_IOPORT^(0+128)+3),2
 11094                           
 11095                           ;ioports.c: 329: }
 11096                           ;ioports.c: 330: }
 11097                           ;ioports.c: 331: }
 11098  0F21  2F34               	goto	l4017
 11099  0F22                     l4011:	
 11100                           
 11101                           ;ioports.c: 332: else
 11102                           ;ioports.c: 333: {
 11103                           ;ioports.c: 334: if(IOPORT.status_count[10] > 0)
 11104  0F22  1683               	bsf	3,5	;RP0=1, select bank1
 11105  0F23  1303               	bcf	3,6	;RP1=0, select bank1
 11106  0F24  0856               	movf	(_IOPORT^(0+128)+54),w
 11107  0F25  1903               	btfsc	3,2
 11108  0F26  2F34               	goto	l4017
 11109                           
 11110                           ;ioports.c: 335: {
 11111                           ;ioports.c: 336: IOPORT.status_count[10]--;
 11112  0F27  3001               	movlw	1
 11113  0F28  02D6               	subwf	(_IOPORT^(0+128)+54),f
 11114                           
 11115                           ;ioports.c: 337: if(IOPORT.status_count[10] == 0)
 11116  0F29  0856               	movf	(_IOPORT^(0+128)+54),w
 11117  0F2A  1D03               	btfss	3,2
 11118  0F2B  2F34               	goto	l4017
 11119                           
 11120                           ;ioports.c: 338: {
 11121                           ;ioports.c: 339: IOPORT.io[1].status &= 0b11111011;
 11122  0F2C  30FB               	movlw	251
 11123  0F2D  1283               	bcf	3,5	;RP0=0, select bank0
 11124  0F2E  1303               	bcf	3,6	;RP1=0, select bank0
 11125  0F2F  00A0               	movwf	??_IOUpdateIn
 11126  0F30  0820               	movf	??_IOUpdateIn,w
 11127  0F31  1683               	bsf	3,5	;RP0=1, select bank1
 11128  0F32  1303               	bcf	3,6	;RP1=0, select bank1
 11129  0F33  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11130  0F34                     l4017:	
 11131                           
 11132                           ;ioports.c: 340: }
 11133                           ;ioports.c: 341: }
 11134                           ;ioports.c: 342: }
 11135                           ;ioports.c: 344: if(PORTD & 0b00001000)
 11136  0F34  1283               	bcf	3,5	;RP0=0, select bank0
 11137  0F35  1303               	bcf	3,6	;RP1=0, select bank0
 11138  0F36  1D88               	btfss	8,3	;volatile
 11139  0F37  2F4A               	goto	l4025
 11140                           
 11141                           ;ioports.c: 345: {
 11142                           ;ioports.c: 346: if(IOPORT.status_count[11] < 255)
 11143  0F38  1683               	bsf	3,5	;RP0=1, select bank1
 11144  0F39  1303               	bcf	3,6	;RP1=0, select bank1
 11145  0F3A  0A57               	incf	(_IOPORT^(0+128)+55),w
 11146  0F3B  1903               	btfsc	3,2
 11147  0F3C  2F5C               	goto	l4031
 11148                           
 11149                           ;ioports.c: 347: {
 11150                           ;ioports.c: 348: IOPORT.status_count[11]++;
 11151  0F3D  3001               	movlw	1
 11152  0F3E  1283               	bcf	3,5	;RP0=0, select bank0
 11153  0F3F  1303               	bcf	3,6	;RP1=0, select bank0
 11154  0F40  00A0               	movwf	??_IOUpdateIn
 11155  0F41  0820               	movf	??_IOUpdateIn,w
 11156  0F42  1683               	bsf	3,5	;RP0=1, select bank1
 11157  0F43  1303               	bcf	3,6	;RP1=0, select bank1
 11158  0F44  07D7               	addwf	(_IOPORT^(0+128)+55),f
 11159                           
 11160                           ;ioports.c: 349: if(IOPORT.status_count[11] == 255)
 11161  0F45  0A57               	incf	(_IOPORT^(0+128)+55),w
 11162  0F46  1D03               	btfss	3,2
 11163  0F47  2F5C               	goto	l4031
 11164                           
 11165                           ;ioports.c: 350: {
 11166                           ;ioports.c: 351: IOPORT.io[1].status |= 0b00001000;
 11167  0F48  15A3               	bsf	(_IOPORT^(0+128)+3),3
 11168                           
 11169                           ;ioports.c: 352: }
 11170                           ;ioports.c: 353: }
 11171                           ;ioports.c: 354: }
 11172  0F49  2F5C               	goto	l4031
 11173  0F4A                     l4025:	
 11174                           
 11175                           ;ioports.c: 355: else
 11176                           ;ioports.c: 356: {
 11177                           ;ioports.c: 357: if(IOPORT.status_count[11] > 0)
 11178  0F4A  1683               	bsf	3,5	;RP0=1, select bank1
 11179  0F4B  1303               	bcf	3,6	;RP1=0, select bank1
 11180  0F4C  0857               	movf	(_IOPORT^(0+128)+55),w
 11181  0F4D  1903               	btfsc	3,2
 11182  0F4E  2F5C               	goto	l4031
 11183                           
 11184                           ;ioports.c: 358: {
 11185                           ;ioports.c: 359: IOPORT.status_count[11]--;
 11186  0F4F  3001               	movlw	1
 11187  0F50  02D7               	subwf	(_IOPORT^(0+128)+55),f
 11188                           
 11189                           ;ioports.c: 360: if(IOPORT.status_count[11] == 0)
 11190  0F51  0857               	movf	(_IOPORT^(0+128)+55),w
 11191  0F52  1D03               	btfss	3,2
 11192  0F53  2F5C               	goto	l4031
 11193                           
 11194                           ;ioports.c: 361: {
 11195                           ;ioports.c: 362: IOPORT.io[1].status &= 0b11110111;
 11196  0F54  30F7               	movlw	247
 11197  0F55  1283               	bcf	3,5	;RP0=0, select bank0
 11198  0F56  1303               	bcf	3,6	;RP1=0, select bank0
 11199  0F57  00A0               	movwf	??_IOUpdateIn
 11200  0F58  0820               	movf	??_IOUpdateIn,w
 11201  0F59  1683               	bsf	3,5	;RP0=1, select bank1
 11202  0F5A  1303               	bcf	3,6	;RP1=0, select bank1
 11203  0F5B  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11204  0F5C                     l4031:	
 11205                           
 11206                           ;ioports.c: 363: }
 11207                           ;ioports.c: 364: }
 11208                           ;ioports.c: 365: }
 11209                           ;ioports.c: 367: if(PORTD & 0b00010000)
 11210  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
 11211  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
 11212  0F5E  1E08               	btfss	8,4	;volatile
 11213  0F5F  2F72               	goto	l4039
 11214                           
 11215                           ;ioports.c: 368: {
 11216                           ;ioports.c: 369: if(IOPORT.status_count[12] < 255)
 11217  0F60  1683               	bsf	3,5	;RP0=1, select bank1
 11218  0F61  1303               	bcf	3,6	;RP1=0, select bank1
 11219  0F62  0A58               	incf	(_IOPORT^(0+128)+56),w
 11220  0F63  1903               	btfsc	3,2
 11221  0F64  2F84               	goto	l4045
 11222                           
 11223                           ;ioports.c: 370: {
 11224                           ;ioports.c: 371: IOPORT.status_count[12]++;
 11225  0F65  3001               	movlw	1
 11226  0F66  1283               	bcf	3,5	;RP0=0, select bank0
 11227  0F67  1303               	bcf	3,6	;RP1=0, select bank0
 11228  0F68  00A0               	movwf	??_IOUpdateIn
 11229  0F69  0820               	movf	??_IOUpdateIn,w
 11230  0F6A  1683               	bsf	3,5	;RP0=1, select bank1
 11231  0F6B  1303               	bcf	3,6	;RP1=0, select bank1
 11232  0F6C  07D8               	addwf	(_IOPORT^(0+128)+56),f
 11233                           
 11234                           ;ioports.c: 372: if(IOPORT.status_count[12] == 255)
 11235  0F6D  0A58               	incf	(_IOPORT^(0+128)+56),w
 11236  0F6E  1D03               	btfss	3,2
 11237  0F6F  2F84               	goto	l4045
 11238                           
 11239                           ;ioports.c: 373: {
 11240                           ;ioports.c: 374: IOPORT.io[1].status |= 0b00010000;
 11241  0F70  1623               	bsf	(_IOPORT^(0+128)+3),4
 11242                           
 11243                           ;ioports.c: 375: }
 11244                           ;ioports.c: 376: }
 11245                           ;ioports.c: 377: }
 11246  0F71  2F84               	goto	l4045
 11247  0F72                     l4039:	
 11248                           
 11249                           ;ioports.c: 378: else
 11250                           ;ioports.c: 379: {
 11251                           ;ioports.c: 380: if(IOPORT.status_count[12] > 0)
 11252  0F72  1683               	bsf	3,5	;RP0=1, select bank1
 11253  0F73  1303               	bcf	3,6	;RP1=0, select bank1
 11254  0F74  0858               	movf	(_IOPORT^(0+128)+56),w
 11255  0F75  1903               	btfsc	3,2
 11256  0F76  2F84               	goto	l4045
 11257                           
 11258                           ;ioports.c: 381: {
 11259                           ;ioports.c: 382: IOPORT.status_count[12]--;
 11260  0F77  3001               	movlw	1
 11261  0F78  02D8               	subwf	(_IOPORT^(0+128)+56),f
 11262                           
 11263                           ;ioports.c: 383: if(IOPORT.status_count[12] == 0)
 11264  0F79  0858               	movf	(_IOPORT^(0+128)+56),w
 11265  0F7A  1D03               	btfss	3,2
 11266  0F7B  2F84               	goto	l4045
 11267                           
 11268                           ;ioports.c: 384: {
 11269                           ;ioports.c: 385: IOPORT.io[1].status &= 0b11101111;
 11270  0F7C  30EF               	movlw	239
 11271  0F7D  1283               	bcf	3,5	;RP0=0, select bank0
 11272  0F7E  1303               	bcf	3,6	;RP1=0, select bank0
 11273  0F7F  00A0               	movwf	??_IOUpdateIn
 11274  0F80  0820               	movf	??_IOUpdateIn,w
 11275  0F81  1683               	bsf	3,5	;RP0=1, select bank1
 11276  0F82  1303               	bcf	3,6	;RP1=0, select bank1
 11277  0F83  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11278  0F84                     l4045:	
 11279                           
 11280                           ;ioports.c: 386: }
 11281                           ;ioports.c: 387: }
 11282                           ;ioports.c: 388: }
 11283                           ;ioports.c: 390: if(PORTD & 0b00100000)
 11284  0F84  1283               	bcf	3,5	;RP0=0, select bank0
 11285  0F85  1303               	bcf	3,6	;RP1=0, select bank0
 11286  0F86  1E88               	btfss	8,5	;volatile
 11287  0F87  2F9A               	goto	l4053
 11288                           
 11289                           ;ioports.c: 391: {
 11290                           ;ioports.c: 392: if(IOPORT.status_count[13] < 255)
 11291  0F88  1683               	bsf	3,5	;RP0=1, select bank1
 11292  0F89  1303               	bcf	3,6	;RP1=0, select bank1
 11293  0F8A  0A59               	incf	(_IOPORT^(0+128)+57),w
 11294  0F8B  1903               	btfsc	3,2
 11295  0F8C  2FAC               	goto	l4059
 11296                           
 11297                           ;ioports.c: 393: {
 11298                           ;ioports.c: 394: IOPORT.status_count[13]++;
 11299  0F8D  3001               	movlw	1
 11300  0F8E  1283               	bcf	3,5	;RP0=0, select bank0
 11301  0F8F  1303               	bcf	3,6	;RP1=0, select bank0
 11302  0F90  00A0               	movwf	??_IOUpdateIn
 11303  0F91  0820               	movf	??_IOUpdateIn,w
 11304  0F92  1683               	bsf	3,5	;RP0=1, select bank1
 11305  0F93  1303               	bcf	3,6	;RP1=0, select bank1
 11306  0F94  07D9               	addwf	(_IOPORT^(0+128)+57),f
 11307                           
 11308                           ;ioports.c: 395: if(IOPORT.status_count[13] == 255)
 11309  0F95  0A59               	incf	(_IOPORT^(0+128)+57),w
 11310  0F96  1D03               	btfss	3,2
 11311  0F97  2FAC               	goto	l4059
 11312                           
 11313                           ;ioports.c: 396: {
 11314                           ;ioports.c: 397: IOPORT.io[1].status |= 0b00100000;
 11315  0F98  16A3               	bsf	(_IOPORT^(0+128)+3),5
 11316                           
 11317                           ;ioports.c: 398: }
 11318                           ;ioports.c: 399: }
 11319                           ;ioports.c: 400: }
 11320  0F99  2FAC               	goto	l4059
 11321  0F9A                     l4053:	
 11322                           
 11323                           ;ioports.c: 401: else
 11324                           ;ioports.c: 402: {
 11325                           ;ioports.c: 403: if(IOPORT.status_count[13] > 0)
 11326  0F9A  1683               	bsf	3,5	;RP0=1, select bank1
 11327  0F9B  1303               	bcf	3,6	;RP1=0, select bank1
 11328  0F9C  0859               	movf	(_IOPORT^(0+128)+57),w
 11329  0F9D  1903               	btfsc	3,2
 11330  0F9E  2FAC               	goto	l4059
 11331                           
 11332                           ;ioports.c: 404: {
 11333                           ;ioports.c: 405: IOPORT.status_count[13]--;
 11334  0F9F  3001               	movlw	1
 11335  0FA0  02D9               	subwf	(_IOPORT^(0+128)+57),f
 11336                           
 11337                           ;ioports.c: 406: if(IOPORT.status_count[13] == 0)
 11338  0FA1  0859               	movf	(_IOPORT^(0+128)+57),w
 11339  0FA2  1D03               	btfss	3,2
 11340  0FA3  2FAC               	goto	l4059
 11341                           
 11342                           ;ioports.c: 407: {
 11343                           ;ioports.c: 408: IOPORT.io[1].status &= 0b11011111;
 11344  0FA4  30DF               	movlw	223
 11345  0FA5  1283               	bcf	3,5	;RP0=0, select bank0
 11346  0FA6  1303               	bcf	3,6	;RP1=0, select bank0
 11347  0FA7  00A0               	movwf	??_IOUpdateIn
 11348  0FA8  0820               	movf	??_IOUpdateIn,w
 11349  0FA9  1683               	bsf	3,5	;RP0=1, select bank1
 11350  0FAA  1303               	bcf	3,6	;RP1=0, select bank1
 11351  0FAB  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11352  0FAC                     l4059:	
 11353                           
 11354                           ;ioports.c: 409: }
 11355                           ;ioports.c: 410: }
 11356                           ;ioports.c: 411: }
 11357                           ;ioports.c: 413: if(PORTD & 0b01000000)
 11358  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
 11359  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
 11360  0FAE  1F08               	btfss	8,6	;volatile
 11361  0FAF  2FC2               	goto	l4067
 11362                           
 11363                           ;ioports.c: 414: {
 11364                           ;ioports.c: 415: if(IOPORT.status_count[14] < 255)
 11365  0FB0  1683               	bsf	3,5	;RP0=1, select bank1
 11366  0FB1  1303               	bcf	3,6	;RP1=0, select bank1
 11367  0FB2  0A5A               	incf	(_IOPORT^(0+128)+58),w
 11368  0FB3  1903               	btfsc	3,2
 11369  0FB4  2FD4               	goto	l4073
 11370                           
 11371                           ;ioports.c: 416: {
 11372                           ;ioports.c: 417: IOPORT.status_count[14]++;
 11373  0FB5  3001               	movlw	1
 11374  0FB6  1283               	bcf	3,5	;RP0=0, select bank0
 11375  0FB7  1303               	bcf	3,6	;RP1=0, select bank0
 11376  0FB8  00A0               	movwf	??_IOUpdateIn
 11377  0FB9  0820               	movf	??_IOUpdateIn,w
 11378  0FBA  1683               	bsf	3,5	;RP0=1, select bank1
 11379  0FBB  1303               	bcf	3,6	;RP1=0, select bank1
 11380  0FBC  07DA               	addwf	(_IOPORT^(0+128)+58),f
 11381                           
 11382                           ;ioports.c: 418: if(IOPORT.status_count[14] == 255)
 11383  0FBD  0A5A               	incf	(_IOPORT^(0+128)+58),w
 11384  0FBE  1D03               	btfss	3,2
 11385  0FBF  2FD4               	goto	l4073
 11386                           
 11387                           ;ioports.c: 419: {
 11388                           ;ioports.c: 420: IOPORT.io[1].status |= 0b01000000;
 11389  0FC0  1723               	bsf	(_IOPORT^(0+128)+3),6
 11390                           
 11391                           ;ioports.c: 421: }
 11392                           ;ioports.c: 422: }
 11393                           ;ioports.c: 423: }
 11394  0FC1  2FD4               	goto	l4073
 11395  0FC2                     l4067:	
 11396                           
 11397                           ;ioports.c: 424: else
 11398                           ;ioports.c: 425: {
 11399                           ;ioports.c: 426: if(IOPORT.status_count[14] > 0)
 11400  0FC2  1683               	bsf	3,5	;RP0=1, select bank1
 11401  0FC3  1303               	bcf	3,6	;RP1=0, select bank1
 11402  0FC4  085A               	movf	(_IOPORT^(0+128)+58),w
 11403  0FC5  1903               	btfsc	3,2
 11404  0FC6  2FD4               	goto	l4073
 11405                           
 11406                           ;ioports.c: 427: {
 11407                           ;ioports.c: 428: IOPORT.status_count[14]--;
 11408  0FC7  3001               	movlw	1
 11409  0FC8  02DA               	subwf	(_IOPORT^(0+128)+58),f
 11410                           
 11411                           ;ioports.c: 429: if(IOPORT.status_count[14] == 0)
 11412  0FC9  085A               	movf	(_IOPORT^(0+128)+58),w
 11413  0FCA  1D03               	btfss	3,2
 11414  0FCB  2FD4               	goto	l4073
 11415                           
 11416                           ;ioports.c: 430: {
 11417                           ;ioports.c: 431: IOPORT.io[1].status &= 0b10111111;
 11418  0FCC  30BF               	movlw	191
 11419  0FCD  1283               	bcf	3,5	;RP0=0, select bank0
 11420  0FCE  1303               	bcf	3,6	;RP1=0, select bank0
 11421  0FCF  00A0               	movwf	??_IOUpdateIn
 11422  0FD0  0820               	movf	??_IOUpdateIn,w
 11423  0FD1  1683               	bsf	3,5	;RP0=1, select bank1
 11424  0FD2  1303               	bcf	3,6	;RP1=0, select bank1
 11425  0FD3  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11426  0FD4                     l4073:	
 11427                           
 11428                           ;ioports.c: 432: }
 11429                           ;ioports.c: 433: }
 11430                           ;ioports.c: 434: }
 11431                           ;ioports.c: 436: if(PORTD & 0b10000000)
 11432  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
 11433  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
 11434  0FD6  1F88               	btfss	8,7	;volatile
 11435  0FD7  2FEA               	goto	l4081
 11436                           
 11437                           ;ioports.c: 437: {
 11438                           ;ioports.c: 438: if(IOPORT.status_count[15] < 255)
 11439  0FD8  1683               	bsf	3,5	;RP0=1, select bank1
 11440  0FD9  1303               	bcf	3,6	;RP1=0, select bank1
 11441  0FDA  0A5B               	incf	(_IOPORT^(0+128)+59),w
 11442  0FDB  1903               	btfsc	3,2
 11443  0FDC  2FFC               	goto	l4087
 11444                           
 11445                           ;ioports.c: 439: {
 11446                           ;ioports.c: 440: IOPORT.status_count[15]++;
 11447  0FDD  3001               	movlw	1
 11448  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
 11449  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
 11450  0FE0  00A0               	movwf	??_IOUpdateIn
 11451  0FE1  0820               	movf	??_IOUpdateIn,w
 11452  0FE2  1683               	bsf	3,5	;RP0=1, select bank1
 11453  0FE3  1303               	bcf	3,6	;RP1=0, select bank1
 11454  0FE4  07DB               	addwf	(_IOPORT^(0+128)+59),f
 11455                           
 11456                           ;ioports.c: 441: if(IOPORT.status_count[15] == 255)
 11457  0FE5  0A5B               	incf	(_IOPORT^(0+128)+59),w
 11458  0FE6  1D03               	btfss	3,2
 11459  0FE7  2FFC               	goto	l4087
 11460                           
 11461                           ;ioports.c: 442: {
 11462                           ;ioports.c: 443: IOPORT.io[1].status |= 0b10000000;
 11463  0FE8  17A3               	bsf	(_IOPORT^(0+128)+3),7
 11464                           
 11465                           ;ioports.c: 444: }
 11466                           ;ioports.c: 445: }
 11467                           ;ioports.c: 446: }
 11468  0FE9  2FFC               	goto	l4087
 11469  0FEA                     l4081:	
 11470                           
 11471                           ;ioports.c: 447: else
 11472                           ;ioports.c: 448: {
 11473                           ;ioports.c: 449: if(IOPORT.status_count[15] > 0)
 11474  0FEA  1683               	bsf	3,5	;RP0=1, select bank1
 11475  0FEB  1303               	bcf	3,6	;RP1=0, select bank1
 11476  0FEC  085B               	movf	(_IOPORT^(0+128)+59),w
 11477  0FED  1903               	btfsc	3,2
 11478  0FEE  2FFC               	goto	l4087
 11479                           
 11480                           ;ioports.c: 450: {
 11481                           ;ioports.c: 451: IOPORT.status_count[15]--;
 11482  0FEF  3001               	movlw	1
 11483  0FF0  02DB               	subwf	(_IOPORT^(0+128)+59),f
 11484                           
 11485                           ;ioports.c: 452: if(IOPORT.status_count[15] == 0)
 11486  0FF1  085B               	movf	(_IOPORT^(0+128)+59),w
 11487  0FF2  1D03               	btfss	3,2
 11488  0FF3  2FFC               	goto	l4087
 11489                           
 11490                           ;ioports.c: 453: {
 11491                           ;ioports.c: 454: IOPORT.io[1].status &= 0b01111111;
 11492  0FF4  307F               	movlw	127
 11493  0FF5  1283               	bcf	3,5	;RP0=0, select bank0
 11494  0FF6  1303               	bcf	3,6	;RP1=0, select bank0
 11495  0FF7  00A0               	movwf	??_IOUpdateIn
 11496  0FF8  0820               	movf	??_IOUpdateIn,w
 11497  0FF9  1683               	bsf	3,5	;RP0=1, select bank1
 11498  0FFA  1303               	bcf	3,6	;RP1=0, select bank1
 11499  0FFB  05A3               	andwf	(_IOPORT^(0+128)+3),f
 11500  0FFC                     l4087:	
 11501                           
 11502                           ;ioports.c: 455: }
 11503                           ;ioports.c: 456: }
 11504                           ;ioports.c: 457: }
 11505                           ;ioports.c: 458: PORTB |= 0b10000000;
 11506  0FFC  1283               	bcf	3,5	;RP0=0, select bank0
 11507  0FFD  1303               	bcf	3,6	;RP1=0, select bank0
 11508  0FFE  1786               	bsf	6,7	;volatile
 11509  0FFF  0008               	return
 11510  1000                     __end_of_IOUpdateIn:	
 11511                           
 11512                           	psect	text38
 11513  1E6F                     __ptext38:	
 11514 ;; *************** function _IOResetChanges *****************
 11515 ;; Defined at:
 11516 ;;		line 700 in file "ioports.c"
 11517 ;; Parameters:    Size  Location     Type
 11518 ;;  io              1    wreg     unsigned char 
 11519 ;;  reset           1    0[BANK0 ] unsigned char 
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;  io              1    2[BANK0 ] unsigned char 
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  1    wreg      void 
 11524 ;; Registers used:
 11525 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11531 ;;      Params:         0       1       0       0       0
 11532 ;;      Locals:         0       1       0       0       0
 11533 ;;      Temps:          0       1       0       0       0
 11534 ;;      Totals:         0       3       0       0       0
 11535 ;;Total ram usage:        3 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    3
 11538 ;; This function calls:
 11539 ;;		Nothing
 11540 ;; This function is called by:
 11541 ;;		_main
 11542 ;; This function uses a non-reentrant model
 11543 ;;
 11544                           
 11545                           
 11546                           ;psect for function _IOResetChanges
 11547  1E6F                     _IOResetChanges:	
 11548                           
 11549                           ;incstack = 0
 11550                           ; Regs used in _IOResetChanges: [wreg-fsr0h+status,2+status,0]
 11551                           ;IOResetChanges@io stored from wreg
 11552  1E6F  1283               	bcf	3,5	;RP0=0, select bank0
 11553  1E70  1303               	bcf	3,6	;RP1=0, select bank0
 11554  1E71  00A2               	movwf	IOResetChanges@io
 11555                           
 11556                           ;ioports.c: 702: switch(io)
 11557  1E72  2E9A               	goto	l4757
 11558  1E73                     l4747:	
 11559                           ;ioports.c: 703: {
 11560                           ;ioports.c: 704: case '1':
 11561                           
 11562                           
 11563                           ;ioports.c: 705: IOPORT.io[0].last_status = reset;
 11564  1E73  0820               	movf	IOResetChanges@reset,w
 11565  1E74  00A1               	movwf	??_IOResetChanges
 11566  1E75  0821               	movf	??_IOResetChanges,w
 11567  1E76  1683               	bsf	3,5	;RP0=1, select bank1
 11568  1E77  1303               	bcf	3,6	;RP1=0, select bank1
 11569  1E78  00A1               	movwf	(_IOPORT^(0+128)+1)
 11570                           
 11571                           ;ioports.c: 706: break;
 11572  1E79  0008               	return
 11573  1E7A                     l4749:	
 11574                           ;ioports.c: 707: case '2':
 11575                           
 11576                           
 11577                           ;ioports.c: 708: IOPORT.io[1].last_status = reset;
 11578  1E7A  1283               	bcf	3,5	;RP0=0, select bank0
 11579  1E7B  0820               	movf	IOResetChanges@reset,w
 11580  1E7C  00A1               	movwf	??_IOResetChanges
 11581  1E7D  0821               	movf	??_IOResetChanges,w
 11582  1E7E  1683               	bsf	3,5	;RP0=1, select bank1
 11583  1E7F  1303               	bcf	3,6	;RP1=0, select bank1
 11584  1E80  00A4               	movwf	(_IOPORT^(0+128)+4)
 11585                           
 11586                           ;ioports.c: 709: break;
 11587  1E81  0008               	return
 11588  1E82                     l4751:	
 11589                           ;ioports.c: 710: case '3':
 11590                           
 11591                           
 11592                           ;ioports.c: 711: IOPORT.io[2].notif = IOPORT.io[2].last_status ^ reset;
 11593  1E82  1683               	bsf	3,5	;RP0=1, select bank1
 11594  1E83  1303               	bcf	3,6	;RP1=0, select bank1
 11595  1E84  0827               	movf	(_IOPORT^(0+128)+7),w
 11596  1E85  1283               	bcf	3,5	;RP0=0, select bank0
 11597  1E86  1303               	bcf	3,6	;RP1=0, select bank0
 11598  1E87  0620               	xorwf	IOResetChanges@reset,w
 11599  1E88  00A1               	movwf	??_IOResetChanges
 11600  1E89  0821               	movf	??_IOResetChanges,w
 11601  1E8A  1683               	bsf	3,5	;RP0=1, select bank1
 11602  1E8B  1303               	bcf	3,6	;RP1=0, select bank1
 11603  1E8C  00A8               	movwf	(_IOPORT^(0+128)+8)
 11604                           
 11605                           ;ioports.c: 712: break;
 11606  1E8D  0008               	return
 11607  1E8E                     l4753:	
 11608                           ;ioports.c: 713: case '4':
 11609                           
 11610                           
 11611                           ;ioports.c: 714: IOPORT.io[3].notif = IOPORT.io[3].last_status ^ reset;
 11612  1E8E  1683               	bsf	3,5	;RP0=1, select bank1
 11613  1E8F  1303               	bcf	3,6	;RP1=0, select bank1
 11614  1E90  082A               	movf	(_IOPORT^(0+128)+10),w
 11615  1E91  1283               	bcf	3,5	;RP0=0, select bank0
 11616  1E92  1303               	bcf	3,6	;RP1=0, select bank0
 11617  1E93  0620               	xorwf	IOResetChanges@reset,w
 11618  1E94  00A1               	movwf	??_IOResetChanges
 11619  1E95  0821               	movf	??_IOResetChanges,w
 11620  1E96  1683               	bsf	3,5	;RP0=1, select bank1
 11621  1E97  1303               	bcf	3,6	;RP1=0, select bank1
 11622  1E98  00AB               	movwf	(_IOPORT^(0+128)+11)
 11623                           
 11624                           ;ioports.c: 717: }
 11625                           
 11626                           ;ioports.c: 715: break;
 11627  1E99  0008               	return
 11628  1E9A                     l4757:	
 11629  1E9A  1283               	bcf	3,5	;RP0=0, select bank0
 11630  1E9B  0822               	movf	IOResetChanges@io,w
 11631                           
 11632                           ; Switch size 1, requested type "space"
 11633                           ; Number of cases is 4, Range of values is 49 to 52
 11634                           ; switch strategies available:
 11635                           ; Name         Instructions Cycles
 11636                           ; simple_byte           13     7 (average)
 11637                           ; direct_byte           23    11 (fixed)
 11638                           ; jumptable            263     9 (fixed)
 11639                           ;	Chosen strategy is simple_byte
 11640  1E9C  3A31               	xorlw	49	; case 49
 11641  1E9D  1903               	skipnz
 11642  1E9E  2E73               	goto	l4747
 11643  1E9F  3A03               	xorlw	3	; case 50
 11644  1EA0  1903               	skipnz
 11645  1EA1  2E7A               	goto	l4749
 11646  1EA2  3A01               	xorlw	1	; case 51
 11647  1EA3  1903               	skipnz
 11648  1EA4  2E82               	goto	l4751
 11649  1EA5  3A07               	xorlw	7	; case 52
 11650  1EA6  1903               	skipnz
 11651  1EA7  2E8E               	goto	l4753
 11652  1EA8  2EA9               	goto	l661
 11653  1EA9                     l661:	
 11654  1EA9  0008               	return
 11655  1EAA                     __end_of_IOResetChanges:	
 11656                           
 11657                           	psect	text39
 11658  1311                     __ptext39:	
 11659 ;; *************** function _IOInit *****************
 11660 ;; Defined at:
 11661 ;;		line 612 in file "ioports.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;		None
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;		None
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      void 
 11668 ;; Registers used:
 11669 ;;		wreg, status,2, status,0, pclath, cstack
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11675 ;;      Params:         0       0       0       0       0
 11676 ;;      Locals:         0       0       0       0       0
 11677 ;;      Temps:          0       1       0       0       0
 11678 ;;      Totals:         0       1       0       0       0
 11679 ;;Total ram usage:        1 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    4
 11682 ;; This function calls:
 11683 ;;		_IOUpdateOut
 11684 ;; This function is called by:
 11685 ;;		_main
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _IOInit
 11691  1311                     _IOInit:	
 11692                           
 11693                           ;ioports.c: 616: PORTB |= 0b10010000;
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _IOInit: [wreg+status,2+status,0+pclath+cstack]
 11697  1311  3090               	movlw	144
 11698  1312  1283               	bcf	3,5	;RP0=0, select bank0
 11699  1313  1303               	bcf	3,6	;RP1=0, select bank0
 11700  1314  00A1               	movwf	??_IOInit
 11701  1315  0821               	movf	??_IOInit,w
 11702  1316  0486               	iorwf	6,f	;volatile
 11703                           
 11704                           ;ioports.c: 617: PORTB &= 0b10011111;
 11705  1317  309F               	movlw	159
 11706  1318  00A1               	movwf	??_IOInit
 11707  1319  0821               	movf	??_IOInit,w
 11708  131A  0586               	andwf	6,f	;volatile
 11709                           
 11710                           ;ioports.c: 618: TRISD = 0xff;
 11711  131B  30FF               	movlw	255
 11712  131C  1683               	bsf	3,5	;RP0=1, select bank1
 11713  131D  1303               	bcf	3,6	;RP1=0, select bank1
 11714  131E  0088               	movwf	8	;volatile
 11715                           
 11716                           ;ioports.c: 620: IOPORT.io[0].status = 0x00;
 11717  131F  01A0               	clrf	_IOPORT^(0+128)
 11718                           
 11719                           ;ioports.c: 621: IOPORT.io[0].last_status = 0x00;
 11720  1320  01A1               	clrf	(_IOPORT^(0+128)+1)
 11721                           
 11722                           ;ioports.c: 622: IOPORT.io[1].status = 0x00;
 11723  1321  01A3               	clrf	(_IOPORT^(0+128)+3)
 11724                           
 11725                           ;ioports.c: 623: IOPORT.io[1].last_status = 0x00;
 11726  1322  01A4               	clrf	(_IOPORT^(0+128)+4)
 11727                           
 11728                           ;ioports.c: 624: IOPORT.io[2].status = 0x00;
 11729  1323  01A6               	clrf	(_IOPORT^(0+128)+6)
 11730                           
 11731                           ;ioports.c: 625: IOPORT.io[2].last_status = 0xff;
 11732  1324  30FF               	movlw	255
 11733  1325  1283               	bcf	3,5	;RP0=0, select bank0
 11734  1326  1303               	bcf	3,6	;RP1=0, select bank0
 11735  1327  00A1               	movwf	??_IOInit
 11736  1328  0821               	movf	??_IOInit,w
 11737  1329  1683               	bsf	3,5	;RP0=1, select bank1
 11738  132A  1303               	bcf	3,6	;RP1=0, select bank1
 11739  132B  00A7               	movwf	(_IOPORT^(0+128)+7)
 11740                           
 11741                           ;ioports.c: 626: IOPORT.io[2].notif = 0x00;
 11742  132C  01A8               	clrf	(_IOPORT^(0+128)+8)
 11743                           
 11744                           ;ioports.c: 627: IOPORT.io[3].status = 0x00;
 11745  132D  01A9               	clrf	(_IOPORT^(0+128)+9)
 11746                           
 11747                           ;ioports.c: 628: IOPORT.io[3].last_status = 0xff;
 11748  132E  30FF               	movlw	255
 11749  132F  1283               	bcf	3,5	;RP0=0, select bank0
 11750  1330  1303               	bcf	3,6	;RP1=0, select bank0
 11751  1331  00A1               	movwf	??_IOInit
 11752  1332  0821               	movf	??_IOInit,w
 11753  1333  1683               	bsf	3,5	;RP0=1, select bank1
 11754  1334  1303               	bcf	3,6	;RP1=0, select bank1
 11755  1335  00AA               	movwf	(_IOPORT^(0+128)+10)
 11756                           
 11757                           ;ioports.c: 629: IOPORT.io[3].notif = 0x00;
 11758  1336  01AB               	clrf	(_IOPORT^(0+128)+11)
 11759                           
 11760                           ;ioports.c: 630: IOPORT.status_count[0] = 0x7f;
 11761  1337  307F               	movlw	127
 11762  1338  1283               	bcf	3,5	;RP0=0, select bank0
 11763  1339  1303               	bcf	3,6	;RP1=0, select bank0
 11764  133A  00A1               	movwf	??_IOInit
 11765  133B  0821               	movf	??_IOInit,w
 11766  133C  1683               	bsf	3,5	;RP0=1, select bank1
 11767  133D  1303               	bcf	3,6	;RP1=0, select bank1
 11768  133E  00CC               	movwf	(_IOPORT^(0+128)+44)
 11769                           
 11770                           ;ioports.c: 631: IOPORT.status_count[1] = 0x7f;
 11771  133F  307F               	movlw	127
 11772  1340  1283               	bcf	3,5	;RP0=0, select bank0
 11773  1341  1303               	bcf	3,6	;RP1=0, select bank0
 11774  1342  00A1               	movwf	??_IOInit
 11775  1343  0821               	movf	??_IOInit,w
 11776  1344  1683               	bsf	3,5	;RP0=1, select bank1
 11777  1345  1303               	bcf	3,6	;RP1=0, select bank1
 11778  1346  00CD               	movwf	(_IOPORT^(0+128)+45)
 11779                           
 11780                           ;ioports.c: 632: IOPORT.status_count[2] = 0x7f;
 11781  1347  307F               	movlw	127
 11782  1348  1283               	bcf	3,5	;RP0=0, select bank0
 11783  1349  1303               	bcf	3,6	;RP1=0, select bank0
 11784  134A  00A1               	movwf	??_IOInit
 11785  134B  0821               	movf	??_IOInit,w
 11786  134C  1683               	bsf	3,5	;RP0=1, select bank1
 11787  134D  1303               	bcf	3,6	;RP1=0, select bank1
 11788  134E  00CE               	movwf	(_IOPORT^(0+128)+46)
 11789                           
 11790                           ;ioports.c: 633: IOPORT.status_count[3] = 0x7f;
 11791  134F  307F               	movlw	127
 11792  1350  1283               	bcf	3,5	;RP0=0, select bank0
 11793  1351  1303               	bcf	3,6	;RP1=0, select bank0
 11794  1352  00A1               	movwf	??_IOInit
 11795  1353  0821               	movf	??_IOInit,w
 11796  1354  1683               	bsf	3,5	;RP0=1, select bank1
 11797  1355  1303               	bcf	3,6	;RP1=0, select bank1
 11798  1356  00CF               	movwf	(_IOPORT^(0+128)+47)
 11799                           
 11800                           ;ioports.c: 634: IOPORT.status_count[4] = 0x7f;
 11801  1357  307F               	movlw	127
 11802  1358  1283               	bcf	3,5	;RP0=0, select bank0
 11803  1359  1303               	bcf	3,6	;RP1=0, select bank0
 11804  135A  00A1               	movwf	??_IOInit
 11805  135B  0821               	movf	??_IOInit,w
 11806  135C  1683               	bsf	3,5	;RP0=1, select bank1
 11807  135D  1303               	bcf	3,6	;RP1=0, select bank1
 11808  135E  00D0               	movwf	(_IOPORT^(0+128)+48)
 11809                           
 11810                           ;ioports.c: 635: IOPORT.status_count[5] = 0x7f;
 11811  135F  307F               	movlw	127
 11812  1360  1283               	bcf	3,5	;RP0=0, select bank0
 11813  1361  1303               	bcf	3,6	;RP1=0, select bank0
 11814  1362  00A1               	movwf	??_IOInit
 11815  1363  0821               	movf	??_IOInit,w
 11816  1364  1683               	bsf	3,5	;RP0=1, select bank1
 11817  1365  1303               	bcf	3,6	;RP1=0, select bank1
 11818  1366  00D1               	movwf	(_IOPORT^(0+128)+49)
 11819                           
 11820                           ;ioports.c: 636: IOPORT.status_count[6] = 0x7f;
 11821  1367  307F               	movlw	127
 11822  1368  1283               	bcf	3,5	;RP0=0, select bank0
 11823  1369  1303               	bcf	3,6	;RP1=0, select bank0
 11824  136A  00A1               	movwf	??_IOInit
 11825  136B  0821               	movf	??_IOInit,w
 11826  136C  1683               	bsf	3,5	;RP0=1, select bank1
 11827  136D  1303               	bcf	3,6	;RP1=0, select bank1
 11828  136E  00D2               	movwf	(_IOPORT^(0+128)+50)
 11829                           
 11830                           ;ioports.c: 637: IOPORT.status_count[7] = 0x7f;
 11831  136F  307F               	movlw	127
 11832  1370  1283               	bcf	3,5	;RP0=0, select bank0
 11833  1371  1303               	bcf	3,6	;RP1=0, select bank0
 11834  1372  00A1               	movwf	??_IOInit
 11835  1373  0821               	movf	??_IOInit,w
 11836  1374  1683               	bsf	3,5	;RP0=1, select bank1
 11837  1375  1303               	bcf	3,6	;RP1=0, select bank1
 11838  1376  00D3               	movwf	(_IOPORT^(0+128)+51)
 11839                           
 11840                           ;ioports.c: 638: IOPORT.status_count[8] = 0x7f;
 11841  1377  307F               	movlw	127
 11842  1378  1283               	bcf	3,5	;RP0=0, select bank0
 11843  1379  1303               	bcf	3,6	;RP1=0, select bank0
 11844  137A  00A1               	movwf	??_IOInit
 11845  137B  0821               	movf	??_IOInit,w
 11846  137C  1683               	bsf	3,5	;RP0=1, select bank1
 11847  137D  1303               	bcf	3,6	;RP1=0, select bank1
 11848  137E  00D4               	movwf	(_IOPORT^(0+128)+52)
 11849                           
 11850                           ;ioports.c: 639: IOPORT.status_count[9] = 0x7f;
 11851  137F  307F               	movlw	127
 11852  1380  1283               	bcf	3,5	;RP0=0, select bank0
 11853  1381  1303               	bcf	3,6	;RP1=0, select bank0
 11854  1382  00A1               	movwf	??_IOInit
 11855  1383  0821               	movf	??_IOInit,w
 11856  1384  1683               	bsf	3,5	;RP0=1, select bank1
 11857  1385  1303               	bcf	3,6	;RP1=0, select bank1
 11858  1386  00D5               	movwf	(_IOPORT^(0+128)+53)
 11859                           
 11860                           ;ioports.c: 640: IOPORT.status_count[10] = 0x7f;
 11861  1387  307F               	movlw	127
 11862  1388  1283               	bcf	3,5	;RP0=0, select bank0
 11863  1389  1303               	bcf	3,6	;RP1=0, select bank0
 11864  138A  00A1               	movwf	??_IOInit
 11865  138B  0821               	movf	??_IOInit,w
 11866  138C  1683               	bsf	3,5	;RP0=1, select bank1
 11867  138D  1303               	bcf	3,6	;RP1=0, select bank1
 11868  138E  00D6               	movwf	(_IOPORT^(0+128)+54)
 11869                           
 11870                           ;ioports.c: 641: IOPORT.status_count[11] = 0x7f;
 11871  138F  307F               	movlw	127
 11872  1390  1283               	bcf	3,5	;RP0=0, select bank0
 11873  1391  1303               	bcf	3,6	;RP1=0, select bank0
 11874  1392  00A1               	movwf	??_IOInit
 11875  1393  0821               	movf	??_IOInit,w
 11876  1394  1683               	bsf	3,5	;RP0=1, select bank1
 11877  1395  1303               	bcf	3,6	;RP1=0, select bank1
 11878  1396  00D7               	movwf	(_IOPORT^(0+128)+55)
 11879                           
 11880                           ;ioports.c: 642: IOPORT.status_count[12] = 0x7f;
 11881  1397  307F               	movlw	127
 11882  1398  1283               	bcf	3,5	;RP0=0, select bank0
 11883  1399  1303               	bcf	3,6	;RP1=0, select bank0
 11884  139A  00A1               	movwf	??_IOInit
 11885  139B  0821               	movf	??_IOInit,w
 11886  139C  1683               	bsf	3,5	;RP0=1, select bank1
 11887  139D  1303               	bcf	3,6	;RP1=0, select bank1
 11888  139E  00D8               	movwf	(_IOPORT^(0+128)+56)
 11889                           
 11890                           ;ioports.c: 643: IOPORT.status_count[13] = 0x7f;
 11891  139F  307F               	movlw	127
 11892  13A0  1283               	bcf	3,5	;RP0=0, select bank0
 11893  13A1  1303               	bcf	3,6	;RP1=0, select bank0
 11894  13A2  00A1               	movwf	??_IOInit
 11895  13A3  0821               	movf	??_IOInit,w
 11896  13A4  1683               	bsf	3,5	;RP0=1, select bank1
 11897  13A5  1303               	bcf	3,6	;RP1=0, select bank1
 11898  13A6  00D9               	movwf	(_IOPORT^(0+128)+57)
 11899                           
 11900                           ;ioports.c: 644: IOPORT.status_count[14] = 0x7f;
 11901  13A7  307F               	movlw	127
 11902  13A8  1283               	bcf	3,5	;RP0=0, select bank0
 11903  13A9  1303               	bcf	3,6	;RP1=0, select bank0
 11904  13AA  00A1               	movwf	??_IOInit
 11905  13AB  0821               	movf	??_IOInit,w
 11906  13AC  1683               	bsf	3,5	;RP0=1, select bank1
 11907  13AD  1303               	bcf	3,6	;RP1=0, select bank1
 11908  13AE  00DA               	movwf	(_IOPORT^(0+128)+58)
 11909                           
 11910                           ;ioports.c: 645: IOPORT.status_count[15] = 0x7f;
 11911  13AF  307F               	movlw	127
 11912  13B0  1283               	bcf	3,5	;RP0=0, select bank0
 11913  13B1  1303               	bcf	3,6	;RP1=0, select bank0
 11914  13B2  00A1               	movwf	??_IOInit
 11915  13B3  0821               	movf	??_IOInit,w
 11916  13B4  1683               	bsf	3,5	;RP0=1, select bank1
 11917  13B5  1303               	bcf	3,6	;RP1=0, select bank1
 11918  13B6  00DB               	movwf	(_IOPORT^(0+128)+59)
 11919                           
 11920                           ;ioports.c: 646: IOPORT.pulse[0] = 0x00;
 11921  13B7  01BC               	clrf	(_IOPORT^(0+128)+28)
 11922                           
 11923                           ;ioports.c: 647: IOPORT.pulse[1] = 0x00;
 11924  13B8  01BD               	clrf	(_IOPORT^(0+128)+29)
 11925                           
 11926                           ;ioports.c: 648: IOPORT.pulse[2] = 0x00;
 11927  13B9  01BE               	clrf	(_IOPORT^(0+128)+30)
 11928                           
 11929                           ;ioports.c: 649: IOPORT.pulse[3] = 0x00;
 11930  13BA  01BF               	clrf	(_IOPORT^(0+128)+31)
 11931                           
 11932                           ;ioports.c: 650: IOPORT.pulse[4] = 0x00;
 11933  13BB  01C0               	clrf	(_IOPORT^(0+128)+32)
 11934                           
 11935                           ;ioports.c: 651: IOPORT.pulse[5] = 0x00;
 11936  13BC  01C1               	clrf	(_IOPORT^(0+128)+33)
 11937                           
 11938                           ;ioports.c: 652: IOPORT.pulse[6] = 0x00;
 11939  13BD  01C2               	clrf	(_IOPORT^(0+128)+34)
 11940                           
 11941                           ;ioports.c: 653: IOPORT.pulse[7] = 0x00;
 11942  13BE  01C3               	clrf	(_IOPORT^(0+128)+35)
 11943                           
 11944                           ;ioports.c: 654: IOPORT.pulse[8] = 0x00;
 11945  13BF  01C4               	clrf	(_IOPORT^(0+128)+36)
 11946                           
 11947                           ;ioports.c: 655: IOPORT.pulse[9] = 0x00;
 11948  13C0  01C5               	clrf	(_IOPORT^(0+128)+37)
 11949                           
 11950                           ;ioports.c: 656: IOPORT.pulse[10] = 0x00;
 11951  13C1  01C6               	clrf	(_IOPORT^(0+128)+38)
 11952                           
 11953                           ;ioports.c: 657: IOPORT.pulse[11] = 0x00;
 11954  13C2  01C7               	clrf	(_IOPORT^(0+128)+39)
 11955                           
 11956                           ;ioports.c: 658: IOPORT.pulse[12] = 0x00;
 11957  13C3  01C8               	clrf	(_IOPORT^(0+128)+40)
 11958                           
 11959                           ;ioports.c: 659: IOPORT.pulse[13] = 0x00;
 11960  13C4  01C9               	clrf	(_IOPORT^(0+128)+41)
 11961                           
 11962                           ;ioports.c: 660: IOPORT.pulse[14] = 0x00;
 11963  13C5  01CA               	clrf	(_IOPORT^(0+128)+42)
 11964                           
 11965                           ;ioports.c: 661: IOPORT.pulse[15] = 0x00;
 11966  13C6  01CB               	clrf	(_IOPORT^(0+128)+43)
 11967                           
 11968                           ;ioports.c: 663: IOUpdateOut();
 11969  13C7  160A  158A  2731   	fcall	_IOUpdateOut
 11970  13CA  0008               	return
 11971  13CB                     __end_of_IOInit:	
 11972                           
 11973                           	psect	text40
 11974  1F31                     __ptext40:	
 11975 ;; *************** function _IOUpdateOut *****************
 11976 ;; Defined at:
 11977 ;;		line 29 in file "ioports.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;		None
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;		None
 11982 ;; Return value:  Size  Location     Type
 11983 ;;                  1    wreg      void 
 11984 ;; Registers used:
 11985 ;;		wreg, status,2, status,0
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 11991 ;;      Params:         0       0       0       0       0
 11992 ;;      Locals:         0       0       0       0       0
 11993 ;;      Temps:          0       1       0       0       0
 11994 ;;      Totals:         0       1       0       0       0
 11995 ;;Total ram usage:        1 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    3
 11998 ;; This function calls:
 11999 ;;		Nothing
 12000 ;; This function is called by:
 12001 ;;		_IOInit
 12002 ;;		_IOTask
 12003 ;; This function uses a non-reentrant model
 12004 ;;
 12005                           
 12006                           
 12007                           ;psect for function _IOUpdateOut
 12008  1F31                     _IOUpdateOut:	
 12009                           
 12010                           ;ioports.c: 32: if(IOPORT.io[2].status != IOPORT.io[2].last_status)
 12011                           
 12012                           ;incstack = 0
 12013                           ; Regs used in _IOUpdateOut: [wreg+status,2+status,0]
 12014  1F31  1683               	bsf	3,5	;RP0=1, select bank1
 12015  1F32  1303               	bcf	3,6	;RP1=0, select bank1
 12016  1F33  0826               	movf	(_IOPORT^(0+128)+6),w
 12017  1F34  0627               	xorwf	(_IOPORT^(0+128)+7),w
 12018  1F35  1903               	skipnz
 12019  1F36  2F63               	goto	l3813
 12020                           
 12021                           ;ioports.c: 33: {
 12022                           ;ioports.c: 34: IOPORT.io[2].notif = IOPORT.io[2].status ^ IOPORT.io[2].last_status;
 12023  1F37  0826               	movf	(_IOPORT^(0+128)+6),w
 12024  1F38  0627               	xorwf	(_IOPORT^(0+128)+7),w
 12025  1F39  1283               	bcf	3,5	;RP0=0, select bank0
 12026  1F3A  1303               	bcf	3,6	;RP1=0, select bank0
 12027  1F3B  00A0               	movwf	??_IOUpdateOut
 12028  1F3C  0820               	movf	??_IOUpdateOut,w
 12029  1F3D  1683               	bsf	3,5	;RP0=1, select bank1
 12030  1F3E  1303               	bcf	3,6	;RP1=0, select bank1
 12031  1F3F  00A8               	movwf	(_IOPORT^(0+128)+8)
 12032                           
 12033                           ;ioports.c: 36: TRISD = 0x00;
 12034  1F40  0188               	clrf	8	;volatile
 12035                           
 12036                           ;ioports.c: 37: PORTD = IOPORT.io[2].status;
 12037  1F41  0826               	movf	(_IOPORT^(0+128)+6),w
 12038  1F42  1283               	bcf	3,5	;RP0=0, select bank0
 12039  1F43  1303               	bcf	3,6	;RP1=0, select bank0
 12040  1F44  0088               	movwf	8	;volatile
 12041                           
 12042                           ;ioports.c: 38: __nop();
 12043  1F45  0000               	nop
 12044                           
 12045                           ;ioports.c: 39: __nop();
 12046  1F46  0000               	nop
 12047                           
 12048                           ;ioports.c: 40: __nop();
 12049  1F47  0000               	nop
 12050                           
 12051                           ;ioports.c: 41: PORTB |= 0b01000000;
 12052  1F48  1283               	bcf	3,5	;RP0=0, select bank0
 12053  1F49  1303               	bcf	3,6	;RP1=0, select bank0
 12054  1F4A  1706               	bsf	6,6	;volatile
 12055                           
 12056                           ;ioports.c: 42: __nop();
 12057  1F4B  0000               	nop
 12058                           
 12059                           ;ioports.c: 43: __nop();
 12060  1F4C  0000               	nop
 12061                           
 12062                           ;ioports.c: 44: __nop();
 12063  1F4D  0000               	nop
 12064                           
 12065                           ;ioports.c: 45: PORTB &= 0b10111111;
 12066  1F4E  30BF               	movlw	191
 12067  1F4F  1283               	bcf	3,5	;RP0=0, select bank0
 12068  1F50  1303               	bcf	3,6	;RP1=0, select bank0
 12069  1F51  00A0               	movwf	??_IOUpdateOut
 12070  1F52  0820               	movf	??_IOUpdateOut,w
 12071  1F53  0586               	andwf	6,f	;volatile
 12072                           
 12073                           ;ioports.c: 46: __nop();
 12074  1F54  0000               	nop
 12075                           
 12076                           ;ioports.c: 47: __nop();
 12077  1F55  0000               	nop
 12078                           
 12079                           ;ioports.c: 48: __nop();
 12080  1F56  0000               	nop
 12081                           
 12082                           ;ioports.c: 49: TRISD = 0xff;
 12083  1F57  30FF               	movlw	255
 12084  1F58  1683               	bsf	3,5	;RP0=1, select bank1
 12085  1F59  1303               	bcf	3,6	;RP1=0, select bank1
 12086  1F5A  0088               	movwf	8	;volatile
 12087                           
 12088                           ;ioports.c: 50: IOPORT.io[2].last_status = IOPORT.io[2].status;
 12089  1F5B  0826               	movf	(_IOPORT^(0+128)+6),w
 12090  1F5C  1283               	bcf	3,5	;RP0=0, select bank0
 12091  1F5D  1303               	bcf	3,6	;RP1=0, select bank0
 12092  1F5E  00A0               	movwf	??_IOUpdateOut
 12093  1F5F  0820               	movf	??_IOUpdateOut,w
 12094  1F60  1683               	bsf	3,5	;RP0=1, select bank1
 12095  1F61  1303               	bcf	3,6	;RP1=0, select bank1
 12096  1F62  00A7               	movwf	(_IOPORT^(0+128)+7)
 12097  1F63                     l3813:	
 12098                           
 12099                           ;ioports.c: 51: }
 12100                           ;ioports.c: 53: if(IOPORT.io[3].status != IOPORT.io[3].last_status)
 12101  1F63  0829               	movf	(_IOPORT^(0+128)+9),w
 12102  1F64  062A               	xorwf	(_IOPORT^(0+128)+10),w
 12103  1F65  1903               	skipnz
 12104  1F66  0008               	return
 12105                           
 12106                           ;ioports.c: 54: {
 12107                           ;ioports.c: 55: IOPORT.io[3].notif = IOPORT.io[3].status ^ IOPORT.io[3].last_status;
 12108  1F67  0829               	movf	(_IOPORT^(0+128)+9),w
 12109  1F68  062A               	xorwf	(_IOPORT^(0+128)+10),w
 12110  1F69  1283               	bcf	3,5	;RP0=0, select bank0
 12111  1F6A  1303               	bcf	3,6	;RP1=0, select bank0
 12112  1F6B  00A0               	movwf	??_IOUpdateOut
 12113  1F6C  0820               	movf	??_IOUpdateOut,w
 12114  1F6D  1683               	bsf	3,5	;RP0=1, select bank1
 12115  1F6E  1303               	bcf	3,6	;RP1=0, select bank1
 12116  1F6F  00AB               	movwf	(_IOPORT^(0+128)+11)
 12117                           
 12118                           ;ioports.c: 57: TRISD = 0x00;
 12119  1F70  0188               	clrf	8	;volatile
 12120                           
 12121                           ;ioports.c: 58: PORTD = IOPORT.io[3].status;
 12122  1F71  0829               	movf	(_IOPORT^(0+128)+9),w
 12123  1F72  1283               	bcf	3,5	;RP0=0, select bank0
 12124  1F73  1303               	bcf	3,6	;RP1=0, select bank0
 12125  1F74  0088               	movwf	8	;volatile
 12126                           
 12127                           ;ioports.c: 59: __nop();
 12128  1F75  0000               	nop
 12129                           
 12130                           ;ioports.c: 60: __nop();
 12131  1F76  0000               	nop
 12132                           
 12133                           ;ioports.c: 61: __nop();
 12134  1F77  0000               	nop
 12135                           
 12136                           ;ioports.c: 62: PORTB |= 0b00100000;
 12137  1F78  1283               	bcf	3,5	;RP0=0, select bank0
 12138  1F79  1303               	bcf	3,6	;RP1=0, select bank0
 12139  1F7A  1686               	bsf	6,5	;volatile
 12140                           
 12141                           ;ioports.c: 63: __nop();
 12142  1F7B  0000               	nop
 12143                           
 12144                           ;ioports.c: 64: __nop();
 12145  1F7C  0000               	nop
 12146                           
 12147                           ;ioports.c: 65: __nop();
 12148  1F7D  0000               	nop
 12149                           
 12150                           ;ioports.c: 66: PORTB &= 0b11011111;
 12151  1F7E  30DF               	movlw	223
 12152  1F7F  1283               	bcf	3,5	;RP0=0, select bank0
 12153  1F80  1303               	bcf	3,6	;RP1=0, select bank0
 12154  1F81  00A0               	movwf	??_IOUpdateOut
 12155  1F82  0820               	movf	??_IOUpdateOut,w
 12156  1F83  0586               	andwf	6,f	;volatile
 12157                           
 12158                           ;ioports.c: 67: __nop();
 12159  1F84  0000               	nop
 12160                           
 12161                           ;ioports.c: 68: __nop();
 12162  1F85  0000               	nop
 12163                           
 12164                           ;ioports.c: 69: __nop();
 12165  1F86  0000               	nop
 12166                           
 12167                           ;ioports.c: 70: TRISD = 0xff;
 12168  1F87  30FF               	movlw	255
 12169  1F88  1683               	bsf	3,5	;RP0=1, select bank1
 12170  1F89  1303               	bcf	3,6	;RP1=0, select bank1
 12171  1F8A  0088               	movwf	8	;volatile
 12172                           
 12173                           ;ioports.c: 71: IOPORT.io[3].last_status = IOPORT.io[3].status;
 12174  1F8B  0829               	movf	(_IOPORT^(0+128)+9),w
 12175  1F8C  1283               	bcf	3,5	;RP0=0, select bank0
 12176  1F8D  1303               	bcf	3,6	;RP1=0, select bank0
 12177  1F8E  00A0               	movwf	??_IOUpdateOut
 12178  1F8F  0820               	movf	??_IOUpdateOut,w
 12179  1F90  1683               	bsf	3,5	;RP0=1, select bank1
 12180  1F91  1303               	bcf	3,6	;RP1=0, select bank1
 12181  1F92  00AA               	movwf	(_IOPORT^(0+128)+10)
 12182  1F93  0008               	return
 12183  1F94                     __end_of_IOUpdateOut:	
 12184                           
 12185                           	psect	text41
 12186  1E37                     __ptext41:	
 12187 ;; *************** function _IOChanges *****************
 12188 ;; Defined at:
 12189 ;;		line 677 in file "ioports.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;  io              1    wreg     unsigned char 
 12192 ;; Auto vars:     Size  Location     Type
 12193 ;;  io              1    1[BANK0 ] unsigned char 
 12194 ;;  rc              1    2[BANK0 ] unsigned char 
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  1    wreg      unsigned char 
 12197 ;; Registers used:
 12198 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12204 ;;      Params:         0       0       0       0       0
 12205 ;;      Locals:         0       2       0       0       0
 12206 ;;      Temps:          0       1       0       0       0
 12207 ;;      Totals:         0       3       0       0       0
 12208 ;;Total ram usage:        3 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; Hardware stack levels required when called:    3
 12211 ;; This function calls:
 12212 ;;		Nothing
 12213 ;; This function is called by:
 12214 ;;		_main
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           
 12219                           ;psect for function _IOChanges
 12220  1E37                     _IOChanges:	
 12221                           
 12222                           ;incstack = 0
 12223                           ; Regs used in _IOChanges: [wreg-fsr0h+status,2+status,0]
 12224                           ;IOChanges@io stored from wreg
 12225  1E37  1283               	bcf	3,5	;RP0=0, select bank0
 12226  1E38  1303               	bcf	3,6	;RP1=0, select bank0
 12227  1E39  00A1               	movwf	IOChanges@io
 12228                           
 12229                           ;ioports.c: 679: unsigned char rc = 0x00;
 12230  1E3A  01A2               	clrf	IOChanges@rc
 12231                           
 12232                           ;ioports.c: 681: switch(io)
 12233  1E3B  2E5F               	goto	l4809
 12234  1E3C                     l4799:	
 12235                           ;ioports.c: 682: {
 12236                           ;ioports.c: 683: case '1':
 12237                           
 12238                           
 12239                           ;ioports.c: 684: rc = (IOPORT.io[0].status ^ IOPORT.io[0].last_status) & IOPORTCONF.io[0
      +                          ].mascara_notif;
 12240  1E3C  1683               	bsf	3,5	;RP0=1, select bank1
 12241  1E3D  1303               	bcf	3,6	;RP1=0, select bank1
 12242  1E3E  0821               	movf	(_IOPORT^(0+128)+1),w
 12243  1E3F  0620               	xorwf	_IOPORT^(0+128),w
 12244  1E40  1683               	bsf	3,5	;RP0=1, select bank3
 12245  1E41  1703               	bsf	3,6	;RP1=1, select bank3
 12246  1E42  0512               	andwf	(_IOPORTCONF^(0+384)+2),w
 12247  1E43  2E59               	goto	L14
 12248  1E44                     l4801:	
 12249                           ;ioports.c: 686: case '2':
 12250                           
 12251                           ;ioports.c: 685: break;
 12252                           
 12253                           
 12254                           ;ioports.c: 687: rc = (IOPORT.io[1].status ^ IOPORT.io[1].last_status) & IOPORTCONF.io[1
      +                          ].mascara_notif;
 12255  1E44  1683               	bsf	3,5	;RP0=1, select bank1
 12256  1E45  1303               	bcf	3,6	;RP1=0, select bank1
 12257  1E46  0823               	movf	(_IOPORT^(0+128)+3),w
 12258  1E47  0624               	xorwf	(_IOPORT^(0+128)+4),w
 12259  1E48  1683               	bsf	3,5	;RP0=1, select bank3
 12260  1E49  1703               	bsf	3,6	;RP1=1, select bank3
 12261  1E4A  0514               	andwf	(_IOPORTCONF^(0+384)+4),w
 12262  1E4B  2E59               	goto	L14
 12263  1E4C                     l4803:	
 12264                           ;ioports.c: 689: case '3':
 12265                           
 12266                           ;ioports.c: 688: break;
 12267                           
 12268                           
 12269                           ;ioports.c: 690: rc = IOPORT.io[2].notif & IOPORTCONF.io[2].mascara_notif;
 12270  1E4C  1683               	bsf	3,5	;RP0=1, select bank1
 12271  1E4D  1303               	bcf	3,6	;RP1=0, select bank1
 12272  1E4E  0828               	movf	(_IOPORT^(0+128)+8),w
 12273  1E4F  1683               	bsf	3,5	;RP0=1, select bank3
 12274  1E50  1703               	bsf	3,6	;RP1=1, select bank3
 12275  1E51  0516               	andwf	(_IOPORTCONF^(0+384)+6),w
 12276  1E52  2E59               	goto	L14
 12277  1E53                     l4805:	
 12278                           ;ioports.c: 692: case '4':
 12279                           
 12280                           ;ioports.c: 691: break;
 12281                           
 12282                           
 12283                           ;ioports.c: 693: rc = IOPORT.io[3].notif & IOPORTCONF.io[3].mascara_notif;
 12284  1E53  1683               	bsf	3,5	;RP0=1, select bank1
 12285  1E54  1303               	bcf	3,6	;RP1=0, select bank1
 12286  1E55  082B               	movf	(_IOPORT^(0+128)+11),w
 12287  1E56  1683               	bsf	3,5	;RP0=1, select bank3
 12288  1E57  1703               	bsf	3,6	;RP1=1, select bank3
 12289  1E58  0518               	andwf	(_IOPORTCONF^(0+384)+8),w
 12290  1E59                     L14:	
 12291  1E59  1283               	bcf	3,5	;RP0=0, select bank0
 12292  1E5A  1303               	bcf	3,6	;RP1=0, select bank0
 12293  1E5B  00A0               	movwf	??_IOChanges
 12294  1E5C  0820               	movf	??_IOChanges,w
 12295  1E5D  00A2               	movwf	IOChanges@rc
 12296                           
 12297                           ;ioports.c: 696: }
 12298                           
 12299                           ;ioports.c: 694: break;
 12300  1E5E  2E6D               	goto	l4811
 12301  1E5F                     l4809:	
 12302  1E5F  0821               	movf	IOChanges@io,w
 12303                           
 12304                           ; Switch size 1, requested type "space"
 12305                           ; Number of cases is 4, Range of values is 49 to 52
 12306                           ; switch strategies available:
 12307                           ; Name         Instructions Cycles
 12308                           ; simple_byte           13     7 (average)
 12309                           ; direct_byte           23    11 (fixed)
 12310                           ; jumptable            263     9 (fixed)
 12311                           ;	Chosen strategy is simple_byte
 12312  1E60  3A31               	xorlw	49	; case 49
 12313  1E61  1903               	skipnz
 12314  1E62  2E3C               	goto	l4799
 12315  1E63  3A03               	xorlw	3	; case 50
 12316  1E64  1903               	skipnz
 12317  1E65  2E44               	goto	l4801
 12318  1E66  3A01               	xorlw	1	; case 51
 12319  1E67  1903               	skipnz
 12320  1E68  2E4C               	goto	l4803
 12321  1E69  3A07               	xorlw	7	; case 52
 12322  1E6A  1903               	skipnz
 12323  1E6B  2E53               	goto	l4805
 12324  1E6C  2E6D               	goto	l4811
 12325  1E6D                     l4811:	
 12326                           
 12327                           ;ioports.c: 697: return rc;
 12328  1E6D  0822               	movf	IOChanges@rc,w
 12329  1E6E  0008               	return
 12330  1E6F                     __end_of_IOChanges:	
 12331                           
 12332                           	psect	text42
 12333  1D1B                     __ptext42:	
 12334 ;; *************** function _Beep *****************
 12335 ;; Defined at:
 12336 ;;		line 79 in file "perif.c"
 12337 ;; Parameters:    Size  Location     Type
 12338 ;;  count           1    wreg     unsigned char 
 12339 ;; Auto vars:     Size  Location     Type
 12340 ;;  count           1    6[BANK0 ] unsigned char 
 12341 ;; Return value:  Size  Location     Type
 12342 ;;                  1    wreg      void 
 12343 ;; Registers used:
 12344 ;;		wreg, status,2, status,0
 12345 ;; Tracked objects:
 12346 ;;		On entry : 0/0
 12347 ;;		On exit  : 0/0
 12348 ;;		Unchanged: 0/0
 12349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12350 ;;      Params:         0       0       0       0       0
 12351 ;;      Locals:         0       5       0       0       0
 12352 ;;      Temps:          0       2       0       0       0
 12353 ;;      Totals:         0       7       0       0       0
 12354 ;;Total ram usage:        7 bytes
 12355 ;; Hardware stack levels used:    1
 12356 ;; Hardware stack levels required when called:    3
 12357 ;; This function calls:
 12358 ;;		Nothing
 12359 ;; This function is called by:
 12360 ;;		_main
 12361 ;; This function uses a non-reentrant model
 12362 ;;
 12363                           
 12364                           
 12365                           ;psect for function _Beep
 12366  1D1B                     _Beep:	
 12367                           
 12368                           ;incstack = 0
 12369                           ; Regs used in _Beep: [wreg+status,2+status,0]
 12370                           ;Beep@count stored from wreg
 12371  1D1B  1283               	bcf	3,5	;RP0=0, select bank0
 12372  1D1C  1303               	bcf	3,6	;RP1=0, select bank0
 12373  1D1D  00A6               	movwf	Beep@count
 12374                           
 12375                           ;perif.c: 81: PORTE |= 0b00000010;
 12376  1D1E  1489               	bsf	9,1	;volatile
 12377                           
 12378                           ;perif.c: 83: PerifBeepOn = (count)?30:5;
 12379  1D1F  0826               	movf	Beep@count,w
 12380  1D20  1D03               	btfss	3,2
 12381  1D21  2D24               	goto	l4597
 12382  1D22  3005               	movlw	5
 12383  1D23  2D25               	goto	L15
 12384  1D24                     l4597:	
 12385  1D24  301E               	movlw	30
 12386  1D25                     L15:	
 12387  1D25  00A2               	movwf	_Beep$518
 12388  1D26  3000               	movlw	0
 12389  1D27  00A3               	movwf	_Beep$518+1
 12390  1D28  0822               	movf	_Beep$518,w
 12391  1D29  00A0               	movwf	??_Beep
 12392  1D2A  0820               	movf	??_Beep,w
 12393  1D2B  1683               	bsf	3,5	;RP0=1, select bank1
 12394  1D2C  1303               	bcf	3,6	;RP1=0, select bank1
 12395  1D2D  00E4               	movwf	_PerifBeepOn^(0+128)
 12396                           
 12397                           ;perif.c: 84: PerifBeepOff = 0;
 12398  1D2E  01E3               	clrf	_PerifBeepOff^(0+128)
 12399                           
 12400                           ;perif.c: 85: PerifBeepCount = (count)?count:1;
 12401  1D2F  1283               	bcf	3,5	;RP0=0, select bank0
 12402  1D30  1303               	bcf	3,6	;RP1=0, select bank0
 12403  1D31  0826               	movf	Beep@count,w
 12404  1D32  1D03               	btfss	3,2
 12405  1D33  2D38               	goto	l4605
 12406  1D34  3001               	movlw	1
 12407  1D35  00A4               	movwf	_Beep$519
 12408  1D36  3000               	movlw	0
 12409  1D37  2D3E               	goto	L16
 12410  1D38                     l4605:	
 12411  1D38  0826               	movf	Beep@count,w
 12412  1D39  00A0               	movwf	??_Beep
 12413  1D3A  01A1               	clrf	??_Beep+1
 12414  1D3B  0820               	movf	??_Beep,w
 12415  1D3C  00A4               	movwf	_Beep$519
 12416  1D3D  0821               	movf	??_Beep+1,w
 12417  1D3E                     L16:	
 12418  1D3E  00A5               	movwf	_Beep$519+1
 12419  1D3F  0824               	movf	_Beep$519,w
 12420  1D40  00A0               	movwf	??_Beep
 12421  1D41  0820               	movf	??_Beep,w
 12422  1D42  1683               	bsf	3,5	;RP0=1, select bank1
 12423  1D43  1303               	bcf	3,6	;RP1=0, select bank1
 12424  1D44  00E5               	movwf	_PerifBeepCount^(0+128)
 12425  1D45  0008               	return
 12426  1D46                     __end_of_Beep:	
 12427                           
 12428                           	psect	text43
 12429  1CDD                     __ptext43:	
 12430 ;; *************** function _isr *****************
 12431 ;; Defined at:
 12432 ;;		line 632 in file "main.c"
 12433 ;; Parameters:    Size  Location     Type
 12434 ;;		None
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;		None
 12437 ;; Return value:  Size  Location     Type
 12438 ;;                  1    wreg      void 
 12439 ;; Registers used:
 12440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12446 ;;      Params:         0       0       0       0       0
 12447 ;;      Locals:         0       0       0       0       0
 12448 ;;      Temps:          4       0       0       0       0
 12449 ;;      Totals:         4       0       0       0       0
 12450 ;;Total ram usage:        4 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    2
 12453 ;; This function calls:
 12454 ;;		_SerialInt
 12455 ;;		_Timer0Int
 12456 ;; This function is called by:
 12457 ;;		Interrupt level 1
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function _isr
 12463  1CDD                     _isr:	
 12464                           
 12465                           ;main.c: 635: if(T0IF) { Timer0Int(); }
 12466  1CDD  1D0B               	btfss	11,2	;volatile
 12467  1CDE  2CE4               	goto	i1l4833
 12468  1CDF  160A  118A  2142  160A  158A  	fcall	_Timer0Int
 12469  1CE4                     i1l4833:	
 12470                           
 12471                           ;main.c: 638: if(RCIF) { SerialInt(); }
 12472  1CE4  1283               	bcf	3,5	;RP0=0, select bank0
 12473  1CE5  1303               	bcf	3,6	;RP1=0, select bank0
 12474  1CE6  1E8C               	btfss	12,5	;volatile
 12475  1CE7  2CED               	goto	i1l267
 12476  1CE8  160A  158A  24CD  160A  158A  	fcall	_SerialInt
 12477  1CED                     i1l267:	
 12478  1CED  0879               	movf	??_isr+3,w
 12479  1CEE  1283               	bcf	3,5	;RP0=0, select bank0
 12480  1CEF  1303               	bcf	3,6	;RP1=0, select bank0
 12481  1CF0  00FF               	movwf	127
 12482  1CF1  0878               	movf	??_isr+2,w
 12483  1CF2  008A               	movwf	10
 12484  1CF3  0877               	movf	??_isr+1,w
 12485  1CF4  0084               	movwf	4
 12486  1CF5  0E76               	swapf	??_isr^(0+-128),w
 12487  1CF6  0083               	movwf	3
 12488  1CF7  0EFE               	swapf	126,f
 12489  1CF8  0E7E               	swapf	126,w
 12490  1CF9  0009               	retfie
 12491  1CFA                     __end_of_isr:	
 12492                           
 12493                           	psect	intentry
 12494  0004                     __pintentry:	
 12495                           ;incstack = 0
 12496                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12497                           
 12498  0004                     interrupt_function:	
 12499  007E                     saved_w	set	btemp
 12500  0004  00FE               	movwf	btemp
 12501  0005  0E03               	swapf	3,w
 12502  0006  00F6               	movwf	??_isr
 12503  0007  0804               	movf	4,w
 12504  0008  00F7               	movwf	??_isr+1
 12505  0009  080A               	movf	10,w
 12506  000A  00F8               	movwf	??_isr+2
 12507  000B  1283               	bcf	3,5	;RP0=0, select bank0
 12508  000C  1303               	bcf	3,6	;RP1=0, select bank0
 12509  000D  087F               	movf	btemp+1,w
 12510  000E  00F9               	movwf	??_isr+3
 12511  000F  160A  158A  2CDD   	ljmp	_isr
 12512                           
 12513                           	psect	text44
 12514  1142                     __ptext44:	
 12515 ;; *************** function _Timer0Int *****************
 12516 ;; Defined at:
 12517 ;;		line 540 in file "main.c"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;		None
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;		None
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  1    wreg      void 
 12524 ;; Registers used:
 12525 ;;		wreg, status,2, status,0
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12531 ;;      Params:         0       0       0       0       0
 12532 ;;      Locals:         0       0       0       0       0
 12533 ;;      Temps:          1       0       0       0       0
 12534 ;;      Totals:         1       0       0       0       0
 12535 ;;Total ram usage:        1 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; This function calls:
 12538 ;;		Nothing
 12539 ;; This function is called by:
 12540 ;;		_isr
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           
 12545                           ;psect for function _Timer0Int
 12546  1142                     _Timer0Int:	
 12547                           
 12548                           ;main.c: 542: T0IF = 0;
 12549                           
 12550                           ;incstack = 0
 12551                           ; Regs used in _Timer0Int: [wreg+status,2+status,0]
 12552  1142  110B               	bcf	11,2	;volatile
 12553                           
 12554                           ;main.c: 543: if( !T0IE) return;
 12555  1143  1E8B               	btfss	11,5	;volatile
 12556  1144  0008               	return
 12557                           
 12558                           ;main.c: 545: if( !TimerDiv1) TimerDiv1 = 36;
 12559  1145  1283               	bcf	3,5	;RP0=0, select bank0
 12560  1146  1303               	bcf	3,6	;RP1=0, select bank0
 12561  1147  085B               	movf	_TimerDiv1,w
 12562  1148  1D03               	btfss	3,2
 12563  1149  294E               	goto	i1l4281
 12564  114A  3024               	movlw	36
 12565  114B  00F0               	movwf	??_Timer0Int
 12566  114C  0870               	movf	??_Timer0Int,w
 12567  114D  00DB               	movwf	_TimerDiv1
 12568  114E                     i1l4281:	
 12569                           
 12570                           ;main.c: 546: if( !TimerDiv2) TimerDiv2 = 100;
 12571  114E  085A               	movf	_TimerDiv2,w
 12572  114F  1D03               	btfss	3,2
 12573  1150  2955               	goto	i1l4285
 12574  1151  3064               	movlw	100
 12575  1152  00F0               	movwf	??_Timer0Int
 12576  1153  0870               	movf	??_Timer0Int,w
 12577  1154  00DA               	movwf	_TimerDiv2
 12578  1155                     i1l4285:	
 12579                           
 12580                           ;main.c: 548: TimerDiv1--;
 12581  1155  3001               	movlw	1
 12582  1156  02DB               	subwf	_TimerDiv1,f
 12583                           
 12584                           ;main.c: 549: if( !TimerDiv1)
 12585  1157  085B               	movf	_TimerDiv1,w
 12586  1158  1D03               	btfss	3,2
 12587  1159  0008               	return
 12588                           
 12589                           ;main.c: 550: {
 12590                           ;main.c: 551: TimerFlag1 = 1;
 12591  115A  15FA               	bsf	_TimerFlag1/(0+8),_TimerFlag1& (0+7)
 12592                           
 12593                           ;main.c: 552: TimerDiv2--;
 12594  115B  3001               	movlw	1
 12595  115C  02DA               	subwf	_TimerDiv2,f
 12596                           
 12597                           ;main.c: 553: if( !TimerDiv2)
 12598  115D  085A               	movf	_TimerDiv2,w
 12599  115E  1D03               	btfss	3,2
 12600  115F  0008               	return
 12601                           
 12602                           ;main.c: 554: {
 12603                           ;main.c: 556: TimerFlag2 = 1;
 12604  1160  157A               	bsf	_TimerFlag2/(0+8),_TimerFlag2& (0+7)
 12605                           
 12606                           ;main.c: 559: gFechaHora.hora.segundos++;
 12607  1161  3001               	movlw	1
 12608  1162  00F0               	movwf	??_Timer0Int
 12609  1163  0870               	movf	??_Timer0Int,w
 12610  1164  07D5               	addwf	_gFechaHora+6,f
 12611                           
 12612                           ;main.c: 560: if(gFechaHora.hora.segundos > 59)
 12613  1165  303C               	movlw	60
 12614  1166  0255               	subwf	_gFechaHora+6,w
 12615  1167  1C03               	skipc
 12616  1168  0008               	return
 12617                           
 12618                           ;main.c: 561: {
 12619                           ;main.c: 562: gFechaHora.hora.segundos = 0;
 12620  1169  01D5               	clrf	_gFechaHora+6
 12621                           
 12622                           ;main.c: 563: gFechaHora.hora.minutos++;
 12623  116A  3001               	movlw	1
 12624  116B  00F0               	movwf	??_Timer0Int
 12625  116C  0870               	movf	??_Timer0Int,w
 12626  116D  07D4               	addwf	_gFechaHora+5,f
 12627                           
 12628                           ;main.c: 564: if(gFechaHora.hora.minutos > 59)
 12629  116E  303C               	movlw	60
 12630  116F  0254               	subwf	_gFechaHora+5,w
 12631  1170  1C03               	skipc
 12632  1171  0008               	return
 12633                           
 12634                           ;main.c: 565: {
 12635                           ;main.c: 566: gFechaHora.hora.minutos = 0;
 12636  1172  01D4               	clrf	_gFechaHora+5
 12637                           
 12638                           ;main.c: 567: gFechaHora.hora.horas++;
 12639  1173  3001               	movlw	1
 12640  1174  00F0               	movwf	??_Timer0Int
 12641  1175  0870               	movf	??_Timer0Int,w
 12642  1176  07D3               	addwf	_gFechaHora+4,f
 12643                           
 12644                           ;main.c: 568: if(gFechaHora.hora.horas > 23)
 12645  1177  3018               	movlw	24
 12646  1178  0253               	subwf	_gFechaHora+4,w
 12647  1179  1C03               	skipc
 12648  117A  0008               	return
 12649                           
 12650                           ;main.c: 569: {
 12651                           ;main.c: 570: gFechaHora.hora.horas = 0;
 12652  117B  01D3               	clrf	_gFechaHora+4
 12653                           
 12654                           ;main.c: 571: gFechaHora.fecha.dia++;
 12655  117C  3001               	movlw	1
 12656  117D  00F0               	movwf	??_Timer0Int
 12657  117E  0870               	movf	??_Timer0Int,w
 12658  117F  07D1               	addwf	_gFechaHora+2,f
 12659                           
 12660                           ;main.c: 572: if(gFechaHora.fecha.dia > 6)
 12661  1180  3007               	movlw	7
 12662  1181  0251               	subwf	_gFechaHora+2,w
 12663  1182  1803               	btfsc	3,0
 12664                           
 12665                           ;main.c: 573: {
 12666                           ;main.c: 574: gFechaHora.fecha.dia = 0;
 12667  1183  01D1               	clrf	_gFechaHora+2
 12668                           
 12669                           ;main.c: 575: }
 12670                           ;main.c: 576: gFechaHora.fecha.fecha++;
 12671  1184  3001               	movlw	1
 12672  1185  00F0               	movwf	??_Timer0Int
 12673  1186  0870               	movf	??_Timer0Int,w
 12674  1187  07D2               	addwf	_gFechaHora+3,f
 12675                           
 12676                           ;main.c: 577: if( (gFechaHora.fecha.fecha > 28 && gFechaHora.fecha.mes == 1 ) ||
 12677                           ;main.c: 578: (gFechaHora.fecha.fecha > 29 && gFechaHora.fecha.mes == 1) ||
 12678                           ;main.c: 579: (gFechaHora.fecha.fecha > 30 && ( gFechaHora.fecha.mes == 3 || gFechaHora.
      +                          fecha.mes == 5 || gFechaHora.fecha.mes == 8 || gFechaHora.fecha.mes == 10) ) ||
 12679                           ;main.c: 580: (gFechaHora.fecha.fecha > 31 && gFechaHora.fecha.mes == 1) )
 12680  1188  301D               	movlw	29
 12681  1189  0252               	subwf	_gFechaHora+3,w
 12682  118A  1C03               	skipc
 12683  118B  298F               	goto	i1l4325
 12684  118C  0350               	decf	_gFechaHora+1,w
 12685  118D  1903               	btfsc	3,2
 12686  118E  29B1               	goto	i1l248
 12687  118F                     i1l4325:	
 12688  118F  301E               	movlw	30
 12689  1190  0252               	subwf	_gFechaHora+3,w
 12690  1191  1C03               	skipc
 12691  1192  2996               	goto	i1l4329
 12692  1193  0350               	decf	_gFechaHora+1,w
 12693  1194  1903               	btfsc	3,2
 12694  1195  29B1               	goto	i1l248
 12695  1196                     i1l4329:	
 12696  1196  301F               	movlw	31
 12697  1197  0252               	subwf	_gFechaHora+3,w
 12698  1198  1C03               	skipc
 12699  1199  29AA               	goto	i1l4339
 12700  119A  3003               	movlw	3
 12701  119B  0650               	xorwf	_gFechaHora+1,w
 12702  119C  1903               	btfsc	3,2
 12703  119D  29B1               	goto	i1l248
 12704  119E  3005               	movlw	5
 12705  119F  0650               	xorwf	_gFechaHora+1,w
 12706  11A0  1903               	btfsc	3,2
 12707  11A1  29B1               	goto	i1l248
 12708  11A2  3008               	movlw	8
 12709  11A3  0650               	xorwf	_gFechaHora+1,w
 12710  11A4  1903               	btfsc	3,2
 12711  11A5  29B1               	goto	i1l248
 12712  11A6  300A               	movlw	10
 12713  11A7  0650               	xorwf	_gFechaHora+1,w
 12714  11A8  1903               	btfsc	3,2
 12715  11A9  29B1               	goto	i1l248
 12716  11AA                     i1l4339:	
 12717  11AA  3020               	movlw	32
 12718  11AB  0252               	subwf	_gFechaHora+3,w
 12719  11AC  1C03               	skipc
 12720  11AD  0008               	return
 12721  11AE  0350               	decf	_gFechaHora+1,w
 12722  11AF  1D03               	btfss	3,2
 12723  11B0  0008               	return
 12724  11B1                     i1l248:	
 12725                           
 12726                           ;main.c: 581: {
 12727                           ;main.c: 582: gFechaHora.fecha.fecha = 1;
 12728  11B1  01D2               	clrf	_gFechaHora+3
 12729  11B2  0AD2               	incf	_gFechaHora+3,f
 12730                           
 12731                           ;main.c: 583: gFechaHora.fecha.mes++;
 12732  11B3  3001               	movlw	1
 12733  11B4  00F0               	movwf	??_Timer0Int
 12734  11B5  0870               	movf	??_Timer0Int,w
 12735  11B6  07D0               	addwf	_gFechaHora+1,f
 12736                           
 12737                           ;main.c: 584: if(gFechaHora.fecha.mes > 11)
 12738  11B7  300C               	movlw	12
 12739  11B8  0250               	subwf	_gFechaHora+1,w
 12740  11B9  1C03               	skipc
 12741  11BA  0008               	return
 12742                           
 12743                           ;main.c: 585: {
 12744                           ;main.c: 586: gFechaHora.fecha.anio = 0;
 12745  11BB  01CF               	clrf	_gFechaHora
 12746                           
 12747                           ;main.c: 587: if(gFechaHora.fecha.anio > 99)
 12748  11BC  3064               	movlw	100
 12749  11BD  024F               	subwf	_gFechaHora,w
 12750  11BE  1C03               	skipc
 12751  11BF  0008               	return
 12752                           
 12753                           ;main.c: 588: {
 12754                           ;main.c: 589: gFechaHora.fecha.anio = 0;
 12755  11C0  01CF               	clrf	_gFechaHora
 12756  11C1  0008               	return
 12757  11C2                     __end_of_Timer0Int:	
 12758                           
 12759                           	psect	text45
 12760  1CCD                     __ptext45:	
 12761 ;; *************** function _SerialInt *****************
 12762 ;; Defined at:
 12763 ;;		line 618 in file "main.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;		None
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;  ch              1    5[COMMON] unsigned char 
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  1    wreg      void 
 12770 ;; Registers used:
 12771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12777 ;;      Params:         0       0       0       0       0
 12778 ;;      Locals:         1       0       0       0       0
 12779 ;;      Temps:          1       0       0       0       0
 12780 ;;      Totals:         2       0       0       0       0
 12781 ;;Total ram usage:        2 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    1
 12784 ;; This function calls:
 12785 ;;		_SerRecv
 12786 ;; This function is called by:
 12787 ;;		_isr
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           
 12792                           ;psect for function _SerialInt
 12793  1CCD                     _SerialInt:	
 12794                           
 12795                           ;main.c: 620: unsigned char ch;
 12796                           ;main.c: 622: RCIF = 0;
 12797                           
 12798                           ;incstack = 0
 12799                           ; Regs used in _SerialInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12800  1CCD  1283               	bcf	3,5	;RP0=0, select bank0
 12801  1CCE  1303               	bcf	3,6	;RP1=0, select bank0
 12802  1CCF  128C               	bcf	12,5	;volatile
 12803                           
 12804                           ;main.c: 623: ch = RCREG;
 12805  1CD0  081A               	movf	26,w	;volatile
 12806  1CD1  00F4               	movwf	??_SerialInt
 12807  1CD2  0874               	movf	??_SerialInt,w
 12808  1CD3  00F5               	movwf	SerialInt@ch
 12809                           
 12810                           ;main.c: 624: if( !RCIE) return;
 12811  1CD4  1683               	bsf	3,5	;RP0=1, select bank1
 12812  1CD5  1303               	bcf	3,6	;RP1=0, select bank1
 12813  1CD6  1E8C               	btfss	12,5	;volatile
 12814  1CD7  0008               	return
 12815                           
 12816                           ;main.c: 626: SerRecv(ch);
 12817  1CD8  0875               	movf	SerialInt@ch,w
 12818  1CD9  160A  118A  2046   	fcall	_SerRecv
 12819  1CDC  0008               	return
 12820  1CDD                     __end_of_SerialInt:	
 12821                           
 12822                           	psect	text46
 12823  1046                     __ptext46:	
 12824 ;; *************** function _SerRecv *****************
 12825 ;; Defined at:
 12826 ;;		line 136 in file "serial.c"
 12827 ;; Parameters:    Size  Location     Type
 12828 ;;  ch              1    wreg     unsigned char 
 12829 ;; Auto vars:     Size  Location     Type
 12830 ;;  ch              1    3[COMMON] unsigned char 
 12831 ;;  i               1    2[COMMON] unsigned char 
 12832 ;;  sum             1    1[COMMON] unsigned char 
 12833 ;; Return value:  Size  Location     Type
 12834 ;;                  1    wreg      void 
 12835 ;; Registers used:
 12836 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12837 ;; Tracked objects:
 12838 ;;		On entry : 0/0
 12839 ;;		On exit  : 0/0
 12840 ;;		Unchanged: 0/0
 12841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
 12842 ;;      Params:         0       0       0       0       0
 12843 ;;      Locals:         3       0       0       0       0
 12844 ;;      Temps:          1       0       0       0       0
 12845 ;;      Totals:         4       0       0       0       0
 12846 ;;Total ram usage:        4 bytes
 12847 ;; Hardware stack levels used:    1
 12848 ;; This function calls:
 12849 ;;		Nothing
 12850 ;; This function is called by:
 12851 ;;		_SerialInt
 12852 ;; This function uses a non-reentrant model
 12853 ;;
 12854                           
 12855                           
 12856                           ;psect for function _SerRecv
 12857  1046                     _SerRecv:	
 12858                           
 12859                           ;incstack = 0
 12860                           ; Regs used in _SerRecv: [wreg-fsr0h+status,2+status,0]
 12861                           ;SerRecv@ch stored from wreg
 12862  1046  00F3               	movwf	SerRecv@ch
 12863                           
 12864                           ;serial.c: 138: unsigned char sum;
 12865                           ;serial.c: 139: unsigned char i;
 12866                           ;serial.c: 141: if(SerRxBufferIndex == 0)
 12867  1047  1283               	bcf	3,5	;RP0=0, select bank0
 12868  1048  1303               	bcf	3,6	;RP1=0, select bank0
 12869  1049  0856               	movf	_SerRxBufferIndex,w
 12870  104A  1D03               	btfss	3,2
 12871  104B  2869               	goto	i1l3725
 12872                           
 12873                           ;serial.c: 142: {
 12874                           ;serial.c: 144: if(ch == 'Q' || ch == 'R' || ch == 'E')
 12875  104C  3051               	movlw	81
 12876  104D  0673               	xorwf	SerRecv@ch,w
 12877  104E  1903               	btfsc	3,2
 12878  104F  2858               	goto	i1l3719
 12879  1050  3052               	movlw	82
 12880  1051  0673               	xorwf	SerRecv@ch,w
 12881  1052  1903               	btfsc	3,2
 12882  1053  2858               	goto	i1l3719
 12883  1054  3045               	movlw	69
 12884  1055  0673               	xorwf	SerRecv@ch,w
 12885  1056  1D03               	btfss	3,2
 12886  1057  0008               	return
 12887  1058                     i1l3719:	
 12888                           
 12889                           ;serial.c: 145: {
 12890                           ;serial.c: 146: SerRxBuffer[0] = ch;
 12891  1058  0873               	movf	SerRecv@ch,w
 12892  1059  00F0               	movwf	??_SerRecv
 12893  105A  0870               	movf	??_SerRecv,w
 12894  105B  1683               	bsf	3,5	;RP0=1, select bank3
 12895  105C  1703               	bsf	3,6	;RP1=1, select bank3
 12896  105D  00AC               	movwf	_SerRxBuffer^(0+384)
 12897                           
 12898                           ;serial.c: 147: SerRxBufferIndex++;
 12899  105E  3001               	movlw	1
 12900  105F  00F0               	movwf	??_SerRecv
 12901  1060  0870               	movf	??_SerRecv,w
 12902  1061  1283               	bcf	3,5	;RP0=0, select bank0
 12903  1062  1303               	bcf	3,6	;RP1=0, select bank0
 12904  1063  07D6               	addwf	_SerRxBufferIndex,f
 12905                           
 12906                           ;serial.c: 148: SerTimerCount = 5;
 12907  1064  3005               	movlw	5
 12908  1065  00F0               	movwf	??_SerRecv
 12909  1066  0870               	movf	??_SerRecv,w
 12910  1067  00FB               	movwf	_SerTimerCount
 12911                           
 12912                           ;serial.c: 149: }
 12913                           ;serial.c: 150: }
 12914  1068  0008               	return
 12915  1069                     i1l3725:	
 12916                           
 12917                           ;serial.c: 151: else if(SerRxBufferIndex < 15)
 12918  1069  300F               	movlw	15
 12919  106A  0256               	subwf	_SerRxBufferIndex,w
 12920  106B  1803               	skipnc
 12921  106C  287E               	goto	i1l3733
 12922                           
 12923                           ;serial.c: 152: {
 12924                           ;serial.c: 154: SerRxBuffer[SerRxBufferIndex] = ch;
 12925  106D  0873               	movf	SerRecv@ch,w
 12926  106E  00F0               	movwf	??_SerRecv
 12927  106F  0856               	movf	_SerRxBufferIndex,w
 12928  1070  3EAC               	addlw	(low (_SerRxBuffer| (0+256)))& (0+255)
 12929  1071  0084               	movwf	4
 12930  1072  0870               	movf	??_SerRecv,w
 12931  1073  1783               	bsf	3,7	;select IRP bank3
 12932  1074  0080               	movwf	0
 12933                           
 12934                           ;serial.c: 155: SerRxBufferIndex++;
 12935  1075  3001               	movlw	1
 12936  1076  00F0               	movwf	??_SerRecv
 12937  1077  0870               	movf	??_SerRecv,w
 12938  1078  07D6               	addwf	_SerRxBufferIndex,f
 12939                           
 12940                           ;serial.c: 156: SerTimerCount = 5;
 12941  1079  3005               	movlw	5
 12942  107A  00F0               	movwf	??_SerRecv
 12943  107B  0870               	movf	??_SerRecv,w
 12944  107C  00FB               	movwf	_SerTimerCount
 12945                           
 12946                           ;serial.c: 157: }
 12947  107D  0008               	return
 12948  107E                     i1l3733:	
 12949                           
 12950                           ;serial.c: 158: else if(SerRxBufferIndex == 15)
 12951  107E  300F               	movlw	15
 12952  107F  0656               	xorwf	_SerRxBufferIndex,w
 12953  1080  1D03               	btfss	3,2
 12954  1081  0008               	return
 12955                           
 12956                           ;serial.c: 159: {
 12957                           ;serial.c: 161: SerTimerCount = 0;
 12958  1082  01FB               	clrf	_SerTimerCount
 12959                           
 12960                           ;serial.c: 162: SerRxBuffer[SerRxBufferIndex] = ch;
 12961  1083  0873               	movf	SerRecv@ch,w
 12962  1084  00F0               	movwf	??_SerRecv
 12963  1085  0856               	movf	_SerRxBufferIndex,w
 12964  1086  3EAC               	addlw	(low (_SerRxBuffer| (0+256)))& (0+255)
 12965  1087  0084               	movwf	4
 12966  1088  0870               	movf	??_SerRecv,w
 12967  1089  1783               	bsf	3,7	;select IRP bank3
 12968  108A  0080               	movwf	0
 12969                           
 12970                           ;serial.c: 163: SerRxBufferIndex++;
 12971  108B  3001               	movlw	1
 12972  108C  00F0               	movwf	??_SerRecv
 12973  108D  0870               	movf	??_SerRecv,w
 12974  108E  07D6               	addwf	_SerRxBufferIndex,f
 12975                           
 12976                           ;serial.c: 164: sum = 0;
 12977  108F  01F1               	clrf	SerRecv@sum
 12978                           
 12979                           ;serial.c: 165: for(i = 0; i < 15; i++)
 12980  1090  01F2               	clrf	SerRecv@i
 12981  1091  300F               	movlw	15
 12982  1092  0272               	subwf	SerRecv@i,w
 12983  1093  1803               	btfsc	3,0
 12984  1094  28A4               	goto	i1l3755
 12985  1095                     i1l3749:	
 12986                           
 12987                           ;serial.c: 166: {
 12988                           ;serial.c: 167: sum += SerRxBuffer[i];
 12989  1095  0872               	movf	SerRecv@i,w
 12990  1096  3EAC               	addlw	(low (_SerRxBuffer| (0+256)))& (0+255)
 12991  1097  0084               	movwf	4
 12992  1098  0800               	movf	0,w
 12993  1099  00F0               	movwf	??_SerRecv
 12994  109A  0870               	movf	??_SerRecv,w
 12995  109B  07F1               	addwf	SerRecv@sum,f
 12996  109C  3001               	movlw	1
 12997  109D  00F0               	movwf	??_SerRecv
 12998  109E  0870               	movf	??_SerRecv,w
 12999  109F  07F2               	addwf	SerRecv@i,f
 13000  10A0  300F               	movlw	15
 13001  10A1  0272               	subwf	SerRecv@i,w
 13002  10A2  1C03               	skipc
 13003  10A3  2895               	goto	i1l3749
 13004  10A4                     i1l3755:	
 13005                           
 13006                           ;serial.c: 168: }
 13007                           ;serial.c: 169: if(sum != SerRxBuffer[15])
 13008  10A4  1683               	bsf	3,5	;RP0=1, select bank3
 13009  10A5  1703               	bsf	3,6	;RP1=1, select bank3
 13010  10A6  083B               	movf	(_SerRxBuffer^(0+384)+15),w
 13011  10A7  0671               	xorwf	SerRecv@sum,w
 13012  10A8  1903               	skipnz
 13013  10A9  28AE               	goto	i1l3761
 13014                           
 13015                           ;serial.c: 170: {
 13016                           ;serial.c: 172: SerRxBufferIndex = 0;
 13017  10AA  1283               	bcf	3,5	;RP0=0, select bank0
 13018  10AB  1303               	bcf	3,6	;RP1=0, select bank0
 13019  10AC  01D6               	clrf	_SerRxBufferIndex
 13020                           
 13021                           ;serial.c: 173: return;
 13022  10AD  0008               	return
 13023  10AE                     i1l3761:	
 13024                           
 13025                           ;serial.c: 174: }
 13026                           ;serial.c: 176: if(SerRxBuffer[2] != 0x00)
 13027  10AE  1683               	bsf	3,5	;RP0=1, select bank3
 13028  10AF  1703               	bsf	3,6	;RP1=1, select bank3
 13029  10B0  082E               	movf	(_SerRxBuffer^(0+384)+2),w
 13030  10B1  1903               	btfsc	3,2
 13031  10B2  28B7               	goto	i1l3767
 13032                           
 13033                           ;serial.c: 177: {
 13034                           ;serial.c: 178: SerRxBufferIndex = 0;
 13035  10B3  1283               	bcf	3,5	;RP0=0, select bank0
 13036  10B4  1303               	bcf	3,6	;RP1=0, select bank0
 13037  10B5  01D6               	clrf	_SerRxBufferIndex
 13038                           
 13039                           ;serial.c: 179: return;
 13040  10B6  0008               	return
 13041  10B7                     i1l3767:	
 13042                           
 13043                           ;serial.c: 180: }
 13044                           ;serial.c: 183: if(SerRxBuffer[1] != IOPORTCONF.hw_address &&
 13045                           ;serial.c: 184: SerRxBuffer[1] != 0xFF )
 13046  10B7  1683               	bsf	3,5	;RP0=1, select bank3
 13047  10B8  1703               	bsf	3,6	;RP1=1, select bank3
 13048  10B9  082D               	movf	(_SerRxBuffer^(0+384)+1),w
 13049  10BA  0610               	xorwf	_IOPORTCONF^(0+384),w
 13050  10BB  1903               	skipnz
 13051  10BC  0008               	return
 13052  10BD  0A2D               	incf	(_SerRxBuffer^(0+384)+1),w
 13053  10BE  1903               	btfsc	3,2
 13054  10BF  0008               	return
 13055                           
 13056                           ;serial.c: 185: {
 13057                           ;serial.c: 186: SerRxBufferIndex = 0;
 13058  10C0  1283               	bcf	3,5	;RP0=0, select bank0
 13059  10C1  1303               	bcf	3,6	;RP1=0, select bank0
 13060  10C2  01D6               	clrf	_SerRxBufferIndex
 13061                           
 13062                           ;serial.c: 187: return;
 13063  10C3  0008               	return
 13064  10C4                     __end_of_SerRecv:	
 13065  007E                     btemp	set	126	;btemp
 13066  007E                     wtemp0	set	126


Data Sizes:
    Strings     37
    Constant    0
    Data        0
    BSS         163
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     47      76
    BANK1            80      0      74
    BANK3            96      0      60
    BANK2            96      0       0

Pointer List with Targets:

    utoa@buf	PTR unsigned char  size(1) Largest target is 19
		 -> PrintInfoScreen@str(BANK0[19]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 0

    LCDMsg@msg	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_2(CODE[19]), STR_1(CODE[18]), SerialMsg.xData(BANK0[10]), SerialMsg(BANK0[16]), 
		 -> PrintInfoScreen@str(BANK0[19]), 

    SerReceive@msg	PTR struct _serial_msg size(1) Largest target is 16
		 -> SerialMsg(BANK0[16]), 

    SerReceive@p	PTR unsigned char  size(1) Largest target is 16
		 -> SerialMsg.xTyp(BANK0[1]), SerialMsg(BANK0[16]), 

    SerSendR@msg	PTR struct _serial_msg size(1) Largest target is 16
		 -> SerialMsg(BANK0[16]), 

    SerSendR@p	PTR unsigned char  size(1) Largest target is 16
		 -> SerialMsg.xTyp(BANK0[1]), SerialMsg(BANK0[16]), 

    SerSendQ@msg	PTR struct _serial_msg size(1) Largest target is 16
		 -> LastMsgSend(BANK3[16]), 

    SerSendQ@p	PTR unsigned char  size(1) Largest target is 16
		 -> LastMsgSend.xTyp(BANK3[1]), LastMsgSend(BANK3[16]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 19
		 -> PrintInfoScreen@str(BANK0[19]), 

    PrintMes@str	PTR unsigned char  size(1) Largest target is 19
		 -> PrintInfoScreen@str(BANK0[19]), 

    PrintDiaSem@str	PTR unsigned char  size(1) Largest target is 19
		 -> PrintInfoScreen@str(BANK0[19]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_SerialInt
    _SerialInt->_SerRecv

Critical Paths under _main in BANK0

    _main->_PrintInfoScreen
    _SerSendR->_SerPutCh
    _SerSendQ->_SerPutCh
    _SaveStatus->_iEEputc
    _SaveConfig->_iEEputc
    _PrintInfoScreen->_utoa
    _utoa->___lwdiv
    _LCDMsg->_LCDGoto
    _LCDGoto->_LCDSend
    _LoadStatus->_iEEgetc
    _LoadConfig->_iEEgetc
    _LCDInit->_LCDSend
    _LCDSend->_LCDBusInput
    _LCDSend->_LCDBusOutput
    _IOTimer->_IOControlFinPulso
    _IOTask->_IOUpdateIn
    _IOTask->_IOUpdateOut
    _IOInit->_IOUpdateOut

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   18115
                                             38 BANK0      9     9      0
                               _Beep
                          _IOChanges
                             _IOInit
                     _IOResetChanges
                             _IOTask
                            _IOTimer
                            _LCDInit
                             _LCDMsg
                         _LoadConfig
                         _LoadStatus
                          _PerifInit
                          _PerifTask
                     _PerifTimer10ms
                       _PerifTimer1s
                    _PrintInfoScreen
                         _SaveConfig
                         _SaveStatus
                             _SerAck
                            _SerInit
                         _SerReceive
                           _SerSendQ
                           _SerSendR
                            _SerTask
                         _SerTimeOut
                           _SerTimer
                             ___bmul
                           _minipow2
 ---------------------------------------------------------------------------------
 (1) _minipow2                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     248
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _SerTimer                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SerTimeOut                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SerTask                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SerSendR                                             6     6      0     384
                                              1 BANK0      6     6      0
                           _SerPutCh
 ---------------------------------------------------------------------------------
 (1) _SerSendQ                                             6     6      0     438
                                              1 BANK0      6     6      0
                           _SerPutCh
 ---------------------------------------------------------------------------------
 (2) _SerPutCh                                             1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SerReceive                                           4     4      0     141
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SerInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SerAck                                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _SaveStatus                                           1     1      0    2823
                                              4 BANK0      1     1      0
                            _iEEputc
 ---------------------------------------------------------------------------------
 (1) _SaveConfig                                           1     1      0    2823
                                              4 BANK0      1     1      0
                            _iEEputc
 ---------------------------------------------------------------------------------
 (2) _iEEputc                                              4     3      1    2823
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _PrintInfoScreen                                     21    21      0    6783
                                             17 BANK0     21    21      0
                             _LCDMsg
                        _PrintDiaSem
                           _PrintMes
                               _utoa
 ---------------------------------------------------------------------------------
 (2) _utoa                                                 9     5      4    1846
                                              8 BANK0      9     5      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     265
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     374
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _PrintMes                                             3     2      1     867
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PrintDiaSem                                          3     2      1     537
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _LCDMsg                                               5     2      3    2975
                                              8 BANK0      5     2      3
                            _LCDGoto
                            _LCDSend
 ---------------------------------------------------------------------------------
 (3) _LCDGoto                                              2     1      1     974
                                              6 BANK0      2     1      1
                            _LCDSend
 ---------------------------------------------------------------------------------
 (1) _PerifTimer1s                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PerifTimer10ms                                       1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PerifTask                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PerifInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LoadStatus                                           1     1      0      22
                                              1 BANK0      1     1      0
                            _iEEgetc
 ---------------------------------------------------------------------------------
 (1) _LoadConfig                                           1     1      0      22
                                              1 BANK0      1     1      0
                            _iEEgetc
 ---------------------------------------------------------------------------------
 (2) _iEEgetc                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              2     2      0     723
                                              6 BANK0      2     2      0
                        _LCDBusInput
                       _LCDBusOutput
                            _LCDSend
 ---------------------------------------------------------------------------------
 (3) _LCDSend                                              5     4      1     723
                                              1 BANK0      5     4      1
                        _LCDBusInput
                       _LCDBusOutput
 ---------------------------------------------------------------------------------
 (4) _LCDBusOutput                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _LCDBusInput                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOTimer                                              0     0      0       0
                  _IOControlFinPulso
 ---------------------------------------------------------------------------------
 (2) _IOControlFinPulso                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOTask                                               0     0      0       0
                         _IOUpdateIn
                        _IOUpdateOut
 ---------------------------------------------------------------------------------
 (2) _IOUpdateIn                                           1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOResetChanges                                       3     2      1     322
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _IOInit                                               1     1      0       0
                                              1 BANK0      1     1      0
                        _IOUpdateOut
 ---------------------------------------------------------------------------------
 (2) _IOUpdateOut                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _IOChanges                                            3     3      0      49
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Beep                                                 7     7      0     114
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0     247
                                              6 COMMON     4     4      0
                          _SerialInt
                          _Timer0Int
 ---------------------------------------------------------------------------------
 (7) _Timer0Int                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _SerialInt                                            2     2      0     247
                                              4 COMMON     2     2      0
                            _SerRecv
 ---------------------------------------------------------------------------------
 (8) _SerRecv                                              4     4      0     224
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Beep
   _IOChanges
   _IOInit
     _IOUpdateOut
   _IOResetChanges
   _IOTask
     _IOUpdateIn
     _IOUpdateOut
   _IOTimer
     _IOControlFinPulso
   _LCDInit
     _LCDBusInput
     _LCDBusOutput
     _LCDSend
       _LCDBusInput
       _LCDBusOutput
   _LCDMsg
     _LCDGoto
       _LCDSend
         _LCDBusInput
         _LCDBusOutput
     _LCDSend
       _LCDBusInput
       _LCDBusOutput
   _LoadConfig
     _iEEgetc
   _LoadStatus
     _iEEgetc
   _PerifInit
   _PerifTask
   _PerifTimer10ms
   _PerifTimer1s
   _PrintInfoScreen
     _LCDMsg
       _LCDGoto
         _LCDSend
           _LCDBusInput
           _LCDBusOutput
       _LCDSend
         _LCDBusInput
         _LCDBusOutput
     _PrintDiaSem
     _PrintMes
     _utoa
       ___lwdiv
       ___lwmod
   _SaveConfig
     _iEEputc
   _SaveStatus
     _iEEputc
   _SerAck
   _SerInit
   _SerReceive
   _SerSendQ
     _SerPutCh
   _SerSendR
     _SerPutCh
   _SerTask
   _SerTimeOut
   _SerTimer
   ___bmul
   _minipow2

 _isr (ROOT)
   _SerialInt
     _SerRecv
   _Timer0Int

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      E0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2F      4C       5       95.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0      3C       9       62.5%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      E0      12        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Mar 30 04:18:24 2018

                         pc 0002              ___bmul@product 0022                 __CFG_CP$OFF 0000  
                        l23 1DF5                          l25 1DFC                          _WR 0C61  
                        fsr 0004                         l207 1310                         l224 16A4  
                       l351 04CD                         l272 00B5                         l361 0596  
                       l610 0736                         l602 06F6                         l290 0141  
                       l620 0786                         l612 0746                         l604 0706  
                       l428 1CAA                         l284 011F                         l630 07D6  
                       l622 0796                         l614 0756                         l606 0716  
                       l624 07A6                         l616 0766                         l608 0726  
                       l626 07B6                         l618 0776                         l628 07C6  
                       l661 1EA9                         l770 11E1                         l763 103B  
                       l773 11EA                         l782 1F30                         l769 11E5  
                       _GIE 005F                         _RB1 0031                         _RE1 0049  
              __CFG_CPD$OFF 0000   __end_of_IOControlFinPulso 07E7                         _isr 1CDD  
                       fsr0 0004                         indf 0000                __CFG_FOSC$XT 0000  
             SerReceive@msg 0021             __end_of_LCDInit 157E                __CFG_LVP$OFF 0000  
           __end_of_LCDGoto 1F31             __end_of_LCDSend 1262                        l1180 1FEA  
                      l4011 0F22                        l4003 0F0C                        l4031 0F5C  
                      l4025 0F4A                        l4017 0F34                        l3403 11F6  
                      l5011 0147                        l4053 0F9A                        l4045 0F84  
                      l5013 014C                        l4039 0F72                        l3511 1EB4  
                      l5111 0380                        l5103 036B                        l4081 0FEA  
                      l4073 0FD4                        l4209 0C18                        l4217 0A15  
                      l3601 12E4                        l3513 1EC2                        l5113 0388  
                      l5105 0378                        l5033 01AA                        l5025 0185  
                      l5009 0143                        l4067 0FC2                        l4059 0FAC  
                      l4219 0B4D                        l3611 1582                        l3523 1EE3  
                      l5115 0391                        l5123 03AC                        l5107 0379  
                      l5051 0218                        l5043 01DA                        l5019 015C  
                      l3621 15AC                        l3541 1E27                        l5205 057B  
                      l5133 041D                        l5117 039A                        l5125 03BF  
                      l5045 01E4                        l5037 01C0                        l5029 01A3  
                      l4087 0FFC                        l3607 12F9                        l3519 1ED8  
                      l3535 1E0B                        l4247 13F3                        l5207 0588  
                      l5151 0469                        l5143 0447                        l5135 0425  
                      l5127 03C3                        l5119 03A3                        l5071 031B  
                      l3641 1615                        l3633 15EB                        l3625 15C1  
                      l3617 1597                        l3537 1E19                        l3545 1E32  
                      l4257 143A                        l5233 05E5                        l5241 0613  
                      l5217 05B0                        l5065 02F2                        l3491 1F02  
                      l3707 1013                        l4267 1468                        l5235 05F6  
                      l5163 049B                        l5155 0479                        l5147 0457  
                      l5139 0435                        l5091 0348                        l5083 0331  
                      l5059 0254                        l5219 05BD                        l4605 1D38  
                      l3813 1F63                        l3493 1F0C                        l3581 127B  
                      l3653 1654                        l3645 162A                        l3637 1600  
                      l3629 15D6                        l4701 1DB4                        l5245 0622  
                      l5069 0316                        l3911 0E12                        l3495 1F16  
                      l3575 1266                        l3663 167E                        l5263 064A  
                      l5239 0608                        l5183 04DC                        l5167 04AD  
                      l5159 048B                        l5095 0351                        l5191 054D  
                      l4801 1E44                        l3905 0E00                        l3489 1EFA  
                      l3593 12BA                        l3585 1290                        l3657 1669  
                      l3649 163F                        l5257 063A                        l5281 06AA  
                      l5185 04FB                        l5097 0359                        l4803 1E4C  
                      l4811 1E6D                        l4627 1D89                        l3499 1F20  
                      l3667 1F9B                        l4731 0854                        l4715 0815  
                      l4707 1DB6                        l5099 0362                        l5195 055C  
                      l4805 1E53                        l3933 0E50                        l3925 0E3A  
                      l3597 12CF                        l3589 12A5                        l3677 1FBC  
                      l4725 0834                        l4821 07F1                        l5277 06A3  
                      l5189 0500                        l4751 1E82                        l3919 0E28  
                      l3863 0D88                        l4663 1D70                        l4809 1E5F  
                      l4753 1E8E                        l3961 0EA0                        l3953 0E8A  
                      l4657 1D6D                        l4649 1D56                        l4817 07EB  
                      l4681 1DAA                        l4673 1DA6                        l4747 1E73  
                      l3947 0E78                        l3939 0E62                        l3891 0DD8  
                      l3883 0DC2                        l4597 1D24                        l4749 1E7A  
                      l4757 1E9A                        l3877 0DB0                        l3869 0D9A  
                      l4693 1DB0                        l4685 1DAC                        l4677 1DA8  
                      l4669 1DA4                        l3983 0ED2                        l3967 0EB2  
                      l3897 0DEA                        l4785 111C                        l4697 1DB2  
                      l4689 1DAE                        l4779 10FC                        ?_isr 0070  
                      l3997 0EFA                        l3989 0EE4                        l4981 010F  
                      l4799 1E3C                        l4975 0100                        l4959 00D8  
                      l4993 0128                        l4969 00F1                        l4989 0121  
                      l4999 0137                        _EEIF 006C                        STR_1 1823  
              __CFG_WDTE$ON 0000                        STR_2 1810                        _BRGH 04C2  
               LCDGoto@line 0027                        _T0IE 005D                        _T0IF 005A  
                      _CREN 00C4                        _IOCB 0096                        u3005 1E0E  
                      u3025 1E1F                        u3035 1E28                        u5215 01FB  
                      u5225 022F                        u5235 0257                        _PEIE 005E  
                      u5405 03D0                        u5245 026D                        _INTE 005C  
                      u2935 1EB7                        u5415 03E2                        u5255 0282  
                      u5425 03F4                        u5265 0294                        u2875 123B  
                      u2955 1EC3                        u5435 0408                        u5275 02A8  
                      _RCIE 0465                        _RCIF 0065                        u2965 1ECF  
                      u5285 02BD                        u2975 1ED9                        u5295 02D2  
                      u5707 14AF                        u4915 10FA                        u5717 14E3  
                      u4925 111A                        u5727 14F7                        u4935 1129  
                      u5737 151F                        u5585 0670                        _OERR 00C1  
                      u5747 1536                        u4875 0832                        u4885 0852  
                      u4895 0861                        _SPEN 00C7                        _TRMT 04C1  
                      _WREN 0C62                        _TXEN 04C5                        _SYNC 04C4  
                      _Beep 1D1B                        _WPUB 0095             __end_of_IOTimer 07FE  
               LCDMsg@linea 002C                        _main 0035                        btemp 007E  
                      _utoa 1F94                        start 0012                 LCDSend@data 0024  
            ??_LCDBusOutput 0020           ___bmul@multiplier 0023            ??_PerifTimer10ms 0020  
           __end_of_iEEgetc 1CCD             __end_of_SerInit 1D1B             __end_of_iEEputc 1E03  
                     ??_isr 0076             __end_of_SerRecv 10C4             __end_of_SerTask 1C69  
        __size_of_IOChanges 0038     __size_of_IOResetChanges 003B                       ?_Beep 0070  
                     ?_main 0070                       _EEADR 010D                       _BRG16 0C3B  
                     _EEPGD 0C67                       _ANSEL 0188                       ?_utoa 0028  
           __end_of___lwdiv 1EE8                       i1l248 11B1             __end_of___lwmod 1E37  
                     i1l267 1CED                       _RCREG 001A                       _SPBRG 0099  
                     _PORTA 0005                       _PORTB 0006                       _PORTC 0007  
                     _PORTD 0008                       _PORTE 0009                       _TRISA 0085  
                     _TRISB 0086                       _TRISC 0087                       _TRISD 0088  
                     _TRISE 0089                       _TXREG 0019                       _Blink 007D  
             __CFG_PWRTE$ON 0000                 ?_IOUpdateIn 0070                       main@i 004E  
            __pbitbssCOMMON 03D0              __CFG_BOREN$OFF 0000                       pclath 000A  
                     utoa@c 002F                       utoa@v 002D                       status 0003  
                _LastCntRcv 00E8                       wtemp0 007E                  _OnLineFlag 03D1  
                _LoadConfig 0B8E                  SerRecv@sum 0071            ?_PrintInfoScreen 0070  
              __end_of_Beep 1D46             __initialization 0015                  _LoadStatus 09F1  
              __end_of_main 06E4                  SerPutCh@ch 0020                __end_of_utoa 2000  
                    ??_Beep 0020                      ??_main 0046            __end_of_SerSendQ 1142  
          __end_of_SerSendR 087A            __end_of_SerPutCh 1CB3                      ??_utoa 002C  
          __end_of_SerTimer 1CBF  __size_of_IOControlFinPulso 0103                   ??_LCDInit 0026  
                 ??_LCDGoto 0027                   ??_LCDSend 0022            __end_of_PrintMes 16A5  
                _gWGND_Data 00DC                   ??_IOTimer 0021                  _SaveConfig 087A  
                    _ADCON0 001F                      _ADCON1 009F                  _SerReceive 1D46  
                    _EEDATA 010C                      _EECON2 018D                      _ANSELH 0189  
                _SerTimeOut 1C9E                      _LCDMsg 1004                      _LCD_Ok 03D0  
                    i1l4325 118F                      i1l4329 1196                      i1l4281 114E  
                    i1l4339 11AA                      i1l3733 107E                      i1l3725 1069  
                    i1l4285 1155                  _SaveStatus 16A5                      i1l3719 1058  
                    i1l3761 10AE                      i1l3755 10A4                      i1l3749 1095  
                    i1l3767 10B7                      i1l4833 1CE4           __end_of_IOChanges 1E6F  
                    _INTCON 000B                      _IOPORT 00A0                      _IOInit 1311  
                    _IOTask 1C71                      _SPBRGH 009A                   ??_iEEgetc 0020  
                 ??_SerInit 0020                   ??_iEEputc 0021                   ??_SerRecv 0070  
              ?_IOUpdateOut 0070                   ??_SerTask 0020                      _SerAck 1C95  
                _gFechaHora 004F               LCDMsg@columna 0028          __size_of_PerifInit 0009  
       __size_of_IOUpdateIn 0297          __size_of_PerifTask 0001                      ___bmul 07E7  
      __size_of_LCDBusInput 0009                  _TimerFlag1 03D3                  _TimerFlag2 03D2  
             ?_PerifTimer1s 0070                   ??___lwdiv 0024                   ??___lwmod 0024  
        __size_of_SerialInt 0010          __size_of_Timer0Int 0080            __end_of_minipow2 1DD1  
             ??_PrintDiaSem 0021                      saved_w 007E        __end_of_LCDBusOutput 1C8C  
               IOChanges@io 0021                 IOChanges@rc 0022                 iEEputc@data 0020  
               _LastMsgSend 01BC     __end_of__initialization 0031            _SerRxBufferIndex 0056  
           _gWGND_DataReady 00E2                 ?_LoadConfig 0070                 SerReceive@i 0023  
               SerReceive@p 0022                 SerSendQ@msg 0026                   LCDMsg@msg 0029  
               SerSendR@msg 0026         ___bmul@multiplicand 0020                 ?_LoadStatus 0070  
            __pcstackCOMMON 0070              ??_PerifTimer1s 0020              _IOResetChanges 1E6F  
               minipow2@pot 0020                 ?_SaveConfig 0070           __end_of_PerifInit 1C95  
         __end_of_PerifTask 0800                 ?_SerReceive 0070         __end_of_PrintDiaSem 1311  
               ?_SerTimeOut 0070                  __pbssBANK0 004F                  __pbssBANK1 00A0  
                __pbssBANK3 0190                     ?_LCDMsg 0028                 ?_SaveStatus 0070  
                   ?_IOInit 0070           __end_of_SerialInt 1CDD                     ?_IOTask 0070  
            PrintDiaSem@dia 0022           __end_of_Timer0Int 11C2              PrintDiaSem@str 0020  
               _PerifBeepOn 00E4                   ?_SerSendQ 0070                   ?_SerSendR 0070  
                 ?_SerPutCh 0070                   ?_SerTimer 0070                     ?_SerAck 0070  
                __pmaintext 0035      __end_of_IOResetChanges 1EAA                     ?___bmul 0020  
                 ?_PrintMes 0020                 _RebootTimer 007C                 SerialInt@ch 0075  
                __pintentry 0004                     _CM1CON0 0107                 _SerMsgCount 00E6  
                   _CM2CON0 0108                     _CCP1CON 0017                     _CM2CON1 0109  
                   _CCP2CON 001D                 _SerRxBuffer 01AC                     _LCDInit 148B  
                   _LCDGoto 1EE8                     _LCDSend 11C2         __size_of_LoadConfig 01DB  
              ??_IOUpdateIn 0020                     _IOTimer 07FA            IOResetChanges@io 0022  
       __size_of_LoadStatus 019D                  __stringtab 1800             __size_of_LCDMsg 0042  
           __size_of_IOInit 00BA             __size_of_IOTask 0009                   ?_minipow2 0070  
                ??_SerSendQ 0021                  ??_SerSendR 0021                     _iEEgetc 1CBF  
                ??_SerPutCh 0020                  ??_SerTimer 0020                     _SerInit 1CFA  
                   _iEEputc 1DD1                     _SerRecv 1046                     _SerTask 1C62  
            iEEgetc@address 0020             __size_of_SerAck 0009             ?_IOResetChanges 0020  
                ??_PrintMes 0021             __size_of___bmul 0013          __end_of_IOUpdateIn 1000  
      __size_of_IOUpdateOut 0063                   Beep@count 0026         __size_of_SaveConfig 0177  
                   ___lwdiv 1EAA                     ___lwmod 1E03         __size_of_SerReceive 002C  
       __size_of_SerTimeOut 0009       __size_of_LCDBusOutput 0009         __size_of_SaveStatus 015B  
                   __ptext1 1DA0                     __ptext2 07E7                     __ptext3 1CB3  
                   __ptext4 1C9E                     __ptext5 1C62                     __ptext6 0801  
                   __ptext7 10C4                     __ptext8 1CA7                     __ptext9 1D46  
               _PrintDiaSem 1262                 PrintMes@mes 0022                 PrintMes@str 0020  
              __size_of_isr 001D               _SerTimerCount 007B        __end_of_PerifTimer1s 07FF  
                   clrloop0 1C6A        end_of_initialization 0031             _SaveConfigTimer 0058  
                ??_minipow2 0020                   _IOChanges 1E37                _LCDBusOutput 1C83  
                   utoa@buf 0030                     utoa@val 0028    __size_of_PrintInfoScreen 00C0  
   __size_of_PerifTimer10ms 002E              __end_of_LCDMsg 1046                  LCDGoto@col 0026  
              ??_LoadConfig 0021              __end_of_IOInit 13CB              __end_of_IOTask 1C7A  
                ?_IOChanges 0070               ??_LCDBusInput 0020                  LCDSend@cmd 0021  
              ??_LoadStatus 0021              __end_of_SerAck 1C9E              __end_of___bmul 07FA  
       start_initialization 0015                   SerRecv@ch 0073                   SerSendQ@i 0024  
                 SerSendR@i 0024                   SerSendQ@p 0023                   SerSendR@p 0023  
        __end_of_LoadConfig 0D69                   _InitTimer 00E7                ??_SaveConfig 0024  
               __end_of_isr 1CFA                ??_SerReceive 0020          __end_of_LoadStatus 0B8E  
              ??_SerTimeOut 0020                ??_SaveStatus 0024                    ??_LCDMsg 002B  
                 _PerifInit 1C8C                    ??_IOInit 0021                   _PerifTask 07FF  
                  ??_IOTask 0021                    ??_SerAck 0020                   _SerialInt 1CCD  
                 _SerialMsg 005C                   _Timer0Int 1142                   _TimerDiv1 005B  
                 _TimerDiv2 005A           __size_of_SerSendQ 007E           __size_of_SerSendR 0079  
                  ??___bmul 0021           __size_of_SerPutCh 000C           __size_of_SerTimer 000C  
            _PerifBeepCount 00E5          __end_of_SaveConfig 09F1         __end_of_LCDBusInput 1C83  
         __size_of_PrintMes 0127          __end_of_SerReceive 1D72          __end_of_SerTimeOut 1CA7  
        __end_of_SaveStatus 1800                    ?_LCDInit 0070                    ?_LCDGoto 0026  
     __size_of_PerifTimer1s 0001                    ?_LCDSend 0021                 __pbssCOMMON 007B  
            _gWGND_BitCount 00E0                   ___latbits 0002               __pcstackBANK0 0020  
         ??_PrintInfoScreen 0031                    ?_IOTimer 0070                  ?_PerifInit 0070  
                ?_PerifTask 0070                _PerifBeepOff 00E3            ??_IOResetChanges 0021  
                 __pnvBANK1 00E7                 ??_IOChanges 0020                    ?_iEEgetc 0070  
                  ?_SerInit 0070                    ?_iEEputc 0020                    ?_SerRecv 0070  
                ?_SerialInt 0070                    ?_SerTask 0070            ___lwdiv@dividend 0022  
                ?_Timer0Int 0070           __size_of_minipow2 0031                _PerifTimer1s 07FE  
                  ?___lwdiv 0020                    ?___lwmod 0020          PrintInfoScreen@str 0033  
          _gWGND_TimerCount 00E1                   __pstrings 1800                ?_PrintDiaSem 0020  
            _PerifTimer10ms 1D72            ___lwdiv@quotient 0025           interrupt_function 0004  
                 clear_ram0 1C69               ??_IOUpdateOut 0020                 _LCDBusInput 1C7A  
                  _Beep$518 0022                    _Beep$519 0024                 __stringbase 180F  
    __end_of_PerifTimer10ms 1DA0             _SaveStatusTimer 0057            __size_of_LCDInit 00F3  
          __size_of_LCDGoto 0049            __size_of_LCDSend 00A0          iEEputc@INTCON_SAVE 0023  
          __size_of_IOTimer 0004                    SerRecv@i 0072                 ??_PerifInit 0020  
               ??_PerifTask 0020                  _EECON1bits 018C                    _PauseMsg 00E9  
                  _SerSendQ 10C4                    _SerSendR 0801                    _SerPutCh 1CA7  
                  _SerTimer 1CB3                 ??_SerialInt 0074                 ??_Timer0Int 0070  
          __size_of_iEEgetc 000E            __size_of_SerInit 0021            __size_of_iEEputc 0032  
          __size_of_SerRecv 007E            __size_of_SerTask 0007                    _RetryMsg 0059  
                  _PrintMes 157E         __end_of_IOUpdateOut 1F94            __size_of___lwdiv 003E  
          __size_of___lwmod 0034          __end_of__stringtab 1810             ?_PerifTimer10ms 0070  
                  _main$354 004A                    _main$355 004C             ___lwdiv@divisor 0020  
           ___lwdiv@counter 0027                    __ptext10 1CFA                    __ptext11 1C95  
                  __ptext20 1262                    __ptext12 16A5                    __ptext21 1004  
                  __ptext13 087A                    __ptext30 148B                    __ptext22 1EE8  
                  __ptext14 1DD1                    __ptext31 11C2                    __ptext23 07FE  
                  __ptext15 13CB                    __ptext40 1F31                    __ptext32 1C83  
                  __ptext24 1D72                    __ptext16 1F94                    __ptext41 1E37  
                  __ptext33 1C7A                    __ptext25 07FF                    __ptext17 1E03  
                  __ptext42 1D1B                    __ptext34 07FA                    __ptext26 1C8C  
                  __ptext18 1EAA                    __ptext43 1CDD                    __ptext35 06E4  
                  __ptext27 09F1                    __ptext19 157E                    __ptext44 1142  
                  __ptext36 1C71                    __ptext28 0B8E                    __ptext45 1CCD  
                  __ptext37 0D69                    __ptext29 1CBF                    __ptext46 1046  
                  __ptext38 1E6F                    __ptext39 1311               __size_of_Beep 002B  
             __size_of_main 06AF               __size_of_utoa 006C                    _minipow2 1DA0  
           _PrintInfoScreen 13CB                  _IOPORTCONF 0190        __size_of_PrintDiaSem 00AF  
                  intlevel1 0000            ___lwmod@dividend 0022                   stringcode 180A  
               _IOUpdateOut 1F31                    utoa@base 002A                  _OPTION_REG 0081  
           ___lwmod@divisor 0020             ___lwmod@counter 0025                    stringdir 180A  
                _IOUpdateIn 0D69                    stringtab 1800           _IOControlFinPulso 06E4  
       IOResetChanges@reset 0020              iEEputc@address 0022          ?_IOControlFinPulso 0070  
           LCDSend@aux_byte 0025         ??_IOControlFinPulso 0020     __end_of_PrintInfoScreen 148B  
              ?_LCDBusInput 0070               ?_LCDBusOutput 0070  
